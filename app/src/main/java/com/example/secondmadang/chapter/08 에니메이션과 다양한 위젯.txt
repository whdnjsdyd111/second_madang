            08-1 애니메이션 사용하기

화면을 구성하는 각 뷰에 애니메이션을 적용하자.
안드로이드는 여러 방법 중 트윈 애니메이션이 가장 간단하며 일반적으로 사용된다.
이는 이동, 확대/축소, 회전과 같은 일정 패턴으로 움직이는 애니메이션을 구현할 때 사용된다.

애니메이션이 동작하는 정보는 XML 에서 정의한다.
이는 자바 코드에서 애니메이션 객체로 로딩한 후 뷰 객체의 startAnimation() 메소드로 동작하게 할 수 있다.
즉, 첫 번째로 XML 애니메이션 정의. 두 번재로 XML 을 로딩하여 객체로 만들기. 마지막으로 뷰에 적용하여 동작시킨다.


    구분      이름                  설명

                뷰       View 는 위젯이나 레이아웃 모두 포함.
                        예로 텍스트뷰나 리니어 레이아웃 등에 적용할 수 있다.
    대상

            그리기 객체  다양한 드로어블에 애니메이션 적용 가능.
                         ShapeDrawable 은 캔버스에 그릴 도형을 지정할 수 있고, BitmapDrawable 은 비트맵 이미지를 지정할 수 있음


            위치 이동   Translate 로 정의한 액션은 대상 위치 이동
            확대/축소   Scale 로 정의한 액션은 대상 크기를 키우거나 줄이는데 효과
    효과    회전        Rotate 액션은 대상을 회전시킴
            투명도      Alpha 액션은 대상 투명도를 정의


애니메이션을 위한 XML 파일은 'app/res/anim' 폴더에 두고 만들어야 한다 그래야 빌드 시 컴파일된다.

anim 폴더를 만들고 scale.xml 파일을 만들어보자. 이는 대상을 두 배로 확대하는 스케일 액션이다.


    <?xml version="1.0" encoding="utf-8"?>
    <set xmlns:android="http://schemas.android.com/apk/res/android">
        <scale
            android:duration="2500"
            android:pivotX="50%"
            android:pivotY="50%"
            android:fromXScale="1.0"
            android:fromYScale="1.0"
            android:toXScale="2.0"
            android:toYScale="2.0" />

    </set>


자동으로 만들어진 <set> 태그에 <scale> 태그를 추가했다.
각 애니메이션 액션이 갖는 공통 속성은 여러 가지지만 그중 시작, 지속 시간이 대표적이다.
시작 시간은 startOffset, 지속 시간은 duration 으로 정의된다.
startOffset 은 애니메이션 시작한지 얼마후에 액션 수행할 것인지 알 수 있게 한다.
이를 지정하지 않은 애니메이션은 바로 시작된다.
duration 은 지속시간으로 여기선 2.5 초로 지정되어 있다.

<scale> 태그는 대상을 확대/축소할 때 사용되며 X 축과 Y 축에 대해 pivotX, pivotY 로 지정한다.
fromXScale, fromYScale 은 시작 시 확대/축소의 비율이며
toXScale, toYScale 은 끝날 때의 학대/축소 비율이다. 여기선 1.0 으로 시작되어 2.0 으로 끝나니 두 배로 확대를 수행한다.

이번엔 메인 XML 파일을 만들어 버튼을 추가한다.
그리고 버튼을 누르면 애니메이션이 적용되는 코드를 작성한다.


    public class AnimationScaleActivity extends AppCompatActivity {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.animation_scale);

            Button button = findViewById(R.id.button86);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Animation anim =
                            AnimationUtils.loadAnimation(getApplicationContext(), R.anim.scale);

                    v.startAnimation(anim);
                }
            });
        }
    }


버튼을 클릭하면 애니메이션 정보를 로딩하기 위해 AnimationUtils 클래스의 loadAnimation() 메소드를 사용한다.
첫 번째는 컨텍스트 객체를 전달하고, 두 번재 파라미터는 XML 리소스에 정의된 애니메이션 액션 id 값으로
애니메이션 리소스 이름인 R.anim.scale 이 사용된다. 이후 startAnimation() 메소드를 호출하여
버튼에 애니메이션 효과를 주게 된다.


    public static Animation loadAnimation(Context context, int id)


첫 번째 파라미터는 컨텍스트 객체이니 getApplicationContext() 를 사용했고,
두 번째 파라미터는 XML 리소스의 애니메이션 액션 id 값을 준다.

애니메이션이 끝나고 원상태로 갑자기 바뀌는게 부자연스러울 수 있다.
이를 해결하는 것은 간단하게 애니메이션을 거꾸로 적용하여 두 애니메이션을 연속으로 묶는 방법이다.

scale2.xml 애니메이션 파일을 만들어 다음과 같이 작성하자.


    <?xml version="1.0" encoding="utf-8"?>
    <set xmlns:android="http://schemas.android.com/apk/res/android">

        <scale
            android:duration="2500"
            android:pivotX="50%"
            android:pivotY="50%"
            android:fromXScale="1.0"
            android:fromYScale="1.0"
            android:toXScale="2.0"
            android:toYScale="2.0" />

        <scale
            android:startOffset="2500"
            android:duration="2500"
            android:pivotX="50%"
            android:pivotY="50%"
            android:fromXScale="1.0"
            android:fromYScale="1.0"
            android:toXScale="0.5"
            android:toYScale="0.5" />
    </set>


<set> 태그 안에 두 스케일 애니메이션을 사용하였다.
메인 XML 파일에서 버튼을 하나 더 추가하자. 그리고 메인 액티비티 자바에서 적용해본다.


    Button button1 = findViewById(R.id.button87);
    button1.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            Animation anim =
                    AnimationUtils.loadAnimation(getApplicationContext(), R.anim.scale2);

            v.startAnimation(anim);
        }
    });


이제 버튼이 커졌다가 자연스럽게 축소하는 것을 확인할 수 있다.


        트윈 애니메이션으로 위치 이동 액션 효과

위치 이동은 대상 위치를 변경하는 것으로 한 곳에서 다른 곳으로 부드럽게 움직이는 효과를 낼 수 있다.
위치 액션은 <translate> 태그를 사용하여 정의하는데 시작 위치는 fromXDelta 와 fromYDelta,
종료 위치는 toXDelta 와 toYDelta 란 이름으로 지정할 수 있다.
translate.xml 파일을 만들어 애니메이션을 정의해보자.


    <?xml version="1.0" encoding="utf-8"?>
    <translate xmlns:android="http://schemas.android.com/apk/res/android"
        android:fromXDelta="0%p"
        android:fromYDelta="-100%p"
        android:duration="20000"
        android:repeatCount="-1"
        android:fillAfter="true"/>


fromXDelta 속성이 0% 이므로 시작 위치의 X 좌표는 원래 위치의 X 좌표가 된다.
toXDelta 속성이 -100% 이므로 대상의 크기만큼 왼쪽으로 이동하게 된다.
지속 시간은 duration 의 값이 20000 이므로 20초가 되며 repeatCount 속성이 -1 이므로 무한반복된다.
애니페이션이 끝난 후 대상이 원래 위치로 돌아오는 것을 막기 위해 fillAfter 속성을 true 로 설정하면 된다.


        트윈 애니메이션으로 위치 회전 효과

회전은 한 점을 중심으로 대상을 회전시키는 효과를 만드는 액션으로 시작 각도와 종료 각도를 지정할 수 있다.
예로 한 바퀴를 회전시키려고 하면 fromDegrees 속성 값을 0 으로 하고 toDegrees 속성 값을 360 으로 하면 된다.
시계 반대 방향은 -360 로 설정한다. 회전 중심이 되는 점은 디폴트가 (0, 0) 이므로 왼쪽 상단 끝 지점이 된다.
대상 중앙 부분을 회전 중심으로 하고 싶다면 pivotX 와 pivotY 속성의 값을 지정하면 된다.
값의 단위는 백분율을 사용할 수 있다. 다음은 대상 중심을 회전축으로 10초 동안 시계방향으로 한 바퀴
회전시키는 액션을 XML 로 정의한 것이다.


    <?xml version="1.0" encoding="utf-8"?>
    <rotate xmlns:android="http://schemas.android.com/apk/res/android"
        android:fromDegrees="0"
        android:toDegrees="360"
        android:pivotX="50%"
        android:pivotY="50%"
        android:duration="10000"/>


10초 동안 애니메이션이 진행된 후 원래대로 돌아오게 된다.
애니메이션의 실행 결과를 확인하기 위해 AnimationScaleActivity 에서 loadAnimation() 메소드의 값만 바꿔주자.


        트윈 애니메이션으로 스케일 액션 효과

스케일은 대상을 크게하거나 작게할 수 있는 액션으로 확대/축소 정도는 원래 크기에서 비율로 결정된다.
예로, 1.0 이란 값은 원래 크기와 같다는 의미이며, 2.0 은 원래 크기의 두 배로 만든다는 의미이다.
X 축으로 늘리거나 줄이고 싶으면 fromXScale 과 toXScale 속성 값을 설정하고 Y 축으로 늘리거나
줄이고 싶으면 fromYScale 과 toYScale 속성 값으로 설정한다.
확대/축소 중심 점도 회전 효과처럼 pivotX 와 pivotY 값으로 설정된다.


        트윈 애니메이션으로 투명도 액션 효과

투명도는 알파 값으로 객체의 투명도를 점차 바꿀 수 있는 액션이다.
이는 천천히 보이게 하거나 보이지 않거나 또는 다른 뷰와 겹쳐보이게 할 때 사용한다.
일파 값 범위는 0.0 부터 1.0 까지이며 0 일때는 완전 투명한 상태이다.
다음은 10초 동안 대상을 천천히 보이게 만드는 액션을 XML 로 정의한 것이다.


    <?xml version="1.0" encoding="utf-8"?>
    <alpha xmlns:android="http://schemas.android.com/apk/res/android"
        android:fromAlpha="0.0"
        android:toAlpha="1.0"
        android:duration="10000" />


        트윈 애니메이션으로 속도 조절

위 효과들은 빠르거나 느리게 효과를 진행되게 하는 방법은 인터폴레이터(Interpolator)를 사용하면 된다.
인터폴레이터는 R.anim 에 미리 정의된 정보를 사용해서 설정할 수 있는데 다음과 같은 대표적인 인터폴레이터가 있다.


    accelerate_interpolator                 점점 빠르게
    decelerate_interpolator                 점점 느리게
    accelerate_decelerate_interpolator      빨랐다가 느리게
    anticipate_interpolator                 시작 위치에서 조금 뒤로 당겼다가 시작
    overshoot_interpolator                  종료 위치에서 조금 지나쳤다가 종료
    anticipate_overshoot_interpolator       시작 위치에서 조금 뒤로 당겨 시작했다가 종료 위치에서 조금 지나쳤다가 종료
    bounce_interpolator                     종료 위치에서 튀도록


이런 정보들로 애니메이션 집합을 만들어 각 액션에 다른 인터폴레이터를 설정할 경우엔
shareInterpolator 속성을 false 로 할 수 있다.

이렇게 리소스 애니메이션 정보들은 new 연산자로 직접 만드는 것도 가능하다.
각 액션별로 만들 수 있는 객체들은 다음과 같다.


    위치 이동           <translate> -> TranslateAnimation
    회전                <rotate> -> RotateAnimation
    확대/축소           <scale> -> ScaleAnimation
    투명도              <alpha> -> AlphaAnimation
    애니메이션 집합      <set> -> AnimationSet


애니메이션은 버튼 눌릴 시 시작해야하는 경우도 있지만 사용자에게 보이는 시점에 시작해야할 수도 있다.
이는 onWindowFocusChanged() 메소드가 호출되는 시점 즉, 윈도우가 포커스를 받는 시점이 되어야 한다.
따라서 이 메소드 내에 파라미터로 전달되는 hasFocus 변수 값이 true 일 경우 각 애니메이션 객체에 대해 start() 메소드를 호출함으로써
애니메이션이 시작되도록 하면 된다.

윈도우가 다른 윈도우에 의해 가려지거나 할 때는 hasFocus 변수 값이 false 가 되므로 이때는 애니메이션 객체의
reset() 메소드를 호출하여 초기 상태로 되돌릴 수 있다.


    public void onAnimationStart(Animation animation)       애니메이션 시작 전 호출
    public void onAnimationEnd(Animation animation)         애니메이션 끝나고 호출
    public void onAnimationRepeat(Animation animation)      애니메이션이 반복될 때 호출


            08-2 페이지 슬라이딩 사용

페이지 슬라이딩은 버튼을 눌렀을 때 보이지 않던 뷰가 슬라이딩 방식으로 나타나는 기능이다.
여러 뷰를 중첩해 두었다가 하나씩 전환하며 보여주는 방식에 애니메이션을 결합한 것이다.
대표적으로 바로가기 메뉴로 아이콘을 누르면 왼쪽 또는 오른쪽으로 슬라이딩 박식으로 표시되는 것이다.
바로가기 메뉴는 API 에서 제공되는 기능을 그대로 사용하여 만들 수 있다.
이 기능을 직접 만들어 볼 수도 있다.

두 뷰를 중첩시켰다면 위쪽 뷰는 보이거나 안보일 수 있다.
오른쪽에서 왼쪽으로 보이는 애니메이션을 만들 때는 애니메이션 액션 정보를 XML 에 저장한 후
로딩하여 위쪽 뷰에 적용한다. 왼족에서 오른쪽으로 닫히는 애니메이션을 만들때도 마찬가지로 적용하되
애니메이션 액션 정보가 반대 방향으로 정의된다. 이 두 가지 모두 뷰의 이동과 관련되므로 애니메이션을 위한 XML 에는
<translate> 태그를 사용한다.

sample_sliding.xml 파일을 만들고 다음과 같이 작성하자.


    <?xml version="1.0" encoding="utf-8"?>
    <FrameLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical"
            android:background="#ff5555ff"> <!-- 첫 번째 레이아웃 : 바탕 -->

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Base Area"
                android:textColor="#ffffffff" />
        </LinearLayout>

        <LinearLayout
            android:id="@+id/page"
            android:orientation="vertical"
            android:layout_width="200dp"
            android:layout_height="match_parent"
            android:layout_gravity="right"
            android:background="#ffffff66"
            android:visibility="gone">

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Area #1"
                android:textColor="#ff000000" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Area #2"
                android:textColor="#ff000000" />
        </LinearLayout> <!-- 두 번째 레이아웃 -->

        <LinearLayout
            android:orientation="vertical"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="right|center_vertical"
            android:background="#00000000" >

            <Button
                android:id="@+id/button88"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Open" />
        </LinearLayout>
    </FrameLayout>


최상위 레이아웃은 FrameLayout 으로 설정됐다. 이 안에는 LinearLayout 레이아웃이 세 개 중첩되어 있다.
첫 번째 레이아웃은 가로 세로 모두 match_parent 로 지정해 배경색을 지정하여 다른 것과 구분되도록 만들었다.
두 번째 레이아웃은 슬라이딩으로 보여줄 뷰가 되는데 마찬가지로 배경색으로 구분한다.
세 번째는 버튼을 포함하고 있는데 배경을 투명하게 하여 버튼만 보이게 설정한다.

이제 메인 액티비티 코드를 다음과 같이 작성한다.


    public class SlidingActivity extends AppCompatActivity {
        boolean isPageOpen = false;

        Animation translateLeftAnim;
        Animation translateRightAnim;

        LinearLayout page;
        Button button;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_sliding);
            page = findViewById(R.id.page);

            translateLeftAnim = AnimationUtils.loadAnimation(this, R.anim.translate_left);
            translateRightAnim = AnimationUtils.loadAnimation(this, R.anim.translate_right);

            SlidingPageAnimationListener animListener = new SlidingPageAnimationListener();
            translateLeftAnim.setAnimationListener(animListener);
            translateRightAnim.setAnimationListener(animListener);

            button = findViewById(R.id.button88);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (isPageOpen) {
                        page.startAnimation(translateRightAnim);
                    } else {
                        page.setVisibility(View.VISIBLE);
                        page.startAnimation(translateLeftAnim);
                    }
                }
            });
        }

        private class SlidingPageAnimationListener implements Animation.AnimationListener {

            @Override
            public void onAnimationEnd(Animation animation) {
                if (isPageOpen) {
                    page.setVisibility(View.INVISIBLE);

                    button.setText("Open");
                    isPageOpen = false;
                } else {
                    button.setText("Close");
                    isPageOpen = true;
                }
            }

            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }
        }
    }


버튼을 누르면 서브 화면이 애니메이션으로 보이도록 두 애니메이션을 만들었다.
anim 폴더에 translate_left 와 translate_right 파일을 생성하자.


    <?xml version="1.0" encoding="utf-8"?>
    <set xmlns:android="http://schemas.android.com/apk/res/android"
        android:interpolator="@android:anim/accelerate_decelerate_interpolator">
        <translate
            android:fromXDelta="100%p"
            android:toXDelta="0%p"
            android:duration="500"
            android:repeatCount="0"
            android:fillAfter="true" />
    </set>


이렇게 액션 정보는 AnimationUtils 클래스의 loadAnimation() 메소드로 로딩된다. 그리고 버튼을 누를 때마다
애니메이션이 번갈아 적용된다.
서브 화면의 레이아웃에 visibility 속성이 'gone' 으로 설정되어 있어 화면에서 보이지 않다가
좌측으로 슬라이딩 나올때는 'visible' 로 화면에 보이게 한다.
그리고 우측 슬라이딩될 때는 'invisible' 이나 'gone' 으로 보이지 않게 한다. 이 보이지 않는 시점은 애니메이션이
끝나는 시점이기 때문에 AnimationListener 인터페이스로 Animation 객체의 setAnimationListener() 메소드로 설정하면 알 수 있다.


            08-3 앱 화면에 웹브라우저 넣기

앱에서 웹사이트를 띄우는 방법은 인텐트 객체에 웹사이트 주소를 넣어서 요청하면 된다.
그리고 앱에 브라우저를 넣어서 앱 안에 웹 사이트를 보이게할 수 있다.
이렇게 하면 별도로 갑자기 나타나는 웹브라우저 화면보다 더 자연스러운 화면을 보여줄 수 있다.

웹브라우저를 앱 안에 넣을 때는 웹뷰(WebView)를 사용하면 되는데 XML 레이아웃엔 <WebView> 태그로 정의한다.
웹뷰를 정의하여 사용할 때는 인터넷에 접속하게 된다. 그래서 항상 인터넷 접속 권한이 등록되어 있어야 한다.
다음은 매니페스트에 등록할 인터넷 권한이다.


    <uses-permission android:name="android.permission.INTERNET"/>


XML 레이아웃에 웹뷰를 추가하면 소스 코드에서 웹뷰 객체를 찾아 참조할 수 있다.
앱 화면 안에 웹뷰를 넣어 보기 위해 sample_web.xml 을 만들어 보자.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:orientation="horizontal"
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <Button
                android:id="@+id/button89"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="열기"
                android:padding="4dp"
                android:textSize="20sp" />

            <EditText
                android:id="@+id/editText6"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textSize="20sp" />
        </LinearLayout>

        <WebView
            android:id="@+id/webView"
            android:layout_width="match_parent"
            android:layout_height="match_parent" />
    </LinearLayout>


첫 번째 줄에 URL 입력할 수 있는 입력상자와 버튼 하나가 들어 있으며 그 아래엔 <WebView> 태그를 사용해 웹뷰를 추가했다.
웹뷰 id 속성은 webView 로 설정되어 이를 참조하여 찾을 수 있다.
메인 액티비티에서 다음과 같이 작성하자.


    public class WebViewActivity extends AppCompatActivity {
        EditText editText;
        WebView webView;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_web);

            editText = findViewById(R.id.editText6);
            webView = findViewById(R.id.webView);

            WebSettings webSettings = webView.getSettings();
            webSettings.setJavaScriptEnabled(true);

            webView.setWebViewClient(new ViewClient());

            Button button = findViewById(R.id.button89);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    webView.loadUrl(editText.getText().toString());
                }
            });
        }

        private class ViewClient extends WebViewClient {
            @Override
            public boolean shouldOverrideUrlLoading(final WebView view, final String url) {
                view.loadUrl(url);

                return true;
            }
        }
    }


WebView 객체의 getSettings() 메소드로 WebSettings 객체를 참조한다.
이 객체에 설정한 정보 중 setJavaScriptEnabled() 코드로 true 를 설정하면 자바스크립트가 동작할 수 있는 환경이 된다.
웹사이트 대부분 자바스크립트를 이용하니 이 값은 true 로 하는 것이 좋다.
웹 페이지 로딩하여 화면에 보여주기 위해 loadUrl() 메소드를 사용한다.
웹뷰 객체의 goForward() 나 goBack() 메소드를 이용하면 앞 페이지 또는 뒤 페이지로도 이동할 수 있다.
화면에 추가된 WebView 객체에 웹 페에지를 보여주기 위해 WebViewClient 를 상속한 객체를 만들어 설정해야 한다.
앱 권한을 설정하기 위해 매니페스트 폴더에서 다음 코드를 추가한다.


    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:usesCleartextTraffic="true"


INTERNET 권한을 추가했으며 <application> 태그 안엔 usesCleartextTraffic 이란 속성을 추가했다.
이 권한과 속성이 추가되어야 웹 사이트를 표시할 수 있다.


            08-4 시크바 사용하기

프로그레스바처럼 사용할 수 있는 대표적인 상태 표시 위젯으로 시크바(SeekBar)가 있다.
시크바는 프로그레스바를 확장하여 만든 것으로 프로그레스바 속성을 가지면 사용자가 값을 조정할 수 있게 한다.
즉, 터치 후 핸들을 드래그하여 좌우로 이동하여 볼륨 조절이나 재생 위치 조절과 같다.

이 위젯은 프로그레스바를 상속한 것이라 프로그레스바의 속성을 그대로 사용할 수 있다.
그리고 추가적으로 OnSeekBarChangeListener 란 리스너를 설정하여 이벤트를 처리할 수 있다.
이 리스너의 메소드들은 시크바의 상태가 바뀔 때마다 호출되며 다음과 같은 메소드들이 정의되어 있다.


    void onStartTrackingTouch(SeekBar seekBar)
    void onStopTrackingTouch(SeekBar seekBar)
    void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser)


이중 onProgressChanged() 메소드는 사용자에 의해 변경된 progress 값을 전달받을 수 있다.
fromUser 파라미터를 사용하여 변경된 값이 사용자가 입력한 것인지 코드로 변경되었는지 구별할 수 있다.

이제 시크바로 화면 밝기를 조절해보자. sample_seekbar.xml 를 만들어 사용해보자.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">

        <SeekBar
            android:id="@+id/seekBar1"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:max="100" />

        <TextView
            android:id="@+id/textView43"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="20dp"
            android:text="변경된 값"
            android:textSize="30sp" />
    </LinearLayout>


디자인 화면에 시크바를 추가하자. max 속성으로 최댓값을 설정할 수 있다.
이제 메인 액티비티에서 다음과 같은 코드를 작성해보자.


    public class SeekBarActivity extends AppCompatActivity {
        TextView textView;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_seekbar);

            SeekBar seekBar = findViewById(R.id.seekBar1);

            seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
                @Override
                public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                    setBrightness(progress);
                    textView.setText("변경된 값 : " + progress);
                }

                @Override
                public void onStartTrackingTouch(SeekBar seekBar) {

                }

                @Override
                public void onStopTrackingTouch(SeekBar seekBar) {

                }
            });
        }

        private void setBrightness(int value) {
            if (value < 10) {
                value = 10;
            } else if (value > 100) {
                value = 100;
            }

            WindowManager.LayoutParams params = getWindow().getAttributes();
            params.screenBrightness = (float) value / 100;
            getWindow().setAttributes(params);
        }
    }


이 코드는 시크바를 통해 화면 밝기를 조정할 수 있다.
화면 밝기는 윈도우 매니저로 설정하였으며 getWindow() 메소드로 윈도우를 참조하여 관련 정보를 getAttributes() 메소드로
참조한 속성 정보를 새로운 값을 지정하여 설정한다.


            08-5 키패드 제어

EditText 로 만든 입력상자에 포커스를 주면 화면 하단에 소프트 키패드가 생겨 입력할 수 있는 상태가 된다.
이때 열리는 소프트 키패드는 자동으로 열리고 닫히므로 별도 코딩 없이 필요하면 직접 열거나 닫을 수 있따.
키패드 관련 기능은 InputMethodManager 객체로 사용할 수 있는데 이 객체는 시스템 서비스므로
getSystemService() 메소드로 참조한 후 다음과 같은 메소드를 사용해 키패드를 열거나 닫을 수 있다.


    boolean showSoftInput(View view, int flags)
    boolean hideSoftInputFormWindow(IBinder windowToken, int flags [, ResultReceiver resultReceiver])


키패드를 열고 닫는 기능을 사용할 때 키 입력 관련 문제를 자주 접하게 되는데, 일반적으로 입력상자에 입력될
문자열의 종류를 지정하는 것이다.


    inputType 속성값

    number              숫자
    numberSigned        0 보다 큰 숫자
    numberDecimal       정수
    text                텍스트
    textPassword        패스워드로 표시
    textEmailAddress    이메일로 표시
    phone               전화번호로 표시
    time                시간
    date                날짜


소프트 키패드의 형태는 단말 제조사 별로 다를 수 있다. 그러나 자판 배열은 비슷하다.
실제로 앱을 구성할 때 inputType 속성을 지정할 때가 많다.

이제 입력상자를 추가해서 키패드가 어떻게 뜨는지, 버튼 누를 때 사라지게할 수 있는지 알아보자.
sample_keypad.xml 을 만들고 버튼을 '키패드 닫기' 라고 수정하고 입력상자를 둔다.

이 상태로 앱을 실행하면 입력상자가 포커스 받으면 키패드는 자동으로 올라온다.
이렇게 키패드가 올라오지 않게 만드는 것이 필요할 때도 있다.
키패드가 올라오지 않도록 하려면 매니페스트에 속성을 추가해야 한다.


    <activity
        android:name=".MainActivity"
        android:windowSoftInputMode="stateHidden">


다시 앱을 실행하면 키패드가 나타나지 않는다. 그리고 inputType 속성 값을 number 로 변경하여
버튼 누르면 키패드가 닫히게 만들어준다. 먼저 메인 액티비티 자바 파일에서 다음과 같이 작성한다.


    public class KeyPadActivity extends AppCompatActivity {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_keypad);

            Button button = findViewById(R.id.button90);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (getCurrentFocus() != null) {
                        InputMethodManager inputMethodManager = (InputMethodManager)
                                getSystemService(INPUT_METHOD_SERVICE);

                        inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);
                    }
                }
            });
        }
    }


이제 다시 실행하여 입력상자를 클릭하면 숫자 키패드가 보이렉 된다.
그리고 [키패드 닫기] 버튼을 누르면 키패드가 사라진다.