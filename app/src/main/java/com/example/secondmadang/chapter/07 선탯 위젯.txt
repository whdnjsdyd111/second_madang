            07-1 나인패치 이미지

이미지는 해상도가 다른 단말에서도 일정 비율로 크기를 지정하면 자동으로 맞춰 늘거나 주어 유용한 기능이다.
이 과정에 이미지 일부가 깨지거나 왜곡이 발생하는데 이를 해결할 수 있어야 한다.
이를 위해 기본적으로 나인 패치를 사용한다.
작은 이미지를 크게 늘여도 글자가 안깨지는데 이때 수정한 이미지는 ooo.9.png 같이
확장자 앞에 '.9' 를 붙여야 한다. 이 방식으로 나인 패치를 인식한다.

나인 패치 이용을 위해 drawable 파일에 image.9.png 파일을 둔다.
그리고 sample_nine.xml 파일을 만들어 다음과 같이 수정한다.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">

        <Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="@drawable/image"
            android:text="Small"
            android:textColor="#ffffffff" />
        <Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="@drawable/image"
            android:text="MediumMediumMedium"
            android:textColor="#ffffffff" />
        <Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="@drawable/image"
            android:text="LongLongLongLongLongLongLongLongLong"
            android:textColor="#ffffffff" />
    </LinearLayout>


그리고 나인 패치가 잘 이루어졌는지 확인해보자.
자바 코드에서도 배경으로 이미지를 설정하는 메소드는 다음과 같다.


    void setBackgroundColor(int color)
    void setBackgroundDrawable(Drawable d)
    void setBackgroundResource(int resid)


이 중 setBackgroundResource() 메소드는 background 속성과 같이
각 버튼에 이미지 배경을 설정하고 text 속성으로 길이를 맞추어 자동으로 변경해준다.


            07-2 새로운 뷰 만들기

API 에서 제공되는 위젯으로 대부분 화면을 만들 수 있지만 원하는 기능을 가진 위젯을 따로 구상해야할 때도 있다.
API 에서 제공하는 뷰를 사용해 새 뷰를 만들어보자.

이를 위해선 API 의 뷰를 상속해야 한다. 먼저 뷰가 그려지는 방식을 이해해야 한다.
뷰 영역과 크기는 그 뷰를 포함한 레이아웃의 영향을 받아 정해진다.
추가 코드를 넣을 수 있게 onMeasure() 콜백 메소드도 호출되며  로 스스로를 레이아웃에 맞게 그릴 땐 onDraw() 를 자동 호출한다.


    public void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
    public void onDraw()


onMeasure() 메소드의 파라미터 widthMeasureSpec 와 heightMeasureSpec 은 뷰를 담는 레이아웃의 여유 공간의
폭과 높이 정보다. 즉, 부모 컨테이너의 여유 공간에 대한 정보를 전달하는데 이 값을 참조하여 적절한 크기를 반환하여
그려지게 된다. onMeasure() 메소드 안의 뷰를 담는 레이아웃에 이 뷰의 크기 값을 반환하고 싶으면 다음 메소드를 사용한다


    public setMeasuredDimension(int measureWidth, int measureHeight)


이 메소드의 두 파라미터가 뷰의 폭과 높이다.


        onDraw() 메소드와 invalidate() 메소드 이해하기


뷰가 화면에 보일 땐 onDraw() 메소드가 호출된다.
버튼이 추가되면 위치나 크기가 그려지는데 이 과정에 onDraw() 메소드를 다시 정해지면 원하는 것을 그릴 수 있다.

결국, 새 뷰를 클래스로 정의 후 안에 onDraw() 메소드를 재정의하여 코드를 넣어 기능 구현하면
다른 모양으로 보이는 뷰를 직접 만들 수 있다. 뷰 위에 그래픽을 그리는 과정을 설명하면
새로 정의한 View 클래스의 onDraw() 메소드는 새로 정의한 뷰가 화면에 보이기 전에 호출되어 원하는 모양을
그려 표현할 수 있다. 그리고 터치 시 그려진 뷰를 이동시키려 하면 뷰가 이동한 후 그래픽을 다시 그려야하는데
이때 invalidate() 메소드를 호출하면 된다. invalidate() 메소드 호출되면
자동으로 onDraw() 메소드가 다시 호출되어 이동한 좌표에 뷰의 그래픽을 다시 그리게할 수 있다.

버튼을 직접 만들어보기 위해 sample_view.xml 을 만든다.
그 후에 MyButton.java 파일을 만든다. 이 클래스는 AppCompatButton 을 상속하여 작성한다.
그리고 두 개의 생성자를 필수로 작성해야 한다.
첫 번째 생성자는 Context 객체만 파라미터로 받고, 두 번째 생성자는 Context 객체와 AttributeSet 객체이다.
안드로이드 UI 객체 만들 시 Context 객체를 전달받도록 되어 있어 생성자엔 항상 Context 객체가 전달되야 한다.
AttributeSet 객체는 XML 레이아웃에 태그를 추가하는 속성을 전달받기 위한 것이다.


    public MyButton(Context context)
    public MyButton(Context context, AttributeSet attrs)


생성자가 두 개니 필요한 코드는 init() 메소드를 만들어 정의한다.
이렇게 두 생성자에서 모두 init() 메소드를 호출하면 동일한 초기화작업을 할 수 있다.
다음과 같이 작성하자.


    public class MyButton extends AppCompatButton {
        public MyButton(Context context) {
            super(context);
        }

        public MyButton(Context context, AttributeSet attrs) {
            super(context, attrs);
        }

        private void init(Context context) {
            setBackgroundColor(Color.CYAN);
            setTextColor(Color.BLACK);

            float textSize = getResources().getDimension(R.dimen.text_size);
            setTextSize(textSize);
        }
    }


init() 메소드에 Context 객체를 받고, 배경색과 글자색을 설정했다.
배경색 설정은 setBackgroundColor() 이고 글자색은 setTextColor() 로 설정한다.
setTextSize() 메소드로 글자 크기도 설정할 수 있다. 픽셀 단위 설정만 할 수 있는데 이 방법은 좋지 않으며
sp 단위를 권장한다. 이는 자바 코드가 아닌 XML 파일을 사용해야 한다.
'app/res/values' 폴더에 dimens.xml 파일을 하나 만들어 다음과 같이 작성한다.


    <?xml version="1.0" encoding="utf-8"?>
    <resources>
        <dimen name="text_size">16sp</dimen>
    </resources>


dimens.xml 파일은 크기 값 등을 정의할 수 있는 파일이다. 이 파일의 dimen 태그로 dp, sp 등의 그기 값을 정의하면
참조할 수 있다. 자바 코드에서 참조 시 Resources 객체의 getDimension() 메소드를 사용한다.
이 메소드에서 반환된 값은 픽셀 값으로 자동 변환된다.

이제 onDraw() 와 onTouchEvent() 메소드를 재정의해보자. 이 두 메소드를 추가한다.
그리고 이 둘을 알아보기 위해 Log.d() 메소드로 로그를 출력한다.
그리고 onTouchEvent() 메소드엔 MouseEvent() 객체 안의 정보를 처리하는 코드를 작성한다.


    @Override
    protected void onDraw(Canvas canvas) {  // 함수가 그려질 때 기능 추가
        super.onDraw(canvas);

        Log.d("MyButton", "onDraw 호출됨");
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        Log.d("MyButton", "onTouchEvent 호출됨");

        int action = event.getAction();
        switch (action) {
            case MotionEvent.ACTION_DOWN:
                setBackgroundColor(Color.BLUE);
                setTextColor(Color.RED);
                break;
            case MotionEvent.ACTION_OUTSIDE:
            case MotionEvent.ACTION_CANCEL:
            case MotionEvent.ACTION_UP:
                setBackgroundColor(Color.CYAN);
                setTextColor(Color.BLACK);
                break;
        }

        invalidate();

        return true;
    }


처음 MyButton 뷰의 배경색은 밝은 파랑과 검은 글자이다. 하지만 버튼을 누르면 파랑 배경에 빨간 글자색으로 바뀐다.
onTouchEvent() 메소드가 호출되며 전달되는 MouseEvent 객체엔 getAction() 메소드가 있어
손가락이 눌렸는지, 눌린 상태로 드래그되는지, 떼었는지 등을 알 수 있다. 이 메소드는 정수형 값으로 이 상태를 반환한다.
이렇게 정의한 새 버튼을 XML 레이아웃 또는 소스 코드에 new 연산으로 추가해보자. 이는 addView() 메소드로 추가할 수 있다.

sample_view.xml 파일을 열어 MyButton 을 화면 가운데 추가하자.


    <?xml version="1.0" encoding="utf-8"?>
    <RelativeLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <com.example.secondmadang.MyButton
            android:id="@+id/myButton"
            android:layout_width="200dp"
            android:layout_height="80dp"
            android:layout_centerInParent="true"
            android:text="시작하기" />
    </RelativeLayout>


MyButton 은 직접 정의한 위젯이라서 패키지 이름까지 넣어야 한다.


    com.example.secondmadang.MyButton


앱을 실행하여 버튼을 클릭해보고 로그도 확인해보자.


            07-3 레이아웃 정의하고 카드 뷰 넣기

이제 새로 레이아웃을 만들어 카드뷰(CardView)를 넣어 보자.
카드뷰는 프로필과 같은 간단 정보를 넣기 위해 각 영역을 구분하는 역할을 한다.
예로 쇼핑몰 앱 같은 한 상품 정보를 상품 이미지와 가격, 평점 등을 넣을 수 있다.
이에 배경, 둥근 모서리, 색상 등 꾸밀 수 있다.

실습을 위해 sample_cardview 를 만든다. 이미지 하나와 텍스트뷰를 2개 만든다.
그리고 Layout1.java 자바를 만들어 버튼 때 처럼 리니어 레이아웃을 상속하고 생성자는 두 개를 만든다. 다음과 같이 작성하자.


    public class Layout1 extends LinearLayout {
        public Layout1(Context context) {
            super(context);
            init(context);
        }

        public Layout1(Context context, AttributeSet attrs) {
            super(context, attrs);
            init(context);
        }

        private void init(Context context) {
            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            inflater.inflate(R.layout.sample_cardview, this, true);
        }
    }


init() 메소드로 LayoutInflater 객체를 참조했다. 시스템 서비스로 제공되는 getSystemService() 메소드로
Context.LAYOUT_INFLATER_SERVICE 상수를 전달하면 객체가 반환된다. 이 객체의 inflate() 메소드를
호출하면서 XML 레이아웃 파일로 전달받아 설정된다. 인플레이션 과정이 끝나면 이 이미지뷰나 텍스트뷰를 찾아 참조할 수 있다.
이제 findViewById() 메소드로 호출하여 각 뷰들을 찾아보자.


    private void init(Context context) {
        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        inflater.inflate(R.layout.sample_cardview, this, true);

        imageView = findViewById(R.id.imageView8);
        textView = findViewById(R.id.textView37);
        textView2 = findViewById(R.id.textView38);
    }

    public void setImage(int resId) {
        imageView.setImageResource(resId);
    }

    public void setName(String name) {
        textView.setText(name);
    }

    public void setMobile(String mobile) {
        textView2.setText(mobile);
    }


findViewById() 메소드로 해당 뷰들을 찾았고 세터로 각 뷰들의 이름을 지정할 수 있다.
이미지는 setImageResource() 로 설정하게 했다.

이제 직접 레이아웃을 만들었으니 메인 뷰에서 사용해보자.
activity_main11.xml 을 만들어 두 개의 버튼을 추가한다. 그 후 버튼 밑에 Layout1 을 id 값 layout1 로 추가한다.
그리고 메인 액티비티 자바 파일에서 다음 코드를 작성한다.


    public class MainActivity11 extends AppCompatActivity {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_main11);

            Layout1 layout1 = findViewById(R.id.layout1);   // 레이아웃 추가한 뷰 참조

            layout1.setImage(R.drawable.ic_launcher_foreground);    // 뷰의 메소드 호출하여 데이터 설정
            layout1.setName("김민수");
            layout1.setMobile("010-0000-0000");
        }
    }


Layout1 클래스에 setImage, setName, setMobile 이란 메소드를 정의하여 이 세 개의 메소드를 호출하여
Layout1 뷰에 이미지와 글자를 설정할 수 있다. 버튼을 눌러 이미지를 바꾸고 싶으면
drawable 폴더의 이미지를 지정하도록 하자.


    public class MainActivity11 extends AppCompatActivity {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_main11);

            Layout1 layout1 = findViewById(R.id.layout1);   // 레이아웃 추가한 뷰 참조

            layout1.setImage(R.drawable.ic_launcher_foreground);    // 뷰의 메소드 호출하여 데이터 설정
            layout1.setName("김민수");
            layout1.setMobile("010-0000-0000");

            Button button = findViewById(R.id.button83);
            button.setOnClickListener(new View.OnClickListener() {  // 버튼 클릭 시 이미지 설정
                @Override
                public void onClick(View v) {
                    layout1.setImage(R.drawable.aa);
                }
            });

            Button button2 = findViewById(R.id.button84);
            button2.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    layout1.setImage(R.drawable.aaaaaaa);
                }
            });
        }
    }


배치된 두 버튼을 통해서 이미지를 바꾸도록 했다.

새로 만든 Layout1 모양을 카드뷰 모양으로 바꿔보자. 이 레이아웃 테투리 모양을 둥글게하여 이쁘게 꾸며본다.
팔레트에서 CardView 클래스를 추가하여 다음과 같이 수정해본다.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <androidx.cardview.widget.CardView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:cardBackgroundColor="#ffffffff"
            app:cardCornerRadius="10dp"
            app:cardElevation="5dp"
            app:cardUseCompatPadding="true">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:orientation="horizontal">

                <ImageView
                    android:id="@+id/imageView8"
                    android:layout_width="80dp"
                    android:layout_height="80dp"
                    android:padding="5dp"
                    app:srcCompat="@mipmap/ic_launcher" />

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_margin="5dp"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:id="@+id/textView37"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_weight="1"
                        android:text="이름"
                        android:textSize="30sp" />

                    <TextView
                        android:id="@+id/textView38"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_weight="1"
                        android:text="전화번호"
                        android:textColor="#ff0000ff"
                        android:textSize="25sp" />
                </LinearLayout>
            </LinearLayout>
        </androidx.cardview.widget.CardView>

    </LinearLayout>


CardView 를 태그로 추가 시 androidx.cardview.widget 까지 같이 입력한다.
설정 중 cardBackgroundColor 로 배경색을 설정하고, cardCornerRadius 로 모서리를 둥글게 할 수 있다.
cardUseCompatPadding 를 통해 바닥으로부터 올라온 느낌을 부여할 수 있다.


        07-4 리싸이클러뷰 만들기

모바일 단말에 가장 많이 사용되는 UI 모양 중 하나가 리스트이다.
여러 아이템 중 하나를 선택할 수 있는 세로 모양으로 된 화면 컨트롤(Control)를 말한다.
특히 아이폰, 안드로이드처럼 터치 방식은 리스트가 쉽고 직관적이어 자주 사용된다.

안드로이드에 여러 아이템 중 하나를 선택할 수 있는 리스트 모양의 위젯을 특별히 '선택 위젯' 이라 부른다.
선택 위젯이 사용되는 방식의 큰 특징은 원본 데이터를 뷰에 직접 설정하지 않고 어댑터란 클래스를 사용하는 점이다.


                        어댑터                     선택 위젯

    원본 데이터  →   데이터관리 ArrayList     →   아이템 #0
                    각 아이템의 뷰 생성           아이템 #1
                                                 아이템 #2


선택 가능한 여러 아이템을 표시하는 선택 위젯은 어댑터를 통해 각 아이템을 화면에 디스플레이한다.
그래서 원본 데이터는 어댑터에 설정하며 데이터 관리기능을 담당한다.

각 아이템이 디스플레이되기 전에 어댑터의 getView() 메소드가 호출되는데 반환되는 뷰가 하나의 아이템으로 디스플레이되어
중요한 메소드다.

어댑터를 만들어 반환하는 객체가 버튼이나 텍스트뷰가 아닌 리니어 레이아웃처럼 여러 뷰를 담은 객체라면
여러 정보를 하나의 아이템으로 보여줄 수 있다.

리스트 모양으로 보여줄 위젯으로 리싸이클러뷰(RecyclerView)가 있다.
기본적으로 상하 스크롤이 가능하지만 좌우 스크롤도 만들 수 있다. 그리고 각각 아이템이 화면에 보일 때
메모리를 효율적으로 사용하도록 캐시 매커니즘이 구현되어 있다.


    조언

    이러한 리싸이클러뷰는 장점이 많아 초반에 배운 리스트 모양의 리스트뷰보다 더 많이 사용된다.


이제 실습을 위해 sample_recyclerview.xml 을 만들고 다음과 같이 작성한다.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/recyclerView"
            android:layout_width="match_parent"
            android:layout_height="match_parent" />

    </LinearLayout>


RecyclerView 태그의 id 를 recyclerView 로 설정한다.

리싸이클러뷰는 선택 위젯이기 때문에 어댑터가 데이터 및 뷰 객체를 관리한다.
그래서 껍데기라고 볼 수 있고 어댑터의 아이템을 담을 데이터 클래스를 하나 정의한다.
전화번호부처럼 사람 목록을 보여줄 예정이므로 Person 이란 클래스를 하나 만든다.


    public class Person {
        String name;
        String mobile;
    }


name 은 사람 이름, mobile 은 전화번호를 저장해두기 위한 변수이다.
이에 세터와 게터 그리고 생성자를 만들자.


    public class Person {
        String name;
        String mobile;

        public Person(String name, String mobile) {
            this.name = name;
            this.mobile = mobile;
        }

        public String getMobile() {
            return mobile;
        }

        public String getName() {
            return name;
        }

        public void setMobile(String mobile) {
            this.mobile = mobile;
        }

        public void setName(String name) {
            this.name = name;
        }
    }


어댑터도 새로운 자바 클래스로 만든다. 클래스는 PersonAdapter 로 하자.


    public class PersonAdapter {
        static class ViewHolder extends RecyclerView.ViewHolder {
            TextView textView;
            TextView textView2;

            public ViewHolder(View itemView) {
                super(itemView);

                textView = itemView.findViewById(R.id.textView37);
                textView2 = itemView.findViewById(R.id.textView38);
            }

            public void setItem(Person item) {
                textView.setText(item.getName());
                textView2.setText(item.getMobile());
            }
        }
    }


리스트 형태를 위해 각 아이템은 뷰로 만들어져 뷰는 뷰홀더에 담아 두게 된다.
뷰홀더 역할을 하는 PersonAdapter 클래스 안에 넣어둔다고 생각하면 된다.
RecyclerView.ViewHolder 클래스를 상속하여 정의된 ViewHolder 클래스의 생성자에 뷰 객체가 전달된다.
그리고 super() 메소드로 부모 생성자를 호출한다. 그리고 findViewById() 메소드로 뷰룰 찾아 setItem() 으로 데이터를 담는다.

이제 PersonAdapter 클래스가 RecyclerView.Adapter 클래스를 상속하도록 수정한다.
이때 제네릭은 PersonAdapter.ViewHolder 로 지정한다.


    public class PersonAdapter extends RecyclerView.Adapter<PersonAdapter.ViewHolder> {...}


이후 빨간줄이 뜰텐데 getItemCount(), onBindViewHolder(), onCreateViewHolder() 메소드를 재정의 해놓는다.

구현해야하는 메소드는 위 3가지 이며, getItemCount() 메소드는 어댑터에서 관리하는 아이템 개수를 반환한다.
이 메소드는 리싸이클러뷰에서 관리하는 아이템의 개수를 알아야할 때 사용된다.
onCreateViewHolder() 와 onBindViewHolder() 메소드는 뷰홀더 객체가 만들어질 때와 재사용될 때 자동으로 호출된다.

리싸이클러뷰에 보이는 여러 아이템은 내부에서 캐시되어 아이템 개수만큼 객체로 만들어지진 않는다.
천 개라고 하더라도 천 개의 뷰 객체가 만들어지진 안흔다.
메모리를 효율적으로 사용하려면 뷰홀더에 뷰 객체를 넣어두고 사용자가 스크롤하여 보이지 않게 된 뷰 객체를
새로 보일 쪽에 재사용하는 것이 효율적이기 때문이다. 이 과정에서 뷰홀더가 재사용된다.


    라싸이클러뷰

    아이템 #1
    ─────────
    아이템 #2
    ─────────
    아이템 #3
    ---------
    아이템 #4
    ---------
    아이템 #5


뷰홀더가 새로 만들어지는 시점에 onCreateViewHolder() 메소드가 호출되어 각 아이템을 정의한 XML 레이아웃을
이용하여 뷰 객체를 만들어준다. 그리고 뷰 객체를 새로 만든 뷰홀더에 객체에 담아 반환한다.
onBindViewHolder() 메소드는 뷰홀더가 재사용될 때 호출되므로 뷰객체는 기존 것을 그대로 사용하고 데이터만 바꿔준다.

onCreateViewHolder() 메소드엔 뷰 타입을 위한 정수값이 파라미터로 전달된다. 이것은 각 아이템을 여러 뷰로 나누어 보여주고 싶을때
사용된다. 예로 이미지를 보여주고 어떤 때는 이미지, 텍스트 같이 보여주고 싶다면 뷰 타임을 정하고
이 타입에 따라 다른 XML 레이아웃을 인플레이션하여 보여줄 수 있다. 일반적으론 한가지 뷰 타입을 사용하는 경우가 많아
뷰 타입 파라미터를 사용하진 않는다.

onCreateViewHolder() 메소드에서 인플레이션을 진행하기 위해 Context 객체가 필요한데 파라미터로 전달되는
뷰그룹 객체의 getContext() 메소드를 이용하면 Context 객체를 참조할 수 있다.
파라미터로 전달되는 뷰그룹 객체는 각 아이템을 위한 뷰그룹 객체이니 XML 레이아웃을 인플레이션하여 이 객체에 설정한다.

onBindViewHolder() 메소드는 재활용 가능한 뷰홀더 객체를 파라미터로 전달하여 그 뷰홀더에 현재 아이템에 맞는 데이터만 설정한다.
데이터는 Person 으로 어댑터가 관리하므로 ArrayList 자료형으로 items 란 변수를 만든다.
그럼 onBindViewHolder() 메소드로 전달된 position 파라미터를 이용해 ArrayList 에서 Person 객체를 꺼내 사용할 수 있다.
어댑터가 ArrayList 안에 들은 전체 아이템 개수를 알아야하니 getItemCount() 메소드는 ArrayList 의 size() 메소드로
전체 아이템이 몇개인지 확인하여 그 값을 반환한다.


    public class PersonAdapter extends RecyclerView.Adapter<PersonAdapter.ViewHolder> {
        ArrayList<Person> items = new ArrayList<>();

        @NonNull
        @Override
        public ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) {
            LayoutInflater inflater = LayoutInflater.from(viewGroup.getContext());
            View itemView = inflater.inflate(R.layout.person_item, viewGroup, false);   // 인플레이션을 통해 뷰 객체 생성

            return new ViewHolder(itemView);
        }

        @Override
        public void onBindViewHolder(@NonNull ViewHolder viewHolder, int position) {
            Person item = items.get(position);
            viewHolder.setItem(item);
        }

        @Override
        public int getItemCount() {
            return items.size();
        }
        ...


이제 person_item.xml 레이아웃을 만들어 사용한다.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <androidx.cardview.widget.CardView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            app:cardBackgroundColor="#ffffffff"
            app:cardCornerRadius="10dp"
            app:cardElevation="10dp"
            app:cardUseCompatPadding="true">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal">

                <ImageView
                    android:id="@+id/imageView9"
                    android:layout_width="80dp"
                    android:layout_height="80dp"
                    android:padding="5dp"
                    app:srcCompat="@mipmap/ic_launcher" />

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_margin="5dp"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:id="@+id/textView39"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="이름"
                        android:textSize="30sp"/>

                    <TextView
                        android:id="@+id/textView40"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="전화번호"
                        android:textColor="#ff0000ff"
                        android:textSize="25sp"/>
                </LinearLayout>
            </LinearLayout>
        </androidx.cardview.widget.CardView>
    </LinearLayout>


앞 단락에선 레이아웃을 상속하여 새 뷰를 만들땐 뷰 소스 코드가 한쌍으로 필요했는데
여기선 XML 레이아웃만 있으면 된다. 왜냐면 ViewGroup 객체에 인플레이션한 후 ViewHolder 객체에 넣어두기 때문이다.

이 어댑터가 각각 아이템을 위한 Person 객체를 ArrayList 안에 넣어 관리하기 때문에 이 어댑터를 사용하는 소스 코드에서
어댑터에 Person 객체를 넣거나 가져갈 수 있도록 addItem(), setItems(), getItem(), setItem() 메소드를 추가한다.


    public class PersonAdapter extends RecyclerView.Adapter<PersonAdapter.ViewHolder> {
        ArrayList<Person> items = new ArrayList<>();

        public void addItem(Person item) {
            items.add(item);
        }

        public void setItems(ArrayList<Person> items) {
            this.items = items;
        }

        public Person getItem(int position) {
            return items.get(position);
        }

        public void setItem(int position, Person item) {
            items.set(position, item);
        }
        ...


이제 리싸이클러뷰를 위한 어댑터 코드가 만들어졌다. 이 어댑터는 리싸이클러뷰 객체에 설정되어야 하며
어댑터 안에 Person 객체들을 만들어 넣어야 하므로 메인 액티비티의 onCreate() 메소드 안에 추가한다.


    public class RecyclerActivity extends AppCompatActivity {

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_recyclerview);

            RecyclerView recyclerView = findViewById(R.id.recyclerView);

            LinearLayoutManager layoutManager = new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false);
            recyclerView.setLayoutManager(layoutManager);
            PersonAdapter adapter = new PersonAdapter();

            adapter.addItem(new Person("김민수", "010-0000-0000"));
            adapter.addItem(new Person("김하늘", "010-1111-1111"));
            adapter.addItem(new Person("홍길동", "010-2222-2222"));

            recyclerView.setAdapter(adapter);
        }
    }


리싸이클러뷰에는 레이아웃 매니저를 설정할 수 있다. 레이아웃 매니저는 리싸이클러뷰가 보일 기본 형태를 설정할 때
사용하는데 자주 사용하는 형태는 세로, 가로, 격자 모양이다.
보통 리스트 모양으로 표시할 때는 세로 방향 스크롤을 사용하는데 다양한 모양으로 보일 수 있게
가로 방향으로도 설정할 수 있고 격자 모양으로도 보여줄 수 있는 것이다.
여기에 LinearLayoutManager 객체는 방향을 VERTICAL 로 설정하여 세로 방향 스크롤로 보이게 된다.
가로 방향으로 하고싶다면 HORIZONTAL, 격자 모양은 GridLayoutManager 객체로 컬럼 수를 지정하면 된다.

리싸이클러뷰에 레이아웃 매니저 객체를 설정하기 위해 setLayoutManager() 를 호출하였고
그 아래 PersonAdapter 객체를 만들어 setAdapter() 메소들르 호출하여 설정했다.
이렇게 리싸이클러뷰가 어댑터와 상호작용하면서 리스트 모양으로 보여주게 된다.
어댑터엔 addItem() 메소드로 Person 객체를 추가한다. 여기선 세 개의 Person 객체를 만들어 추가하였다.

이제 앱을 실행하여 확인해보자.

이번에는 격자 모양으로 변경하여 동작하고 각 아이템을 누르면 동작하게 만들어보자.
이제 리싸이클러뷰가 격자 형태로 보이게 레이아웃 매니저를 GridLayoutManager 로 변경한다.


    public class RecyclerActivity2 extends AppCompatActivity {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_recyclerview);

            RecyclerView recyclerView = findViewById(R.id.recyclerView);

            GridLayoutManager layoutManager = new GridLayoutManager(this, 2);
            recyclerView.setLayoutManager(layoutManager);
        }
    }


GridLayoutManager 생성자에 두 번째 파라미터는 컬럼 개수를 의미한다. 2를 전달하여 두 컬럼으로 격자모양을 설정했다.
아이템 개수를 늘리기 위해 어댑터에 추가하는 Person 객체를 더 많이 늘려주고 실행해보자.

이제 각 아이템을 클릭 했을 때 토스트 메시지가 표시되게 수정한다.
클릭 이벤트는 리싸이클러뷰가 아니라 각 아이템에 발생하는 것이므로 뷰홀더 안에서 클릭 이벤트를 처리하는게 좋다.
뷰홀더 생성자에 뷰 객체가 전달되니 뷰 객체에 OnClickListener 를 설정한다.
근데 이 리스너는 토스트 메시지를 띄우면 클릭했을 때의 기능이 변경될 때마다 어댑터를 수정해야 하는 문제가 생긴다.
그래서 어댑터 객체 밖에 리스너를 설정하고 설정된 리스너 쪽으로 이벤트를 전달받도록 하는 것이 좋다.

이를 위해 OnPersonItemClickListener 인터페이스를 정의한다.


    public interface OnPersonItemClickListener {
        public void onItemClick(PersonAdapter.ViewHolder holder, View view, int position);
    }


onItemClick() 메소드 호출 시 파라미터로 뷰홀더와 뷰 객체 그리고 뷰 position 정보가 전달되게 한다.
position 정보는 몇 번째 아이템인지 구분할 수 있는 인덱스 값이다.
이 인터페이스를 사용하도록 ViewHolder 클래스를 수정한다.


    static class ViewHolder extends RecyclerView.ViewHolder {
        TextView textView;
        TextView textView2;

        public ViewHolder(View itemView, final OnPersonItemClickListener listener) {
            super(itemView);

            textView = itemView.findViewById(R.id.textView39);
            textView2 = itemView.findViewById(R.id.textView40);

            itemView.setOnClickListener(new View.OnClickListener() {    // 아이템 뷰에 리스너 설정
                @Override
                public void onClick(View view) {
                    int position = getBindingAdapterPosition();

                    if(listener != null) {  // 아이템 클릭 시 미리 정의한 다른 리스너 메소드 호출
                        listener.onItemClick(ViewHolder.this, view, position);
                    }
                }
            });
        }

        public void setItem(Person item) {
            textView.setText(item.getName());
            textView2.setText(item.getMobile());
        }
    }


뷰홀더 객체의 생성자가 호출될 때 리스너 객체가 파라미터로 전달되도록 수정되었다.
이 리스너 객체는 어댑터 밖에 설정할 것이며 뷰홀더까지 전달된다. 이렇게 전달된 리스너 객체의
onItemClick 이벤트는 뷰가 클릭되었을 때 호출된다. 이 코드에서 getAdapterPosition() 메소드로
뷰홀더에 표시할 아이템이 몇 번째인지 정보를 반환한다. 다시말해 아이템의 인덱스를 반환한다.

뷰홀더 수정했으니 어댑터 코드를 수정하자.


    public class PersonAdapter extends RecyclerView.Adapter<PersonAdapter.ViewHolder>
            implements OnPersonItemClickListener {
        ArrayList<Person> items = new ArrayList<>();
        OnPersonItemClickListener listener;

        public void setOnItemClickListener(OnPersonItemClickListener listener) {
            this.listener = listener;
        }

        @Override
        public void onItemClick(ViewHolder holder, View view, int position) {
            if (listener != null) {
                listener.onItemClick(holder, view, position);
            }
        }

        @NonNull
        @Override
        public ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) {
            LayoutInflater inflater = LayoutInflater.from(viewGroup.getContext());
            View itemView = inflater.inflate(R.layout.person_item, viewGroup, false);   // 인플레이션을 통해 뷰 객체 생성

            return new ViewHolder(itemView, this);
        }
        ...


어댑터 클래스를 OnPersonItemClickListener 인터페이스를 구현하도록 했다.
그리고 onItemClick() 메소드를 추가하여 뷰홀더 클래스 안의 뷰가 클릭되었을 때 호출되는 메소드이다.
근데 이 어댑터 클래스 안에서가 아닌 밖에서 이벤트 처리하는 것이 일반적이니 listener 란 변수를 하나 선언하여
setOnItemClickListener() 메소드로 리스너 객체를 변수에 할당하게 한다.
이렇게 하면 onItemClick() 메소드가 호출되었을 때 다시 외부의 설정된 메소드가 호출되게 할 수 있다.
마지막으로 onCreateViewHolder() 메소드 안에 new 연산자를 이용해 ViewHolder 갹체를 생성하는 코드를 수정한다.
이전엔 뷰 객체만 파라미터로 전달했지만 여기선 this 를 추가로 전달한다.

어댑터 코드 수정 후 메인 액티비티에서 리스너 객체를 설정하는 코드를 추가한다.


    public class RecyclerActivity2 extends AppCompatActivity {
        RecyclerView recyclerView;
        PersonAdapter adapter;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_recyclerview);

            recyclerView = findViewById(R.id.recyclerView);

            GridLayoutManager layoutManager = new GridLayoutManager(this, 2);
            recyclerView.setLayoutManager(layoutManager);

            PersonAdapter adapter = new PersonAdapter();

            adapter.addItem(new Person("김민수", "010-0000-0000"));
            adapter.addItem(new Person("김하늘", "010-1111-1111"));
            adapter.addItem(new Person("홍길동", "010-2222-2222"));
            adapter.addItem(new Person("조원용", "010-3333-3333"));

            recyclerView.setAdapter(adapter);

            adapter.setOnItemClickListener(new OnPersonItemClickListener() {
                @Override
                public void onItemClick(PersonAdapter.ViewHolder holder, View view, int position) {
                    Person item = adapter.getItem(position);
                    Toast.makeText(getApplicationContext(), "아이템 선택됨: " + item.getName(), Toast.LENGTH_SHORT).show();
                }
            });
        }
    }


리싸이클러뷰 객체와 어댑터 객체는 이 클래스 안의 어디서든 접근할 수 있게 클래스 안에 선언된 변수에 할당되었다.
그리고 어댑터 객체엔 setOnItemClickListener() 메소드를 호출하면서 리스너 객체를 설정했다.
이렇게 하면 이 리스너 onItemClick() 메소드가 호출된다. onItemClick() 메소드안에선 어댑터 객체의
getItem() 메소드를 이용해 클릭된 아이템 객체를 확인한다.


            07-5 스피너 사용하기

리스트, 격자 모양 등 여러 아이템을 보여주는데 하나를 선택하는 전형적인 위젯으로 스피너를 들 수 있다.
스피너는 일반적으로 윈도우에서 콤보박스로 불린다.
이를 누르면 아래에 작은 창이 뜨는데 그 안에 들은 여러 데이터 중 하나를 선택하게 되어 있다.
스피너는 <Spinner> 태그를 사용해 XML 레이아웃에 추가할 수 있다.

sample_spinner.xml 파일을 다음과 같이 작성한다.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">


        <TextView
            android:id="@+id/textView41"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="선택한 아이템"
            android:textSize="30sp"/>

        <Spinner
            android:id="@+id/spinner"
            android:layout_width="match_parent"
            android:layout_height="wrap_content" />
    </LinearLayout>


XML 레이아웃 구성은 위와 같이 간단하다.
메인 액티비티 자바 파일을 열어 다음과 같이 작성한다.


    public class SpinnerActivity extends AppCompatActivity {
        TextView textView;

        String[] items = { "mike", "angel", "crow", "john", "ginnie", "sally", "cohen", "rice" };

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_spinner);

            textView = findViewById(R.id.textView41);

            Spinner spinner = findViewById(R.id.spinner);
            ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_dropdown_item, items);

            spinner.setAdapter(adapter);    // 스피너에 어댑터 설정

            spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                @Override
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                    textView.setText(items[position]);
                }

                @Override
                public void onNothingSelected(AdapterView<?> parent) {
                    textView.setText("");
                }
            });
        }
    }


onCreate() 메소드에서 스피너와 텍스트뷰 객체를 찾아 onItemSelected() 메소드를 설정하여 아이템이 선택되면
자동 호출되어 텍스트뷰를 setText() 하도록 하였다. 스피너 객체가 아이템 선택 이벤트 처리 리스너는
OnItemSelectedListener 이다.

스피너 객체도 선택 위젯이니 setAdapter() 메소드로 어댑터 객체를 전달해야 한다.
리싸이클러뷰 때는 어댑터를 직접 정의했지만, 여기선 두 줄 코드만 추가했다.
그 이유는 API 에서 제공하는 기본 어댑터들이 있기 때문이다. ArrayAdapter 는 배열로된 아이템을 추가할 때 사용한다.
ArrayAdapter 객체를 만들 때는 simple_spinner_item 이란 객체를 지정한다.

스피너도 간단히 API 로 레이아웃을 지정할 수 있으며 setDropDownViewResource() 메소드로 드롭다운을 구현할 수 있다.


    public ArrayAdapter(Context context, int textViewResourced, T[] objects)


첫 번째론 Context 객체이니 액티비티인 this 를 전달, 두 번째는 XML 레이아웃의 리소스 ID 를 전달하는데
android.R.layout.simple_spinner_dropdown_item 을 전달했다. 이 레이아웃은 문자열 아이템을 보여주는 단순
스피너 아이템 레이아웃이라 보면 된다. 이 레이아웃 안엔 텍스트뷰 객체가 들어있다.
세 번째 파라미터는 아이템으로 보일 문자열 데이터들의 배열이다.
여기서 변수로 정의한 items 이 전달되었다. setDropDownViewResource() 메소드는 각 아이템들을 보여줄 뷰에
사용되는 레이아웃을 지정하는데 가장 단순한 뷰를 보여준다.