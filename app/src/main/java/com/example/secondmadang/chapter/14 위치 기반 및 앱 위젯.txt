            14-1 GPS 로 나의 위치 확인

안드로이드 기반 스마트폰 위치는 위치 관리자란 시스템 서비스가 관리한다.
실제로 android.location 패키지엔 이 클래스를 포함하여 위치 정보를 확인하거나 확인된 위치 정보를 사용하는데
필요한 클래스들이 정의되어 있다.

내 위치를 확인하는 기본 방법은 위치 관리자에 위치 정보를 요청하는 것으로 다음 단계를 거쳐야 한다.


    단계

    1       위치 관리자 객체 참조 -> getSystemService() 메소드로 위치 관리자 참조조

    2       위치 리스너 구현 -> 위치는 위치 리스너로 받으니 구현하여 전달한다

    3       위치 정보 업데이트 요청 -> 위치 정보 변할때마다 알려달라고 요청하기 위해 requestLocationUpdates() 메소드를 호출한다.

    4       매니페스트 권한 추가 -> ACCESS_FINE_LOCATION 위험 권한 추가


위치 기능을 만들어보기 위해 sample_location.xml 파일을 만들어 텍스트뷰와 [내 위치 확인하기] 버튼 추가한다.


        1 단계 - 위치 관리자 객체 참조

위치 관리자 시스템 서비스니 getSystemService() 로 얻는다.
그리고 다음으로 메인 액티비티를 작성한다.


    public class LocationActivity extends AppCompatActivity {
        TextView textView;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_location);

            textView = findViewById(R.id.textView57);

            Button button = findViewById(R.id.button127);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    startLocationService();
                }
            });
        }

        public void startLocationService() {
            LocationManager manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);

            try {
                Location location = manager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
                if (location != null) {
                    double latitude = location.getLatitude();
                    double longitude = location.getLongitude();
                    String message = "최근 위치 -> Latitude : " + latitude + "\nLongitude : " + longitude;

                    textView.setText(message);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


위치 관리자를 위해 정의한 상수의 이름은 Context.LOCATION_SERVICE 이다.
그래서 이 상수로 시스템 서비스 객체를 참조하여 코드르 넣으면 자신의 위치를 확인할 수 있다.

최근 위치 정보 확인은 getLastKnownLocation() 메소드에 위치 정보를 제공하는 위치 제공자를 파라미터로 전달한다.
안드로이드는 위치 제공자를 크게 GPS_PROVIDER 와 NETWORK_PROVIDER 로 구분하며, 하나를 전달하면 된다.
실제 앱에선 대부분 GPS 를 이용하니 GPS_PROVIDER 를 전달하면 Location 객체가 반환된다.
위도 경도는 getLatitude() 와 getLongitude() 메소드로 값을 확인할 수 있다.

코드 입력 후 getLastKnownLocation() 메소드를 호출하는 부분의 빨간 줄은 권한을 추가하면 없어진다.


    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />


        2 단계 - 위치 리스너 구현

위치 리스너는 위치 관리자에서 전달하는 위치 정보를 받기 위해 정의된 인터페이스이다.
이는 onLocationChanged() 메소드를 구현해야한다. 메인 액티비티티 클래스 내부클래스로 정의한다.


    class GPSListener implements LocationListener {
        @Override
        public void onLocationChanged(Location location) {
            Double latitude = location.getLatitude();
            Double longitude = location.getLongitude();
            String message = "내 위치 -> Latitude : " + latitude + "\nLongitude : " + longitude;
            textView.setText(message);
        }

        @Override
        public void onProviderDisabled(String provider) {}

        @Override
        public void onProviderEnabled(String provider) {}

        @Override
        public void onStatusChanged(String provider, int status, Bundle extras) {}
    }


위치 리스너엔 위치 제공자 상태를 확인하는 메소드와 함께 위치 정보를 전달할 때 호출되는 onLocationChanged() 메소드가 함께
정의되어 있다. 대부분의 경우 이 메소드만 구현해도 충분하지만 위치 표시를 위해 텍스트뷰에 표시한다.


        3 단계 - 위치 정보 업데이트 요청

위치 관리자에 현재 위치를 알려달라고 요청하기 위해선 requestLocationUpdates() 메소드를 호출해야 하는데
파라미터로는 최소 시간과 최소 거리 그리고 위치 리스너 객체를 같이 전달해야 한다.
1 단계에 작성한 startLocationService() 메소드를 다음과 같이 수정한다.


    try {
        Location location = manager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
        if (location != null) {
            double latitude = location.getLatitude();
            double longitude = location.getLongitude();
            String message = "최근 위치 -> Latitude : " + latitude + "\nLongitude : " + longitude;

            textView.setText(message);
        }

        GPSListener gpsListener = new GPSListener();
        long minTime = 10000;
        float minDistance = 0;

        manager.requestLocationUpdates(LocationManager.GPS_PROVIDER, minTime, minDistance, gpsListener);
        Toast.makeText(getApplicationContext(), "내 위치확인 요청", Toast.LENGTH_SHORT).show();
    } catch (Exception e) {
        e.printStackTrace();
    }


startLocationService() 메소드는 위치 정보 수신을 시작하기 위해 만든 것이다.
그 안에서 requestLocationUpdates() 메소드가 호출되는 것을 볼 수 있다. 최소 시간 10초, 최소 거리 0초로 하여
위치 정보를 전달받는다.


        4 단계 - 위험 권한을 위한 코드 추가

GPS 로 위치를 받기 위한 권한인 ACCESS_FINE_LOCATION 으로 정의되어 있으니 이 권한을 추가하는 코드를 작성한다.


    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        ...

        AutoPermissions.Companion.loadAllPermissions(this, 101);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String permissions[],
                                           int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        AutoPermissions.Companion.parsePermissions(this, requestCode, permissions, this);
    }

    @Override
    public void onDenied(int requestCode, String[] permissions) {
        Toast.makeText(this, "permissions denied : " + permissions.length,
                Toast.LENGTH_LONG).show();
    }

    @Override
    public void onGranted(int requestCode, String[] permissions) {
        Toast.makeText(this, "permissions granted : " + permissions.length, Toast.LENGTH_LONG).show();
    }


앱을 실행하고 권한을 부여한 뒤 버튼을 누르면 위도 경도가 확인된다.


        에뮬레이터로 가상 위치 정보 전송

에뮬레이터에선 GPS 모듈을 사용할 수 없으니 가상으로 전달하는 방법이 있다.
오른쪽 메뉴에서 [Extended controls] 에서 [Location] 탭이 선택된 상태로 'Longitude' 와 'Latitude' 입력란에
위도 정보를 입력하고 [SEND] 버튼을 클릭한다.


            14-2 현재 위치의 지도

사용자 위치를 한눈에 볼 수 있도록 지도를 이용해 위치를 나타내는 것이 좋다.

안드로이드에선 지도를 넣을 수 있도록 맵프래그먼트(MapFragment)가 제공된다.
맵프레그먼트는 구글맵 서비스를 사용할 수 있는 기능으로 Google Play Service 모듈을 사용한다.


    Google Play Service 라이브러리 사용 설정
        -> 구글맵 서비스는 Play Service 라이브러리를 사용한다. 그래서 이 라이브러리를 추가해야 한다.

    XML 레이아웃에 맵프레그먼트 추가

    소스 코드에 내 위치로 지도 이동
        -> 지도를 띄울 때 내 위치가 보여야 하므로 소스 코드에 지도를 내 위치에 맞춰 이동시키는 기능을 추가

    매니페스트에 설정 추가
        -> 지도를 사용하기 위한 권한 추가

    지도 API 키
        -> 구글맵 서비스 이용을 위해 지도 API 키 발급


        Google Play Services 라이브러리 사용 설정

안드로이드 스튜디오 화면의 위쪽 아이콘 중 [SDK Manager] 에서 [SDK Tools] 의 Google Play Service 가
설치되어 있는지 확인한다.


        프로젝트 만들고 XML 레이아웃 맵 프레그먼트 추가

라이브러리 추가를 위해 [File - Project Structure] 에서 디펜던시 항목에 play-services-maps 을 추가한다.
sample_locationmap.xml 을 만들고 다음과 같이 작헝한다.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">

        <Button
            android:id="@+id/button128"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="내 위치 요청하기" />

        <fragment
            android:id="@+id/map"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            class="com.google.android.gms.maps.SupportMapFragment" />
    </LinearLayout>


프래그먼트에 class 속성으로 SupportMapFragment 클래스를 지정하였다.


    조언

    예전 버전의 안드로이드를 지원할 필요가 없다면 MapFragment 를 사용할 수도 있다.


        소스 코드에서 내 위치 지도 이동시키기

지도 보여주기 위해 XML 레이아웃에 추가한 프래그먼트에 class 속성으로 SupportMapFragment 클래스를 할당했다.
여기에 GoogleMap 객체를 표시한다. GoogleMap 객체는 프래그먼트가 초기화된 후 참조할 수 있는데
getMapAsync() 메소드를 호출하면 GoogleMap 객체를 참조할 수 있다.
getMapAsync() 메소드는 내부적으로 지도를 다루는 GoogleMap 객체를 초기화하는데 비동기 방식으로 처리한다.
그래서 콜백 객체를 파라미터로 전달하여 초기화가 완료될 때 콜백 객체 안의 함수가 자동으로 호출되게 한다.
그 다음 추가로 몇 가지 코드를 입력하여 지도가 나타나게 된다.
메인 액티비티를 작성한다.


    public class LocationMapActivity extends AppCompatActivity {
        SupportMapFragment mapFragment;
        GoogleMap map;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_locationmap);

            mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
            mapFragment.getMapAsync(new OnMapReadyCallback() {
                @Override
                public void onMapReady(GoogleMap googleMap) {
                    Log.d("Map", "지도 준비됨.");
                    map = googleMap;
                }
            });

            try {
                MapsInitializer.initialize(this);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Button button = findViewById(R.id.button128);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    startLocationService();
                }
            });
        }
    }


SupportMapFragment 객체를 참조하고 getMapAsync() 메소드를 호출했다.
이 메소드는 비동기 방식이라 지도가 사용 가능하게된 후에 onMapReady() 메소드가 자동 호출된다.

지도 준비된 후 [내 위치 요청하기] 버튼 누르면 startLocationService() 메소드를 호출해야 한다.
이 메소드는 LocationActivity 예제와 같이 위치 관리자로 현재 위치를 전달받게 구현하면 된다.
내부 클래스 GPSListener 도 동일하게 작성한다. 이때 위치 리스너의 onLocationChanged() 메소드 안에 다음 코드를 추가해야 한다.
바로 이 코드를 통해 현재 위치를 지도에 보여준다.


    class GPSListener implements LocationListener {
        @Override
        public void onLocationChanged(Location location) {
            Double latitude = location.getLatitude();
            Double longitude = location.getLongitude();

            showCurrentLocation(latitude, longitude);
        }

        private void showCurrentLocation(Double latitude, Double longitude) {
            LatLng curPoint = new LatLng(latitude, longitude);
            map.animateCamera(CameraUpdateFactory.newLatLngZoom(curPoint, 15));
        }
    ...


showCurrentLocation() 메소드로 전달된 위도와 경도의 값은 LatLng 객체를 만들면 지도 위에 표시할 수 있다.
LatLng 객체는 경위도 좌표로 구성된 위치를 지도에 표시할 수 있는 객체이다.
이 객체들로 animateCamera() 메소드로 그 위치 중심으로 지도를 표시한다.

animateCamera() 메소드는 지도의 축척을 지정할 수 있다. 1 이면 가장 멀리서, 18 정도면 도시 지역 건물 몇개를 한눈에
볼 수 있는 정도로 확대하여 보여준다.


        매니페스트 정보 등록하기

GPS, 인터넷 사용 권한을 등록하고난 후 앱을 실행하여 확인해본다.


    <permission android:name="com.example.secondmadang.permission.MAPS_RECEIVE"
        android:protectionLevel="signature"/>

    <uses-permission android:name="com.example.secondmadang.permission.MAPS_RECEIVE" />

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES" />

    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />

    <uses-feature android:glEsVersion="0x00020000" android:required="true" />

    <application ...>

        <uses-library android:name="com.google.android.maps" />
        <uses-library android:name="org.apache.http.legacy" android:required="false" />

        <meta-data android:name="com.google.android.maps.v2.API_KEY"
            android:value="AIzaSyAMMxTYNGOpesLG6tq1E55_DSnAFYTw8bo" />

        <meta-data android:name="com.google.android.gms.version"
            android:value="@integer/google_play_services_version" />


이전 권한들을 확인할 수 있으며 추가로 <uses-feature> 태그가 사용되었는데 지도 서비스는 OpenGL 기능을
사용할 수 있도록 하기 위함이다. <application> 태그엔 <meta-data> 태그를 볼 수 있는데 구글맵 서비스의 키 값이
들어 있다


        구글맵 API 키 발급

마지막으로 API 키를 발급받아 매니페스트 파일에 입력해보자.


    http://console.developers.google.com


구글 디벨로퍼 사이트에서 API 키를 발급 받아 매니페스트의 메타 데이터로 입력한다.


    <meta-data android:name="com.google.android.maps.v2.API_KEY"
        android:value="AIzaSyAMMxTYNGOpesLG6tq1E55_DSnAFYTw8bo" />


            14-3 지도에 아이콘 추가

지도를 추가하고 현재 위치 보여줬으니 지도에 아이콘을 띄워보자.


        오버레이

일반적으로 지도는 레이어로 분리하고 각 레이어엔 유사한 속성을 가진 객체를 넣어 둔다.
구글맵에 이런 레이더들을 오버레이라고 부른다.


    조언

    구글맵은 전체가 레이어로 구성된 것은 아니며 각각 타일 모양의 이미지로 만들어 놓고 추가한다.
    그래서 내 위치, 카페 위치, 경로 등을 정의하여 추가할 수 있다.


        내 현재 위치 표시를 위한 오버레이 추가

sample_locationmapoverlay.xml 파일을 이전 예제와 동일하게 작성하고
메인 액티비티는 다음과 같이 작성하여 추가한다.


    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        ...

        mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
        mapFragment.getMapAsync(new OnMapReadyCallback() {
            @Override
            public void onMapReady(GoogleMap googleMap) {
                Log.d("Map", "지도 준비됨.");
                map = googleMap;
                map.setMyLocationEnabled(true);
            }
        });

        ...
    }

    ...

    @Override
    protected void onResume() {
        super.onResume();

        if (map != null) {
            map.setMyLocationEnabled(true);
        }
    }

    @Override
    protected void onPause() {
        super.onPause();

        if (map != null) {
            map.setMyLocationEnabled(false);
        }
    }


액티비티가 중지되거나 다시 시작할 때 현재 위치 표시를 위해 setMyLocationEnabled() 메소드를 호출하였다.
이 메소드는 지도 초기화가 완료된 후 호출되는 onMapReady() 메소드에서 호출한다.


        마커로 내 위치나 카페 위치 표시

내 주변의 카페나 은행을 찾으려면 지도상의 위치를 이리저리 이동하면서 찾아야 한다.
이는 아이콘으로 마커를 사용하여 표시하는 방법이 있다.

내 위치를 보여주는 setMyLocationEnabled() 메소드 대신 마커를 사용할 수 있다.
매인 엑티티비에 다음 코드를 추가한다.


    public class LocationMapOverlayActivity extends AppCompatActivity implements AutoPermissionsListener {
        SupportMapFragment mapFragment;
        GoogleMap map;

        MarkerOptions myLocationMarker;

        ...

        private void showCurrentLocation(Double latitude, Double longitude) {
            LatLng curPoint = new LatLng(latitude, longitude);
            map.animateCamera(CameraUpdateFactory.newLatLngZoom(curPoint, 15));

            showMyLocationMarker(curPoint);
        }

        private void showMyLocationMarker(LatLng curPoint) {
            if (myLocationMarker == null) {
                myLocationMarker = new MarkerOptions();
                myLocationMarker.position(curPoint);
                myLocationMarker.title("● 내 위치\n");
                myLocationMarker.snippet("● GPS로 확인한 위치");
                myLocationMarker.icon(BitmapDescriptorFactory.fromResource(R.drawable.finger_drawable));
                map.addMarker(myLocationMarker);
            } else {
                myLocationMarker.position(curPoint);
            }
        }

        ...


예제의 showCurrentLocation() 메소드 마지막 부분을 수정하여 showMyLocationMarker() 를 호출한다.


            14-4 앱 위젯 만들기

앱 위젯은 안드로이드 단말 홈 화면에 위젯을 보여주고 싶을 때 사용한다.
홈 화면을 길게 누르면 추가할 수 있는 화면이 표시된다. 또는 하단 중앙에 앱 리스트 아이콘을 표시할 수도 있다.

앱 위젯은 다른 앱 안에 들어갈 수 있게 만들어졌다. 그래서 홈화면에 위젯이 보이는 과정은
홈 화면에 위젯으로 구성한 앱이 들어가 있다 생각하면 된다. 홈 화면 안의 일정 영역을 할당받아 보이긴 하지만 일반 앱과
달라서 결과 화면만을 보여준다. 이런 특징 때문에 다른 구조를 가지고 있다.


    앱 위젯 호스트    위젯을 담는 그릇
    앱 위젯 제공자    위젯을 보여주는 제공자


앱 위젯을 구성하는 요소는 다음 세 가지이다.


    위젯 초기 뷰 레이아웃    앱 위젯이 처음 화면에 나타낼 레이아웃. XML 로 정의
    앱 위젯 제공자 정보      앱 위젯의 메타 데이터 등 정보를 가짐. XML 로 정의
    앱 위젯 제공자           앱 위젯과 정보를 주고 받을 기본 클래스. 브로드캐스트 수신자로 만듦


앱 위젯으로 만든 뷰는 주기적으로 업데이트될 수 있는데, 그럴 때마다 앱 위젯 제공자의 onUpdate() 메소드가 호출된다.
만약 앱 위젯 제공자가 위젯을 바꾸고 싶으면 앱 위젯 매니저로 업데이트할 수 있다.

간단히 내 위치를 표시하는 위젯을 만들어보자.
sample_location_widget.xml 을 만들어 다음과 같이 작성한다. 텍스트뷰 중 lineSpacingExtra 는 줄 간격 띄우는 속성이다.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:background="@drawable/ic_launcher_background"
            android:padding="10dp" >

            <TextView
                android:id="@+id/txtInfo"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:gravity="center_horizontal|center_vertical"
                android:text="내 위치 정보 수신중..."
                android:textColor="#FFFFFFFF"
                android:lineSpacingExtra="4dp" />
        </LinearLayout>
    </LinearLayout>


앱 위젯으로 나타날 뷰 모양은 액티비티나 뷰그룹을 위해 만드는 일반적인 XML 레이아웃과 동일하다.
그러나 앱 위젯에 모든 뷰가 들어갈 수 있는 것은 아니며 다음과 같이 뷰를 태그로 추가하여 사용할 수 있다.


    뷰그룹     FrameLayout.LinearLayout.RelativeLayout
    뷰         AnalogClock, Button, Chronometer ImageButton, ImageView, ProgressBar, TextView


앱 위젯에 위 표로 정리한 뷰들만 들어갈 수 있는 이유는 앱 위젯으로 표현되는 뷰들이 다른 프로세스가 들어가 있고
이 때문에 다른 프로세스 뷰를 접근하기 위해 RemoveViews 객체가 사용되기 때문이다.

앱 위젯으로 표현될 뷰의 레이아웃 정의 후 위젯 제공자 정보를 만들어야 한다.
그리고 xml 폴더에 sample_location_widgetinfo.xml 을 다음과 같이 작성한다.


    <?xml version="1.0" encoding="utf-8"?>
    <appwidget-provider xmlns:android="http://schemas.android.com/apk/res/android"
        android:minWidth="294dp"
        android:minHeight="72dp"
        android:updatePeriodMillis="1800000"
        android:initialLayout="@layout/sample_location_widget">

    </appwidget-provider>


앱 위젯으로 최소 크기 minWidth 와 minHeight 을 설정하고 주기적으로 업데이트될 시간은
updatePeriodMillis 속성으로 지정할 수 있다. 여기선 30분 간격으로 업데이트한다.
레이아웃은 앞서 만든 레이아웃을 지정한다.

앱 위젯을 구성하려면 앱 위젯 제공자를 정의해야 한다. 앱 위젯 제공자 클래스는 AppWidgetProvider 클래스를 상속하여 정의한다.


    public class LocationWidget extends AppWidgetProvider {
        ...

        @Override
        public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
            super.onUpdate(context, appWidgetManager, appWidgetIds);

            Log.d("MyLocationProvider", "onUpdate() called : " + ycoord + ", " + xcoord);

            final int size = appWidgetIds.length;

            for (int i = 0; i < size; i++) {
                int appWidgetId = appWidgetIds[i];

                String uri = "geo:"+ ycoord + "," + xcoord + "?z=10";   // 지도 URI 생성
                Intent intent = new Intent(android.content.Intent.ACTION_VIEW, Uri.parse(uri)); // 지도 인텐트

                PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, intent, 0);

                RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.sample_location_widget);
                views.setOnClickPendingIntent(R.id.txtInfo, pendingIntent);

                appWidgetManager.updateAppWidget(appWidgetId, views);
            }

            context.startService(new Intent(context,GPSLocationService.class));
        }


앱 위젯이 주기적으로 업데이트될 때마다 호출되는 onUpdate() 메소드 안에 텍스트뷰를 눌렀을 때
실행할 인텐트를 지정하고 GPS 위치 확인으로 서비스를 시작한다.

텍스트뷰를 눌렀을 때 내 위치를 이용해 지도를 보여줄 수 있는 가장 간단한 방법은 "geo:" 로 시작하는 URI 객체를
만들어 인텐트로 지도를 띄워주는 것이다. 내 위치 정보로 지도를 띄우는 URI 문자열 포맷은 다음과 같다.


    geo:<latitude>, <longitude>?z=<zoomLevel>


텍스트뷰를 누르면 미리 인텐트를 설정해야 하니 PendingIntent 객체를 만들어 설정한다.
RemoveViews 객체의 setOnClickListenerIntent() 메소드로 설정한 후 위젯 매니저 객체의 updateAppWidget() 메소드로
위젯을 업데이트하며 설정된다.

코드 마지막 부분에 내 위치 확인을 위한 서비스를 실행한다.


    public static class GPSLocationService extends Service {
        public static final String TAG = "GPSLocationService";

        private LocationManager manager = null;

        private LocationListener listener = new LocationListener() {

            public void onStatusChanged(String provider, int status, Bundle extras) {
            }

            public void onProviderEnabled(String provider) {
            }

            public void onProviderDisabled(String provider) {
            }

            public void onLocationChanged(Location location) {
                Log.d(TAG, "onLocationChanged() called.");

                updateCoordinates(location.getLatitude(), location.getLongitude());

                stopSelf();
            }
        };

        public IBinder onBind(Intent intent) {
            return null;
        }

        public void onCreate() {
            super.onCreate();

            Log.d(TAG, "onCreate() called.");

            manager = (LocationManager) getSystemService(LOCATION_SERVICE);

        }

        public int onStartCommand(Intent intent, int flags, int startId) {
            startListening();

            return super.onStartCommand(intent, flags, startId);
        }

        ...

        private void startListening() {
            Log.d(TAG, "startListening() called.");

            final Criteria criteria = new Criteria();
            criteria.setAccuracy(Criteria.ACCURACY_COARSE);
            criteria.setAltitudeRequired(false);
            criteria.setBearingRequired(false);
            criteria.setCostAllowed(true);
            criteria.setPowerRequirement(Criteria.POWER_LOW);

            final String bestProvider = manager.getBestProvider(criteria, true);

            try {
                if (bestProvider != null && bestProvider.length() > 0) {
                    manager.requestLocationUpdates(bestProvider, 500, 10, listener);
                } else {
                    final List<String> providers = manager.getProviders(true);

                    for (final String provider : providers) {
                        manager.requestLocationUpdates(provider, 500, 10, listener);
                    }
                }
            } catch(SecurityException e) {
                e.printStackTrace();
            }
        }

        ...
    }


서비스가 생성되며 onCreate() 메소드 안에 위치 관리자 객체를 참조하고 onStartCommand() 메소드로
startListening() 메소드를 호출하여 requestLocationUpdates() 메소드로 위치 정보를 요청한다.
위치 정보 확인 후 등록된 LocationListener 객체의 onLocationChanged() 메소드가 호출되는데,
그 안에선 updateCoordinates() 메소드를 호출하고 서비스를 종료한다.

서비스를 종료하는 이유는 앱 위젯 업데이트 주기 때마다 한 번씩만 위치 정보를 확인하고 종료하여
전원을 최소한으로 사용하기 위해서이다.


    private void updateCoordinates(double latitude, double longitude) {
        Geocoder coder = new Geocoder(this);
        List<Address> addresses = null;
        String info = "";

        Log.d(TAG, "updateCoordinates() called.");

        try {
            addresses = coder.getFromLocation(latitude, longitude, 2);

            if (null != addresses && addresses.size() > 0) {
                int addressCount = addresses.get(0).getMaxAddressLineIndex();

                if (-1 != addressCount) {
                    for (int index = 0; index <= addressCount; ++index) {
                        info += addresses.get(0).getAddressLine(index);

                        if (index < addressCount)
                            info += ", ";
                    }
                } else {
                    info += addresses.get(0).getFeatureName() + ", "
                            + addresses.get(0).getSubAdminArea() + ", "
                            + addresses.get(0).getAdminArea();
                }
            }

            Log.d(TAG, "Address : " + addresses.get(0).toString());
        } catch (Exception e) {
            e.printStackTrace();
        }

        coder = null;
        addresses = null;

        if (info.length() <= 0) {
            info = "[내 위치] " + latitude + ", " + longitude
                    + "\n터치하면 지도로 볼 수 있습니다.";
        } else {
            info += ("\n" + "[내 위치] " + latitude + ", " + longitude + ")");
            info += "\n터치하면 지도로 볼 수 있습니다.";
        }

        RemoteViews views = new RemoteViews(getPackageName(), R.layout.sample_location_widget);

        views.setTextViewText(R.id.txtInfo, info);

        ComponentName thisWidget = new ComponentName(this, LocationWidget.class);
        AppWidgetManager manager = AppWidgetManager.getInstance(this);
        manager.updateAppWidget(thisWidget, views);

        xcoord = longitude;
        ycoord = latitude;
        Log.d(TAG, "coordinates : " + latitude + ", " + longitude);

    }


새로 확인한 위치 좌표는 RemoteViews 객체를 만들어 새로운 텍스트를 설정한 후 앱 위젯 매니저 객체의 updateAppWidget()
메소드를 호출하여 업데이트한다. 위젯 매니저 객체를 코드 상에 참조하고 싶다면 AppWidgetManager.getInstance() 를 사용할 수 있다.

마지막으로 매니페스트는 다음과 같이 설정한다.


    <application>

        <receiver android:name=".LocationWidget">
            <intent-filter>
                <action android:name="android.appwidget.action.APPWIDGET_UPDATE" />
            </intent-filter>
            <meta-data android:name="android.appwidget.provider"
                android:resource="@xml/sample_location_widgetinfo" />
        </receiver>

        <service android:name=".LocationWidget$GPSLocationService" />
    </application>


브로드캐스트 수신자로 만든 앱 위젯 제공자 클래스를 <receiver> 태그로 추가한다.
이 안에 인텐트 필터의 액션 정보로는 APPWIDGET_UPDATE 로 설정하고 메타 데이터엔 위젯 제공자 정보 리소스로 설정한다.-