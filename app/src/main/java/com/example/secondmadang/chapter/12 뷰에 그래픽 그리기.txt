            12-1 뷰에 그래픽 그리기

그래픽 그리기의 쉬운 방법은 뷰 클래스를 상속하고 직접 그래픽을 그리는 것이다.
다음은 빨간 사각형 그리기 단계이다.


    1   새 클래스 만든 후 뷰를 상속
    2   페인트 객체를 초기화하고 필요한 속성 설정
    3   onDraw() 메소드 내에 사각형 그리는 메소드 호출
    4   onTouchEvent() 메소드 내에 터치 이벤트를 처리하는 코드 넣음
    5   새로 만든 뷰를 메인 액티비티에 추가


        1 단계 - 뷰 상속

CustomView 클래스를 만들고 뷰를 상속한다.


    public class CustomView extends View {

        public CustomView(Context context) {
            super(context);

            init(context);
        }

        public CustomView(Context context, AttributeSet attrs) {
            super(context, attrs);

            init(context);
        }

        private void init(Context context) {

        }
    }


        2 단계 - 페인트 객체 초기화

페인트 객체는 그래픽 그리기를 위한 속성을 담고 있다. Paint 자료형으로 된 변수를 하나 선언하여 init() 메소드에 생성한다.
페인트 객체의 setColor() 메소드로 Color.RED 를 전달하여 빨간색으로 색상을 설정한다.


    private Paint paint;

    ...

    private void init(Context context) {
        paint = new Paint();
        paint.setColor(Color.RED);
    }


        3 단계 - onDraw() 메소드 구현

onDraw() 메소드는 뷰 화면에 그려질 대 자동 호출된다.
그래서 뷰에 그래픽을 그리기 위해 onDraw() 메소드 안에 원하는 그래픽을 그리면 된다.
onDraw() 는 부모 클래스인 View 클래스에 정의되어 있어 재정의하면 된다.

onDraw() 메소드에서 좌표값과 페인트 객체로 사각형을 drawRect() 를 이용하자.


    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.drawRect(100, 100, 200, 200, paint);
    }


        4 단계 - onTouchEvent() 메소드 구현

onTouchEvent() 메소드로 터치 이벤트를 처리하는 일반적인 방법이다.
이 메소드를 재정의하여 손가락으로 누른 곳을 X, Y 좌표로 값을 토스트로 보여주는 코드를 작성한다.


    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            Toast.makeText(super.getContext(), "MotionEvent.ACTION_DOWN : " + event.getX() + ", " + event.getY(),
                    Toast.LENGTH_SHORT).show();
        }

        return super.onTouchEvent(event);
    }


        5 단계 - 메인 액티비티에 CustomView 클래스 추가

메인 액티비티에서 이제 뷰를 추가하자.


    public class CustomViewActivity extends AppCompatActivity {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);

            CustomView view = new CustomView(this);
            setContentView(view);
        }
    }


실행해보면 빨간 네모를 확인할 수 있다.


        그래픽 그릴 때 필요한 클래스와 메소드

    클래스         설명

    캔버스         뷰 표면에 그릴 수 있게 하는 메소드가 정의되어 있다.
    페인트         그래픽 그리기위한 색상 속성들
    비트맵         픽셀로 구성된 이미지로 메모리에서 그래픽을 그려줌
    드로어블 객체   사각형, 이미지 등 그래픽 요소들이 객체로 정의


사각형 그리기에는 다음과 같은 스타일들을 지정할 수 있다.


    Fill 스타일 적용 예 - 빨간색 사각형 채우기(디폴트)

        paint.setStyle(Style.FILL);

    Stroke 스타일 적용 예 - 빨간색 사각형 그리기

        paint.setStyle(Style.STROKE);


두 사각형에 색상을 지정하여 채운 후 선으로 그리는 과정을 진행하기 위해 CustomViewStyle 를 다음과 같이 작성한다.


    public class CustomViewStyle extends View {
        Paint paint;

        public CustomViewStyle(Context context) {
            super(context);

            init(context);
        }

        public CustomViewStyle(Context context, AttributeSet attrs) {
            super(context, attrs);

            init(context);
        }

        private void init(Context context) {
            paint = new Paint();
        }

        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);

            paint.setStyle(Paint.Style.FILL);
            paint.setColor(Color.RED);
            canvas.drawRect(10, 10, 100, 100, paint);

            paint.setStyle(Paint.Style.STROKE);
            paint.setStrokeWidth(2.0F);
            paint.setColor(Color.GREEN);
            canvas.drawRect(10, 10, 100, 100, paint);

            paint.setStyle(Paint.Style.FILL);
            paint.setARGB(128, 0, 0, 255);
            canvas.drawRect(10, 10, 100, 100, paint);

            DashPathEffect dashEffect = new DashPathEffect(new float[] { 5, 5 }, 1);
            paint.setStyle(Paint.Style.STROKE);
            paint.setStrokeWidth(3.0F);
            paint.setPathEffect(dashEffect);
            paint.setColor(Color.GREEN);
            canvas.drawRect(120, 10, 210, 100, paint);

            paint = new Paint();

            paint.setColor(Color.MAGENTA);
            canvas.drawCircle(160, 160, 40, paint);

            paint.setStyle(Paint.Style.STROKE);
            paint.setStrokeWidth(1);
            paint.setColor(Color.MAGENTA);
            paint.setTextSize(30);
            canvas.drawText("Text (Stroke)", 20, 260, paint);

            paint.setStyle(Paint.Style.FILL);
            paint.setTextSize(30);
            canvas.drawText("Text", 20, 320, paint);
        }
    }


선 두께를 설정할 땐 setStrokeWidth() 메소드를, 투명도 조절은 setARGB() 메소드를 사용한다.
점선 그릴 시엔 DashPathEffect 클래스를 이용할 수 있다.
여기서 선이 그려지는 부분과 선이 그려지지 않는 부분이 각 5의 크기로 지정되어 있다.
일반적인 선을 그릴 땐 drawLine(), 원을 그릴 땐 drawCircle() 메소드, 텍스트는 drawText() 메소드를 이용할 수 있다.
부드러운 선을 그리고 싶을 시 setAntiAlias(true) 코드를 사용할 수 있다.

메인 액티비티에서 동일하게 객체를 만들어 적용해보자.


    public class CustomViewActivity2 extends AppCompatActivity {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);

            CustomViewStyle view = new CustomViewStyle(this);
            setContentView(view);
        }
    }


앱을 실행하면 지정한 도형 및 텍스트들이 나타난다.

클리핑은 그리기 연산이 일어나는 영역을 설정하는 것으로 clipRect() 또는 clipRegion() 메소드를 이용하면
클리핑 영역을 설정할 수 있다. 예로 다음과 같이 전체 사각형 중 클리핑 영역을 설정할 수 있다.


    paint.clipRect(220, 240, 250, 270, Region.Op.REPLACE);
    paint.setStyle(Paint.Style.FILL);
    paint.setColor(Color.RED);
    canvas.drawRect(220, 240, 320, 340, paint);


지금까지 자주 사용되는 그리기 메소드를 살펴보았다. 캔버스 객체로 호출할 수 있는 대표 메소드들은 다음과 같다.


    메소드

    점       void drawPoint(float x, float y, Paint paint). drawPoints() 이용 시 여러 점 그림
    선       void drawLine(float startX, float startY, float stopX, float stopY, Paint paint). drawLines() 이용 시 여러 선 그림
    사각형   void drawRect(float left, float top, float right, float bottom, Paint paint).
    둥근 모서리 사각형  void drawRoundRect(RectF rect, float rx, float ry, Paint paint).
    원       void drawCircle(float cx, float cy, float radius, Paint paint)
    타원     void drawOval(RectF rect, Paint paint)
    아크     void drawArc(RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint)
    패스     void drawPath(Path path, Paint paint)
    비트맵   void drawBitmap(Bitmap bitmap, float left, float top, Paint paint)


            12-2 드로어블 객체로 만들어 그리기

그래픽 그리기가 가능한 요소들은 드로어블 객체로 그릴 수 있다.
ShapeDrawable, BitmapDrawable, PictureDrawable, LayerDrawable 등이 있다.
이미지는 비트맵으로, 이미지가 자동으로 늘어나느 부분은 나인패치, 도형 그리기는 셰이프, 세로축 순서로 그리는 레이어 등이 있다.

객체로 두는 이유는 그래픽들을 하나의 단위로 두어 독럽적인 객체로 관리할 수 있는 장점이 있다.
그리고 애니메이션도 적용할 수 있다. 이에 크게 세 가지로 나눌 수 있다.


    리소스 파일 사용           프로젝트 리소스에 이미지와 같은 파일을 포함하여 읽어 사용
    XML 정의                  그리기 객체의 속성을 정의하여 사용
    소스 코드에서 객체로 사용  소스 코드에서 new 연산자로 그려서 사용


여러 그리기 객체 중 특히 셰이프 드로어블은 도형으로 정의된 객체를 담을 수 있고 메모리에 만들어진 그래픽 정보를
관리할 수 있도록 한다.

드로어블 객체를 만들기 전에 뷰를 상속한 CustomViewDrawable 을 만들어 그레데이션 호과를 둬보자.


    public class CustomViewDrawable extends View {
        private ShapeDrawable upperDrawable;
        private ShapeDrawable lowerDrawable;

        public CustomViewDrawable(Context context) {
            super(context);

            init(context);
        }

        public CustomViewDrawable(Context context, AttributeSet attrs) {
            super(context, attrs);

            init(context);
        }

        private void init(Context context) {
            WindowManager manager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
            Display display = manager.getDefaultDisplay();
            int width = display.getWidth();
            int height = display.getHeight();

            Resources curRes = getResources();
            int blackColor = curRes.getColor(R.color.color01);
            int grayColor = curRes.getColor(R.color.color02);
            int darkGrayColor = curRes.getColor(R.color.color03);

            upperDrawable = new ShapeDrawable();

            RectShape rectangle = new RectShape();
            rectangle.resize(width, height * 2 / 3);
            upperDrawable.setShape(rectangle);
            upperDrawable.setBounds(0, 0, width, height * 2 / 3);

            LinearGradient gradient = new LinearGradient(0, 0, 0, height * 2 / 3,
                    grayColor, blackColor, Shader.TileMode.CLAMP);

            Paint paint = upperDrawable.getPaint();

            paint.setShader(gradient);

            lowerDrawable = new ShapeDrawable();

            RectShape rectangle2 = new RectShape();
            rectangle2.resize(width, height * 1 / 3);
            lowerDrawable.setShape(rectangle2);
            lowerDrawable.setBounds(0, height * 2 / 3, width, height);

            LinearGradient gradient2 = new LinearGradient(0, 0, 0, height * 1 / 3,
                    blackColor, darkGrayColor, Shader.TileMode.CLAMP);

            Paint paint2 = lowerDrawable.getPaint();
            paint2.setShader(gradient2);
        }

        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);

            upperDrawable.draw(canvas);
            lowerDrawable.draw(canvas);
        }
    }


뷰가 채워질 화면의 크기를 알기 위해 윈도우 매니저를 참조하였다. 색상은 colors.xml 파일에 저장하였다.
코드로 색상을 지정할 경우에는 다음과 같이 작성할 수 있다.


    int color = Color.BLUE;
    int transColor = Color.argb(128, 0, 0, 255);


XML 리소스를 이용할 시 <color> 태그로 정의하여 색상 값을 지정한다.
이후 리소스 객체의 getColor() 로 얻을 수 있다.


    <?xml version="1.0" encoding="utf-8"?>
    <resources>
        <color name="color01">#FF000000</color>
        <color name="color02">#FF888888</color>
        <color name="color03">#FF333333</color>
    </resources>


그리기 객체는 draw() 메소드를 호출하여 그리고 LinearGradient 를 이용하여 뷰의 2/3 와 아래 1/3 을 채우게 하였다.
이제 메인 액티비티를 작성한다.


    public class CustomViewActivity3 extends AppCompatActivity {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);

            CustomViewStyle view = new CustomViewStyle(this);
            setContentView(view);
        }
    }


선 그리기를 위한 속성은 Stroke 와 관련된 메소드로 설정할 수 있다.


    setStrokeWidth  Stroke 폭을 설정
    setStrokeCap    Stroke 시작과 끝 모양 설정. Cap.BUTT, Cap.ROUND, Cap.SQUARE 이고 디폴트는 BUTT 이다.
    setStrokeJoin   Stroke 의 꼭짓점 부분의 연결 모양 설정. Join.MITER, Join.ROUND, Join.BEVEL 이고 디폴트는 MITER 이다.
    setStrokeMiter  Stroke 폭의 절반에 대해 Miter 길이의 비율 제한을 설정


앞의 코드에서 onDraw() 메소드 내에 패스 정보를 추가하고 각 서로 다른 Cap 과 Join 스타일로 그려보자.
Path 클래스는 android.graphics.Path 를 선택하여 추가한다.


    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        upperDrawable.draw(canvas);
        lowerDrawable.draw(canvas);

        Paint pathPaint = new Paint();
        pathPaint.setAntiAlias(true);
        pathPaint.setColor(Color.YELLOW);
        pathPaint.setStyle(Paint.Style.STROKE);
        pathPaint.setStrokeWidth(16.0F);
        pathPaint.setStrokeCap(Paint.Cap.BUTT);
        pathPaint.setStrokeJoin(Paint.Join.MITER);

        Path path = new Path();
        path.moveTo(20, 20);
        path.moveTo(120, 20);
        path.moveTo(160, 90);
        path.moveTo(180, 80);
        path.moveTo(200, 120);

        canvas.drawPath(path, pathPaint);

        pathPaint.setColor(Color.WHITE);
        pathPaint.setStrokeCap(Paint.Cap.ROUND);
        pathPaint.setStrokeJoin(Paint.Join.BEVEL);

        path.offset(30, 120);
        canvas.drawPath(path, pathPaint);
    }


선을 구성할 좌표 값에 Path 객체로 moveTo() 메소드로 추가하여 좌표값 역할을 하였고,
lineTo() 는 이전 좌표 값과 선으로 연결되는 좌표 값을 추가하는 역할이다.

선을 그릴 때 사용되는 Paint 객체는 Stroke 스타일로 만든 후에 setAntiAlias() 메소드를 호출한다.
첫 번째 선의 색상은 노란색으로 하고 Cap.BUtT 과 Join.MITER 를 적용한다.
이후도 다른 스타일로 선을 그렸다.


            12-3 비트맵 이미지 사용

비트맵 객체는 메모리에 만들어지는 이미지이다.
이는 다양한 조작을 할 수 있고 흔히 더블 버퍼링이란 방법으로 메모리 공간에서 그래픽을 그린 후에 화면에 표시하는 방법이다.

새 CustomViewImage 클래스를 만들어 다음과 같이 작성한다.


    public class CustomViewImage extends View {

        private Bitmap cacheBitmap; // 메모리에 만들어질 비트맵과 캔버스 선언
        private Canvas cacheCanvas;
        private Paint mPaint;

        public CustomViewImage(Context context) {
            super(context);

            init(context);
        }

        public CustomViewImage(Context context, AttributeSet attrs) {
            super(context, attrs);

            init(context);
        }

        private void init(Context context) {
            mPaint = new Paint();
        }

        @Override
        protected void onSizeChanged(int w, int h, int oldw, int oldh) {
            createCacheBitmap(w, h);
            testDrawing();
        }

        private void createCacheBitmap(int w, int h) {
            cacheBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
            cacheCanvas = new Canvas();
            cacheCanvas.setBitmap(cacheBitmap);
        }

        private void testDrawing() {
            cacheCanvas.drawColor(Color.WHITE);
            mPaint.setColor(Color.RED);
            cacheCanvas.drawRect(100, 100, 200, 200, mPaint);
        }

        @Override
        protected void onDraw(Canvas canvas) {
            if (cacheBitmap != null) {
                canvas.drawBitmap(cacheBitmap, 0, 0, null);
            }
        }
    }


메인 액티비티에서 사용해보자.


    public class CustomViewActivity4 extends AppCompatActivity {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);

            CustomViewStyle view = new CustomViewStyle(this);
            setContentView(view);
        }
    }


뷰가 새로 그려질 때 호출되는 onDraw() 메소드는 메모리에 만들어둔 cacheBitmap 을 그리는 코드만 있다.
실제 그래픽 그려진 시점은 testDrawing() 메소드가 호출되었을 때이며, createBitmap() 메소드로 만들어진
비트맵 객체는 onSizeChanged() 메소드가 호출되었을 때 초기화된 후, testDrawing() 에 의해 그려진다.


          createBitmap()
            -->
    화면                  메모리         <--     cacheCanvas
            <--          cacheBitmap
         drawBitmap()


        비트맵 객체로 그래픽 그리기

앞에서 만든 비트맵 메모리에 만들면 다양한 그리기나 그래픽 효과를 적용할 수 있다.
BitmapFactory 클래스는 비트맵 이미지를 만들기 위해 클래스 메소드들을 제공하며 이 메소드들은
이미지를 메모리에 비트맵 객체로 만들어 줄 수 있는 방법을 제공한다.


        파일에서 읽기     파일 패스를 지정하면 해당 위치 이미지 파일 읽어옴
                            -> public static Bitmap decodeFile(String pathName)

        리소스에서 읽기    리소스에 저장한 이미지 파일 읽어옴
                            -> public static Bitmap decodeResource(Resource res, int id)

        바이트 배열 읽기   바이트 배열로 되어 있는 이미지 파일을 읽어옴
                            -> public static Bitmap decodeByteArray(byte[] data, int offset, int length)

        스트림에서 읽기    입력 스트림에서 이미지 파일을 읽어옴
                            -> public static BitmapStream(InputStream is)


CustomViewImage 클래스의 testDrawing() 메소드 안에 다음 코드를 추가한다.
이 코드는 리소스에 저장된 이미지를 읽어 들인 후 와면에 디스플레이한다.
Matrix 클래스는 android.graphics 를 선택한다.


    private void testDrawing() {
        cacheCanvas.drawColor(Color.WHITE);
        mPaint.setColor(Color.RED);
        cacheCanvas.drawRect(100, 100, 200, 200, mPaint);

        Bitmap srcImg = BitmapFactory.decodeResource(getResources(), R.drawable.aa);
        cacheCanvas.drawBitmap(srcImg, 30, 30, mPaint);

        Matrix horInverseMatrix = new Matrix();
        horInverseMatrix.setScale(-1, 1);
        Bitmap horInverseImg = Bitmap.createBitmap(srcImg, 0, 0,
                srcImg.getWidth(), srcImg.getHeight(), horInverseMatrix, false);
        cacheCanvas.drawBitmap(horInverseImg, 30, 130, mPaint);

        Matrix verInverseMatrix = new Matrix();
        verInverseMatrix.setScale(1, -1);
        Bitmap verInverseImg = Bitmap.createBitmap(srcImg, 0, 0,
                srcImg.getWidth(), srcImg.getHeight(), verInverseMatrix, false);
        cacheCanvas.drawBitmap(verInverseImg, 30, 230, mPaint);
    }


화면에 리소스로 저장된 이미지를 읽어 원본을 그린다. 그다음 매트릭스 객체로 좌우 대칭되거나
상하 대칭되는 비트맵 이미지를 만들어 그려준다. 매트릭스 객체에 정의된 setScale() 메소드로 (-1, 1) 은 좌우 대칭,
(1, -1) 은 상하 대칭과 같이 적용할 수 있다.

이미지를 다른 형태로 바꾸는 과정은 이미지 변환(Transformation)이라 하는데 안르도이드에선
이미지 변환을 위해 매트릭스 클래스를 사용한다. 이는 확대/축소/뒤틀림 등 효과를 줄 수 있다.
setScale(), setTranslate(), setRotate(), setSkew() 등이 있다.

이미지에 다양한 효과를 내는 마스크(Mask)를 이용하기도 한다.
여러 마스크 필터 중 BlurMaskFilter 는 번짐 효과를 낼 수도 있다.
비트맵 이미지 확대는 createScaledBitmap() 메소드를 사용할 수 있다.
testDrawing() 메소드에 다음 코드를 주어 물방울 세배로 확대하고 번짐 효과를 줘보자.


    mPaint.setMaskFilter(new BlurMaskFilter(10, BlurMaskFilter.Blur.NORMAL));
    Bitmap scaledImg = Bitmap.createScaledBitmap(srcImg,
            srcImg.getWidth() * 3, srcImg.getHeight() * 3, false);
    cacheCanvas.drawBitmap(scaledImg, 30, 300, mPaint);


            12-4 페인트보드 만들기

그래픽 그리는 것이 아닌 화면 터치하여 그릴 수 있어야한다.
페인트 보드는 손가락으로 터치하는 방식의 이벤트로 그림을 그릴 수 있는 단순한 형태이다.
즉, onTouchEvent() 메소드로 터리한 곳의 좌표값으로 그리기 기능을 구현한 것이다.
터치 이벤트가 동작하는 방식은 크게 (1) 눌렀을 때와 (2) 누른 상태로 움직일 때 (3) 떼었을 때로 나뉜다.
각 이벤트 처리는 drawLine() 메소드로 선을 그리면 된다.
이런 페인트 보드는 실제 업무용으로 많이 사용되며 사인 받는 식으로 사용되기도 한다.

PaintBoard 클래스를 생성하여 다음과 같이 작성한다.


    public class PaintBoard extends View {
        Canvas mCanvas;
        Bitmap mBitmap;
        Paint mPaint;

        int lastX;
        int lastY;

        public PaintBoard(Context context) {
            super(context);

            init(context);
        }

        public PaintBoard(Context context, AttributeSet attrs) {
            super(context, attrs);

            init(context);
        }

        private void init(Context context) {
            this.mPaint = new Paint();
            this.mPaint.setColor(Color.BLACK);

            this.lastX = -1;
            this.lastY = -1;
        }

        @Override
        protected void onSizeChanged(int w, int h, int oldw, int oldh) {
            Bitmap img = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
            Canvas canvas = new Canvas();
            canvas.setBitmap(img);
            canvas.drawColor(Color.WHITE);

            mBitmap = img;
            mCanvas = canvas;
        }

        @Override
        protected void onDraw(Canvas canvas) {
            if (mBitmap != null) {
                canvas.drawBitmap(mBitmap, 0, 0, null);
            }
        }

        @Override
        public boolean onTouchEvent(MotionEvent event) {
            int action = event.getAction();

            int X = (int) event.getX();
            int Y = (int) event.getY();

            switch (action) {
                case MotionEvent.ACTION_UP:
                    lastX = -1;
                    lastY = -1;

                    break;
                case MotionEvent.ACTION_DOWN:
                    if (lastX != -1) {
                        if (X != lastX || Y != lastY) {
                            mCanvas.drawLine(lastX, lastY, X, Y, mPaint);
                        }
                    }

                    lastX = X;
                    lastY = Y;

                    break;
                case MotionEvent.ACTION_MOVE:
                    if (lastX != -1) {
                        mCanvas.drawLine(lastX, lastY, X, Y, mPaint);
                    }

                    lastX = X;
                    lastY = Y;

                    break;
            }

            invalidate();

            return true;
        }
    }


손가락으로 눌린 상태로 이동할 때 뷰 위에 선을 그리는 가장 간단한 방법은 이전 터치 때의 좌표와 현재 때의 좌표를
이용해 선을 그리는 것이다. 터치 이벤트는 연속하여 전달되기 때문에 선을 그려나가면 손가락이 움직이는 대로 그려지게 된다.
그래서 누른 상태 ACTION_DOWN 상태의 좌표 값을 저장하고 ACTION_MOVE 상태에서 이전 좌표 값과 현재 좌표를 연결하여 선을 그린다.

메인 액티비티에 적용하여 확인해보자.


    public class CustomViewActivity5 extends AppCompatActivity {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);

            PaintBoard view = new PaintBoard(this);
            setContentView(view);
        }
    }


이렇게 이동하면서 계속 그리는 선은 손가락이 떼어지는 시점에 끝난다. 그리고 마지막 부분에 invalidate() 메소드로
지속적으로 화면을 갱신한다.
근데 그림을 그릴 때 손가락을 빨리 움직이면 부드러운 곡선이 아닌 일부분이 직선으로 그려지는 것을 볼 수 있다.
이것은 터치 이벤트 처리가 직선으로 각 좌표 값을 연결하여 그런 것이다.

이를 해결하기 위해 메소드 중에서 패스를 이용하면 연속적인 점들을 이용하여 직선 또는 부드러운 곡선을 쉽게 그릴 수 있다.
흔히 아크 또는 커브로도 곡선 그리기 방법은 drawLine() 을 이용하여 격자형 딱딱함을 없앨 수 있다.

좀더 다듬기 위해서 BestPaintBoard 클래스를 만들어 다음과 같이 작성한다.
onTouchEvent() 메소드에서 이벤트 처리를 touchUp(), touchMove() 같이 별도 메소드로 분리하고 해당 영역으로
다시 그리게하여 코드 및 그리기를 향상 시킨다.


    public class BestPaintBoard extends View {

        public boolean changed = false;

        Canvas mCanvas;
        Bitmap mBitmap;
        Paint mPaint;

        float lastX;
        float lastY;

        Path mPath = new Path();

        float mCurveEndX;
        float mCurveEndY;

        int mInvalidateExtraBorder = 10;

        static final float TOUCH_TOLERANCE = 8;

        public BestPaintBoard(Context context) {
            super(context);

            init(context);
        }

        public BestPaintBoard(Context context, AttributeSet attrs) {
            super(context, attrs);

            init(context);
        }

        private void init(Context context) {
            mPaint = new Paint();
            mPaint.setAntiAlias(true);
            mPaint.setColor(Color.BLACK);
            mPaint.setStyle(Paint.Style.STROKE);
            mPaint.setStrokeJoin(Paint.Join.ROUND);
            mPaint.setStrokeCap(Paint.Cap.ROUND);
            mPaint.setStrokeWidth(3.0F);

            this.lastX = -1;
            this.lastY = -1;
        }

        @Override
        protected void onSizeChanged(int w, int h, int oldw, int oldh) {
            Bitmap img = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
            Canvas canvas = new Canvas();
            canvas.setBitmap(img);
            canvas.drawColor(Color.WHITE);

            mBitmap = img;
            mCanvas = canvas;
        }

        @Override
        protected void onDraw(Canvas canvas) {
            if (mBitmap != null) {
                canvas.drawBitmap(mBitmap, 0, 0, null);
            }
        }

        @Override
        public boolean onTouchEvent(MotionEvent event) {
            int action = event.getAction();
            switch (action) {
                case MotionEvent.ACTION_UP:
                    changed = true;

                    Rect rect = touchUp(event, false);
                    if (rect != null) {
                        invalidate(rect);
                    }

                    mPath.rewind();

                    return true;
                case MotionEvent.ACTION_DOWN:
                    rect = touchDown(event);
                    if (rect != null) {
                        invalidate(rect);
                    }

                    return true;
                case MotionEvent.ACTION_MOVE:
                    rect = touchMove(event);
                    if (rect != null) {
                        invalidate(rect);
                    }

                    return true;
            }

            return false;
        }

        private Rect touchDown(MotionEvent event) {
            float x = event.getX();
            float y = event.getY();

            lastX = x;
            lastY = y;

            Rect mInvalidRect = new Rect();
            mPath.moveTo(x, y);

            final int border = mInvalidateExtraBorder;
            mInvalidRect.set((int) x - border, (int) y - border, (int) x + border, (int) y + border);
            mCurveEndX = x;
            mCurveEndY = y;

            mCanvas.drawPath(mPath, mPaint);

            return mInvalidRect;
        }

        private Rect touchMove(MotionEvent event) {
            Rect rect = processMove(event);

            return rect;
        }

        private Rect touchUp(MotionEvent event, boolean cancel) {
            Rect rect = processMove(event);

            return rect;
        }

        private Rect processMove(MotionEvent event) {
            final float x = event.getX();
            final float y = event.getY();

            final float dx = Math.abs(x - lastX);
            final float dy = Math.abs(y - lastY);

            Rect mInvalidRect = new Rect();
            if (x >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) {
                final int border = mInvalidateExtraBorder;
                mInvalidRect.set((int) lastX - border, (int) lastY - border,
                        (int) lastX + border, (int) lastY + border);

                float cX = mCurveEndX = (x + lastX) / 2;
                float cY = mCurveEndY = (y + lastY) / 2;

                mPath.quadTo(lastX, lastY, cX, cY);

                mInvalidRect.union((int) lastX - border, (int) lastY - border,
                        (int) lastX + border, (int) lastY + border);

                mInvalidRect.union((int) cX - border, (int) cY - border,
                        (int) cX + border, (int) cY + border);

                lastX = x;
                lastY = y;

                mCanvas.drawPath(mPath, mPaint);
            }

            return mInvalidRect;
        }
    }


moveTo() 또는 quadTo() 메소드로 Path 객체에 추가하여 새 좌표 값 위치 영역을 Rect 객체에도 포함하도록 하여 그리게했다.
메인 액티비티에 적용해보자.


            12-5 멀티터치 이미지 뷰어 만들기

두 손가락으로 이미지를 확대하고 작게하는 멀티터치 기능이 있다.
한손 터치의 x, y 좌표 뿐만 아니라 두 번째의 x, y 좌표도 안다면 이 기능을 구현할 수 있다.
이는 다음과 같이 메소드를 제공한다.


    public final int getPointerCount()
    public final float getX(int pointerIndex)
    public final float getY(int pointerIndex)


세 가지 메소드는 뷰의 onTouch() 메소드로 전달되는 MotionEvent 객체에 정의되어 있고, 여러 손가락 터지 정보를 알 수 있다.

getPointerCount() 는 몇 손가락이 터치되었는지 알 수 있다.
getX(), getY() 로 좌표를 가져올 수 있지만, getX(int pointerIndex) 와 같이 몇 번째 손가락의 좌표인지 확인할 수 있다.

멀티터치를 이용해보기 위해 sample_multitouch.xml 을 만든다.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">

        <TextView
            android:id="@+id/textView56"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="두 손가락을 이용해 터치해보자." />

        <LinearLayout
            android:id="@+id/container5"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">

        </LinearLayout>
    </LinearLayout>


터치 이벤트를 사용해 이미지 크기를 크게 하거나 작게 하여 이미지를 보여줄 뷰를 정의한다.
ImageDisplayView 란 이름의 클래스를 만들어 작성한다.

클래스는 onTouch() 메소드를 포함하여 여러 이벤트에 대응하여 이미지 크기를 바꾸게 한다.
축소 밑 확대를 위해 매트릭스 객체로 비트맵 이미지의 각 픽셀 값을 변경해주었다.


    public boolean postScale(float sx, float sy, float px, float py)
    public boolean postTranslate(float dx, float dy)
    public boolean postRotate(float degrees)


postScale() 메소드로 비트맵 이미지 확대 또는 축소를 할 수 있다.
postTranslate() 메소드는 비트맵 이미지를 이동할 때 위치를 지종하여 이동시킨다.
postRotate() 메소드는 비트맵 이미지를 회전 시킬 때 사용한다.

이 세 가지 메소드로 확대/축소, 이동, 회전을 할 수 있다.
이미지 초기화는 init() 메소드가 아닌 onSizeChanged() 메소드에서 했는데, 이는 뷰가 화면에 보이기 전에
onSizeChanged() 메소드가 호출되어 이미지를 만드는 것이 효율적이기 때문이다.
메모리에 비트맵 이미지를 만드는 메소드는 newImage() 이다.

화면에 뷰를 그려주는 onDraw() 메소드에선 단순히 메모리를 만들어져 있는 비트맵 이미지를 화면에 그려주는 역할을 한다.
결국 onTouch() 메소드에서 터치 이벤트를 처리할 때 메모리 상의 이미지에 대상이 되는 사진 이미지를 변경하여 그리는 것이
중요한 부분이다.

터치 부분에서 getAction() 값이 ACTION_MOVIE 이며 getPointerCount() 값이 1 인경우 한 손가락으로 움직이니
좌표 값 차이 계산으로 이동시키도록 moveImage() 를 호출한다. 매트릭스 객체의 postTranslate() 메소드를 호출하여
다시 그리도록 redraw() 를 호출한다.

2일 경우 두 손가락이니 현재 좌표에서 확대/축소를 하도록 두 손가락이 벌어지는 간격으로 계산하여
scaleImage() 메소드에서 postScale() 메소드를 호출하여 확대 또는 축소 하여 redraw() 를 호출한다.

사진 이미지를 설정하고 터치 이벤트가 발생하면 이미지를 변형할 수 있게 뷰를 만들어 메인 액티비티에 추가하자.


    public class CustomViewActivity7 extends AppCompatActivity {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_multitouch);

            LinearLayout container = findViewById(R.id.container5);
            Resources res = getResources();
            Bitmap bitmap = BitmapFactory.decodeResource(res, R.drawable.aa);

            ImageDisplayView view = new ImageDisplayView(this);
            view.setImageData(bitmap);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.MATCH_PARENT
            );
            container.addView(view, params);
        }
    }


            12-6 머티리얼 디자인의 개념

머티리얼 디자인은 구글이 안드로이드에 적용한 디자인 트렌드 중 하나이다.
단순하며 직관적인 디자인을 도입한 것이다. 툴바나 탭 같은 화면의 구성에 사용자에게 직접적으로 보이는 부분이니 중요하다.

밝은 테마 모양의 앱은 하얀색 바탕과 심플한 위젯을 확인할 수 있고
버튼 모양의 직사각형에 간단한 텍스트만 들어있는 리싸이클러뷰 위젯을 쉽게 구현할 수도 있다.

그리고 카드 모양으로 텍스트와 이미지가 복잡하지 않게 적용할 수도 있다.
카드는 테투리가 약간 올라오게 elevation 이란 속성을 설정한다. 그림자 효과 및 둥근 효과를 줄 수 있다.

이러한 매터리얼 디자인은 구글 가이드 문서를 확인하여 만들어보자.