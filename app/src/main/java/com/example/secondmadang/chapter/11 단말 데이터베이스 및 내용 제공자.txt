            11-1 모바일 데이터베이스

앱에 데이터를 간단하게 저장하고 싶을 땐 SharedPreferences 를 사용할 수 있다.
그리고 필요 시 파일을 직접 쓰거나 읽을 수도 있다. 근데 많은 양의 데이터는 체계적으로 관리하기 위해 데이터베이스를 사용한다.
특히 SQL 문으로 데이터를 조회하는 관계형 데이터베이스 휴대 단말에서 사용하면 더 효율적일 것이다.

안드로이드는 임베디드 데이터베이스(Embedded Database)로 개발된 경량급 관계형 데이터베이스인 SQLite 를 가지고 있다.
이는 파일로 만들어진 하위 수준의 구조를 가지면서도 데이터베이스 기능까지 그대로 사용할 수 있게 만든 것이다.
그리고 저장될 때는 파일로 저장되니 데이터베이스의 복사, 이동, 삭제가 매우 쉽다.


SQLite 데이터베이스 큰 장점은 데이터 조회 속도가 빠르다는 것과 표준 SQL 를 지원한다는 점이다.
더불어 원격 데이터베이스를 접근하는 SQL 문을 로컬에서도 똑같이 쓸 수 있다.
결국 앱의 개발 생산성이 높아지고 향후 기능을 변경할 때도 간단한 SQL 수정만으로 데이터 처리 방식을 바꿀 수 있다는 장점이 있다.


    데이터베이스 만들기
            ↓
    테이블 만들기
            ↓
    레코드 추가하기
            ↓
    데이터 조회하기


먼저 SQL 기반의 데이터베이스를 만드는 방법부터 알아보자.


            11-2 데이터베이스와 테이블 만들기

데이터베이스는 Context 클래스의 openOrCreateDatabase() 메소드로 만들 수 있다.
즉, 앱에서 기본적으로 사용하는 Activity 가 Context 를 상속하니 액티비티에서 간단히 사용할 수 있다.
데이터베이스를 삭제하는 것은 deleteDatabase() 메소드로 정의한다.


    public abstract SQLiteDatabase openOrCreate (String name, int mode, SQLiteDatabase.CursorFactory factory)
    public abstract boolean deleteDatabase (String name)


openOrCreateDatabase() 메소드의 첫 번째 파라미터는 데이터베이스 이름이다.
두 번째 파라미터는 '사용 모드' 이다. 여기선 MODE_PRIVATE 상수를 넣어준다.
세 번째 파라미터는 널이 아닌 객체를 지정할 경우 쿼리의 결과 값으로 반환되어 데이터 참조할 커서를 만드는 객체를 전달한다.

openOrCreateDatabase() 메소드를 호출했을 땐 반환되는 SQLiteDatabase 객체는 name 변수로 지정한 데이터베이스에
접근할 수 있는 메소드를 정의하고 있다. 그래서 데이터베이스를 열거나 만든 후 SQLiteDatabase 객체를 참조해야 한다.

SQLiteDatabase 객체에서 가장 중요한 것은 execSQL() 이다. 이는 데이터베이스를 만들고 난 후 SQL 문을 실행할 때 사용한다.
그래서 테이블을 만드는 것뿐만 아니라 레코드 추가처럼 표준 SQL 을 사용하는 여러 데이터 처리가 가능하다.


    public void execSQL(String sql) throws SQLException


새로운 sample_database.xml 를 만들어 입력상자 두 개와 [데이터베이스 만들기], [테이블 만들기] 버튼을 만든다.
그리고 밑에 텍스트뷰를 하나 추가한다.
첫 번째 버튼을 누르면 데이터베이스를 생성하고 두 번째 버튼으로는 테이블을 생성 및 레코드를 추가한다.


    public class DatabaseActivity extends AppCompatActivity {
        EditText editText;
        EditText editText2;
        TextView textView;

        SQLiteDatabase database;
        String tableName;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_database);

            editText = findViewById(R.id.editTextTextPersonName20);
            editText2 = findViewById(R.id.editTextTextPersonName21);
            textView = findViewById(R.id.textView53);

            Button button = findViewById(R.id.button102);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    String databaseName = editText.getText().toString();
                    createDatabase(databaseName);
                }
            });

            Button button2 = findViewById(R.id.button103);
            button2.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    tableName = editText2.getText().toString();
                    createTable(tableName);

                    insertRecord();
                }
            });
        }

        private void createDatabase(String name) {
            println("createDatabase 호출됨.");

            database = openOrCreateDatabase(name, MODE_PRIVATE, null);

            println("데이터베이스 생성함 : " + name);
        }

        private void createTable(String name) {
            println("createTable 호출됨.");

            if (database == null) {
                println("데이터베이스를 먼저 생성하세요.");
                return;
            }

            database.execSQL("CREATE TABLE IF NOT EXISTS " + name + "( " +
                    "_id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                    "name TEXT, " +
                    "age INTEGER, " +
                    "mobile TEXT" + ")");

            println("테이블 생성함 : " + name);
        }

        private void insertRecord() {
            println("insertRecord 호출됨.");

            if (database == null) {
                println("테이블을 먼저 생성하세요.");
                return;
            }

            database.execSQL("INSERT INTO " + tableName + "(name, age, mobile) " +
                    "VALUES " +
                    "('John', 20, '010-1000-1000')");

            println("레코드 추가함.");
        }

        public void println(String data) {
            textView.append(data + "\n");
        }
    }


코드를 보면 데이터베이스나 테이블을 만드는 것이 의외로 간단하다.
[데이터베이스 만들기] 버튼을 누르면 createDatabase() 가 호출되고 이름을 받아 openOrCreateDatabase() 를 호출한다.
[테이블 만들기] 버튼을 누르면 createTable() 메소드를 먼저 호출해 테이블을 만들고 insertRecord() 메소드를 호출하여
임의의 레코드를 삽입한다. createTable() 메소드에서 호출하는 execSQL() 메소드는 SQL 문을 파라미터로 전달받기
때문에 원하는 기능의 SQL 을 먼저 정의해야 한다.

여기선 직원 테이블을 만들기 위해 컬럼을 직원 id, 이름, 나이, 휴대폰 번호로 정의했다.
id 의 경우엔 앞에 '_' 를 붙여 '_id' 로 만드는 것을 권장한다.
자동으로 1씩 증가하는 키 값으로 지정하였다.

다음은 컬럼에 정의할 수 있는 데이터 타입이다.


    컬럼 타입

    text, varchar           문자열
    smallint, integer       정수(2, 4바이트)
    real, float, double     부동소수(4, 8바이트)
    boolean                 true, false
    date, time, timestamp   시간(날짜, 시간, 날짜 + 시간)
    blob, binary            바이너리


createTable() 메소드는 테이블 만들기 위해 SQL 문이 'create table ...' 이었다.
여기서 정의한 SQL 문을 execSQL() 메소드로 실행하면 테이블이 만들어진다.
insertRecord() 메소드에선 하나의 레코드를 추가했다.


    CREATE TABLE [IF NOT EXISTS] table_name(col_name column_definition, ...)
        [table_option] ...

    INSERT INTO table_name<(column_list)> VALUES (value, ...)


앱을 실행하고 첫 번째 입력상자에 employee.db 를 입력하여 데이터베이스를 만들고
후에 두 번째 입력상자에는 emp 를 입력하여 테이블을 만든다.


    조언

    SQLite 관리 도구로 데이터베이스를 쉽게 확인할 수 있는 GUI 기반 관리 도구가 있다.
    SQLite 의 경우엔 'DB Browser for SQLite' 란 관리 도구를 사용할 수 있다.
    사이트에서 다운로드하여 설치해보자.
    [새 데이터베이스] 버튼으로 데이터베이스를 저장할 위치와 이름을 정할 수 있다.
    [저장] 버튼을 누르면 데이터베이스가 만들어지고 [필드 추가] 버튼으로 컬럼 정보를 하나씩 추가한다.

    이전 데이터베이스(employee.db)와 테이블(emp)을 동일하게 만든다.
    앱에서 만든 데이터베이스는 '/data/data/$package_name/databases' 폴더에 저장된다.
    해당 경로는 openOrCreateDatabase() 메소드를 호출하여 데이터베이스가 저장되는 곳이다.
    그래서 GUI 관리 도구를 사용하여 만든 데이터베이스 파일을 이 위치에 복사해 넣으면 코드에서 만든 데이터베이스처럼 사용할 수 있다.
    다만 데이터베이스 파일이 /data 폴더 안에 생성되면 보안 때문에 실제 단말에선 이 폴더를 볼 수 없다.
    이렇게 데이터베이스 파일이 생성되는 위치에 따라 제약이 있어 SD 카드에 저장하는 것을 권장한다.


            11-3 헬퍼 클래스로 업그레이드 지원

데이터베이스를 만드는 것 외에 테이블 정의가 바뀌는 스키마를 업그레이드할 필요가 있을 땐 API 에서 제공하는
헬퍼(Helper) 클래스를 사용하는 것도 좋은 방법이다.
헬퍼 클래스를 사용하려면 SQLiteOpenHelper 클래스를 사용해야 한다.
SQLiteOpenHelper 클래스는 데이터베이스를 만들거나 열기 위해 필요한 작업들을 도와준다.


    public SQLiteOpenHelper (Context context, String name, SQLiteDatabase.CursorFactory factory, int version)


첫 번째 파라미터는 Context 객체로 this 로 지정할 수 있다.
두 번째 파라미터는 데이터베이스 이름이며, 세 번째 파라미터는 데이터 조회 시 반환할 커서를 만들 CursorFactory 객체이다.
네 번째 파라미터는 전달될 정수 타입의 버전 정보로 데이터베이스 업그레이드를 위해 사용되며
기존 데이터베이스 버전 정보와 다르게 지정하여 데이터베이스 스키마나 데이터를 바꿀 수 있다.

SQLiteOpenHelper 객체는 데이터베이스를 만들거나 열기 위해 필요한 작업을 도와주는 역할을 한다.
그래서 SQLiteOpenHelper 객체로는 데이터베이스 파일을 만드는 것은 아니다.
데이터베이스 파일을 만들어지도록 하려면 getReadableDatabase() 또는 getWritableDatabase() 메소드를 호출해야 한다.
이 클래스를 이용할 때의 장점은 데아터베이스를 만드거나 업그레이드할 때 콜백 메소드가 호출된다는 점이다.
그래서 생성, 업그레이드 등 여러 상태를 상황에 맞게 처리할 수 있다.


    public abstract void onCreate(SQLiteDatabase db)
    public abstract void onOpen(SQLiteDatabase db)
    public abstract void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)


현재 데이터베이스 버전이 이미 사용하고 있는 SQLiteDatabase 파일의 버전과 다를 경우 자동으로 호출되는
onUpgrade() 메소드엔 SQLiteDatabase 객체와 함께 기존 버전 정보를 담고 있는 oldVersion, 현재 버전 newVersion 이 전달된다.
헬퍼 클래스의 전형적인 구조는 다음가 같다.


    CustomerDatabase

        DatabaseHelper extends SQLiteOpenHelper

            onCreate()
            onOpen()
            onUpgrade()


만약 고객 정보를 관리하는데 데이터베이스를 만든다면 CustomerDatabase 클래스를 새로 정의할 수 있다.
이 클래스는 헬퍼 ㅋㄹ래스를 상속해 만든 내부 클래스가 포함된다.
DatabaseHelper 란 이름으로 정의한 이 헬퍼 클래스엔 onCreate(), onOpen(), onUpgrade() 메소드를 다시 정의한 후
필요한 SQL 을 실행하도록 한다.

헬퍼 클래스를 정의하자. DatabaseHelper 클래스를 다음과 같이 작성한다.


    public class DatabaseHelper extends SQLiteOpenHelper {
        public static String NAME = "employee.db";
        public static int VERSION = 1;

        public DatabaseHelper(Context context) {
            super(context, NAME, null, VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            println("onCreate 호출됨.");

            String sql = "CREATE TABLE IF NOT EXISTS emp(" +
                    "_id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                    "name TEXT, " +
                    "age INTEGER, " +
                    "mobile TEXT)";

            db.execSQL(sql);
        }

        @Override
        public void onOpen(SQLiteDatabase db) {
            println("onOpen 호출됨.");
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            println("onUpgrade 호출됨 : " + oldVersion + " -> " + newVersion);

            if (newVersion > 1) {
                db.execSQL("DROP TABLE IF EXISTS emp");
            }
        }

        public void println(String data) {
            Log.d("DatabaseHelper", data);
        }
    }


SQLiteOpenHelper 클래스를 상속한 DatabaseHelper 클래스는 생성자에서 데이터베이스 이름과 버전 정보를 생성자로 호출한다.
super() 메소드로 생성자에 전달된 CursorFactory 객체엔 null 값으로 지정되어 있다.
데이터베이스가 생성될 때 호출되는 onCreate(), 데이터베이스 열 때 호출되는 onOpen(), 업그레이드 시 호출되는 onUpgrade() 가 구현되고
onCreate() 안에서 테이블을 만든다. 이렇게 만들어진 헬퍼 클래스는 메인 액티비티에서 사용하면 매우 간단해지는 장점이 있다.


    public class DatabaseActivity2 extends AppCompatActivity {
        EditText editText;
        EditText editText2;
        TextView textView;

        DatabaseHelper dbHelper;
        SQLiteDatabase database;
        String tableName;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            ...
        }

        private void createDatabase(String name) {
            println("createDatabase 호출됨.");

            dbHelper = new DatabaseHelper(this);
            database = dbHelper.getWritableDatabase();

            println("데이터베이스 생성함 : " + name);
        }


코드는 SQLiteDatabase 객체 그대로 사용하며 데이터베이스를 필요한 작업을 수행하는 구조로 되었다.
이 상태에서도 앱을 실행하면 그대로 동작된다.


            11-3 데이터 조회

이번엔 데이터베이스를 열어 조회하는 방법을 알아보자.
메인 액티비티에 [데이터 조회하기] 버튼을 하나 더 추가한다.

그리고 메인 액티비티는 다음과 같이 작성한다.


    public class DatabaseActivity3 extends AppCompatActivity {
        ...

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            ...

            Button button3 = findViewById(R.id.button104);
            button3.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    executeQuery();
                }
            });
        }

        ...

        public void executeQuery() {
            println("executeQuery 호출됨.");

            Cursor cursor = database.rawQuery("SELECT _id, name, age, mobile FROM emp", null);
            int recordCount = cursor.getCount();
            println("레코드 개수 : " + recordCount);

            for (int i = 0; i < recordCount; i++) {
                cursor.moveToNext();

                int id = cursor.getInt(0);
                String name = cursor.getString(1);
                int age = cursor.getInt(2);
                String mobile = cursor.getString(3);

                println("레코드#" + i + " : " + id + ", " + name + ", " + age + ", " + mobile);
            }

            cursor.close();
        }

        public void println(String data) {
            textView.append(data + "\n");
        }
    }


데이터를 조회하기 위해 표준 SQL 문의 'select ...' 구문을 사용하게 되는데 이 구문으로 반환되는 Cursor 객체를
받기 위해 rawQuery() 메소드를 실행한다. 즉, executeQuery() 은 결과 값이 없는 SQL 실행방법이고,
rawQuery() 는 결과값을 Cursor 객체로 받을 수 있는 SQL 방법이다.


    public cursor rawQuery(String sql, String[] selectionArgs)


SQL 문으로 쿼리 실행 후 결과값을 Cursor 객체로 받아 테이블의 각 레코드를 순서대로 접근할 수 있다.
moveToNext() 메소드로 다음 레코드를 얻을 수 있다. 따라서 while 문으로 moveToNext() 가 false 값을 반환할 때까지
가져오는 것이 일반적이다. for 구문으로 사용할 경우엔 getCount() 를 이용해 전체 레코드 수를 알 수 있다.


    public abstract int getColumnCount()
    public abstract int getColumnIndex(String ColumnName)
    public abstract String getColumnName(int columnIndex)
    public abstract String[] getColumnNames()

    public abstract int getCount()
    public abstract boolean moveToNext()
    public abstract boolean moveToPrevious()
    public abstract boolean moveToFirst()
    public abstract boolean moveToLast()
    public abstract boolean move(int offset)

    public abstract getString(int columnIndex)
    public abstract getShort(int columnIndex)
    public abstract int getInt(int columnIndex)
    public abstract long getLong(int columnIndex)
    public abstract float getFloat(int columnIndex)
    public abstract double getDouble(int columnIndex)
    public abstract byte[] getBlob(int columnIndex)


SQL 문에서 알고싶은 필드의 인덱스 값이 모를 경우 getColumnIndex() 메소드로 찾을 수 있다.


    SELECT [* | DISTINCT] column_name[, columnname2]
    FROM tablename1 [, tablename2]
    WHERE [condition and | or condition]
    [GROUP BY column-list]
    [HAVING conditions]
    [ORDER BY "column-list" [ASC | DESC]]


커서는 데이터베이스와 마찬가지로 이용 후 close() 메소드로 닫아야 한다.
이제 앱을 실행하여 확인해보자.


            11-5 내용 제공자 이해하기

내용 제공자는 콘텐트 프로바이더라고도 불리며 한 앱에서 관리하는 데이터를 다른 앱에서도 접근할 수 있도록 해준다.
내용 제공자도 앱 요소이기 때문에 시스템에서 관리하여 매니페스트 파일에 등록해야 한다. 이는 보안 때문이다.
가끔 서로 다른 앱의 데이터 접근도 필요한 경우가 있기 때문에 이때 내용 제공자를 사용한다.
다른 앱에게 데이터 접근 통로를 열어줄 수 있다. 이로 공유할 수 있는 데이터들은 다음과 같다.


    데이터베이스
    파일
    SharedPreferences


이 중 데이터베이스에 접근하는 것이 가장 일반적이다. CRUD 동작을 기준으로 하기 때문이다.
내용 제공자를 통한 통로로 접근하려면 콘텐트 리졸버(ContentResolver) 객체가 필요하다.


    SampleProvider      SampleResolver

        insert
        query       ←        content://...
        update
        delete


sample_provider.xml 레이아웃을 만들어 버튼 4개와 스크롤뷰를 추가하여 텍스트뷰를 추가한다.
그리고 메인 액티비티로 다음과 버튼 이벤트 처리만 시행한다.


    public class ProviderActivity extends AppCompatActivity {
        TextView textView;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_provider);

            textView = findViewById(R.id.textView54);

            Button button = findViewById(R.id.button105);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                }
            });

            Button button2 = findViewById(R.id.button106);
            button2.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                }
            });

            Button button3 = findViewById(R.id.button107);
            button3.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                }
            });

            Button button4 = findViewById(R.id.button108);
            button4.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                }
            });
        }

        public void println(String data) {
            textView.append(data + "\n");
        }
    }


이제 DatabaseHelper1 클래스를 새로 만들고 다음과 같이 작성한다.


    public class DatabaseHelper1 extends SQLiteOpenHelper {
        private static final String DATABASE_NAME = "person.db";
        private static final int DATABASE_VERSION = 1;

        public static final String TABLE_NAME = "person";
        public static final String PERSON_ID = "_id";
        public static final String PERSON_NAME = "name";
        public static final String PERSON_AGE = "age";
        public static final String PERSON_MOBILE = "mobile";
        public static final String[] ALL_COLUMNS = { PERSON_ID, PERSON_NAME, PERSON_AGE, PERSON_MOBILE };

        private static final String CREATE_TABLE =
                "CREATE TABLE " + TABLE_NAME + "(" +
                        PERSON_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                        PERSON_NAME + " TEXT, " +
                        PERSON_AGE + " INTEGER, " +
                        PERSON_MOBILE + " TEXT)";

        public DatabaseHelper1(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            db.execSQL(CREATE_TABLE);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME);
            onCreate(db);
        }
    }


DatabaseHelper1 클래스는 SQLiteOpenHelper 클래스를 상속받고 있으며 person.db 파일을 데이터베이스 저장소로 사용하고
그 안에 person 테이블을 만든다.

이제 내용 제공자 클래스를 만든다. PersonProvider 라는 이름의 새로운 클래스를 추가하고 ContentProvider 를 상속하게 한다.
그리고 그 파일 안에 다음 코드를 작성한다. SQLException 은 android.database 를 선택하여 임포트한다.


    public class PersonProvider extends ContentProvider {
        private static final String AUTHORITY = "com.example.secondmadang";
        private static final String BASE_PATH = "person";
        private static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/" + BASE_PATH);

        private static final int PERSONS = 1;
        private static final int PERSON_ID = 2;
        private static final UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

        static {
            uriMatcher.addURI(AUTHORITY, BASE_PATH, PERSONS);
            uriMatcher.addURI(AUTHORITY, BASE_PATH + "/#", PERSON_ID);
        }

        private SQLiteDatabase database;

        @Override
        public boolean onCreate() {
            DatabaseHelper1 helper1 = new DatabaseHelper1(getContext());
            database = helper1.getWritableDatabase();

            return true;
        }

        @Nullable
        @Override
        public Cursor query(@NonNull Uri uri, @Nullable String[] strings1, @Nullable String s,
                            @Nullable String[] strings2, @Nullable String s2) {
            Cursor cursor;
            switch (uriMatcher.match(uri)) {
                case PERSONS :
                    cursor = database.query(DatabaseHelper1.TABLE_NAME,
                            DatabaseHelper1.ALL_COLUMNS,
                            s, null, null, null, DatabaseHelper1.PERSON_NAME + " ASC");

                    break;
                default:
                    throw new IllegalArgumentException("알 수 없는 URI " + uri);
            }
            cursor.setNotificationUri(getContext().getContentResolver(), uri);

            return cursor;
        }

        @Nullable
        @Override
        public String getType(@NonNull Uri uri) {
            switch (uriMatcher.match(uri)) {
                case PERSONS:
                    return "vnd.android.cursor.dir/persons";
                default:
                    throw new IllegalArgumentException("알 수 없는 URI " + uri);
            }
        }

        @Nullable
        @Override
        public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {
            long id = database.insert(DatabaseHelper1.TABLE_NAME, null, values);

            if (id > 0) {
                Uri _uri = ContentUris.withAppendedId(CONTENT_URI, id);
                getContext().getContentResolver().notifyChange(_uri, null);
                return _uri;
            }

            throw new SQLException("추가 실패 -> URI : " + uri);
        }

        @Override
        public int delete(@NonNull Uri uri, @Nullable String s, @Nullable String[] strings) {
            int count = 0;

            switch (uriMatcher.match(uri)) {
                case PERSONS:
                    count = database.delete(DatabaseHelper1.TABLE_NAME, s, strings);
                    break;
                default:
                    throw new IllegalArgumentException("알 수 없는 URI " + uri);
            }
            getContext().getContentResolver().notifyChange(uri, null);

            return count;
        }

        @Override
        public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String s, @Nullable String[] strings) {
            int count = 0;

            switch (uriMatcher.match(uri)) {
                case PERSONS:
                    count = database.update(DatabaseHelper1.TABLE_NAME, values, s, strings);
                    break;
                default:
                    throw new IllegalArgumentException("알 수 없는 URI " + uri);
            }
            getContext().getContentResolver().notifyChange(uri, null);

            return count;
        }
    }


내용 제공자를 만들기 위해 고유값을 가진 content URI 를 만들어야 한다.
여기선 앱 패키지 이름과 person 테이블의 이름을 합쳐 content URI 를 정의했다.


    content://com.example.secondmadang/person/1

    content://      -> 내용 제공자에 의해 제어되는 데이터란 의미
    Authority       -> com.example.secondmadang 부분을 가리키는 특정 제공자 고유 값
    Base Path       -> person 부분을 가리키며 요청할 데이터의 자료형을 결정(여기선 테이블 이름)
    ID              -> 맨 뒤의 1 과 같은 숫자를 가리키며 요청할 데이터 레코드를 지정


PersonProvider 클래스엔 CRUD 메소드들이 정의되어 있다.
UriMatcher 객체는 URI 를 매칭하는데 사용된다. match() 메소드를 호출하면 UriMatcher 에 addURI()
메소드를 이용해서 추가된 URI 즈ㅜㅇ 실행 가능한지 확인해준다.

그리고 이 안의 내용 제공자에 접근하여 ContentResolver 객체도 사용된다.
액티비티에서 getContentResolver() 메소드를 호출하면 ContentResolver 객체를 반환한다.
이 객체로 정의된 CRUD 로 URI 를 파라미터로 전달하면서 조회, 추가, 수정, 삭제 등이 가능하다.
notifyChange() 메소드는 레코드가 추가, 수정, 삭제되었을 때 변경이 일어났음을 알려주는 역할이다.
ContentResolver 객체엔 다양한 메소드가 있지만 주로 CRUD 메소드를 사용한다.

내용 제공자를 이용해 값을 조회하고 싶을 시 query() 메소드를 사용한다.


    Cursor query (
        Uri uri,
        String[] projection,
        String selection,
        String[] selectionArgs,
        String sortOrder
    )


위에서 세번째 파라미터에 조건을 지정한다. null 로 지정하면 where 절이 없다고 생각할 수 있다.
다섯 번째 파라미터에도 null 을 지정하면 정렬이 적용되지 않는다.

내용 제공자를 이용해 값을 추가하고 싶다면 다음과 같이 insert() 메소드를 사용한다.


    Uri insert (
        Uri uri,
        ContentValues values
    )


값 수정은 update() 메소드를 사용한다.


    int update (
        Uri uri,
        ContentValues values,
        String selection,
        String[] selectionArgs
    )


내용 제공자를 이용해 삭제할 시엔 delete() 메소드를 사용한다.


    int update (
        Uri uri,
        String selection,
        String[] selectionArgs
    )


getType() 메소드는 MIME 타입이 무엇인지를 알고 싶을때 사용한다.


    String getType (
        Uri uri
    )


이제 메인 화면에서 각 버튼마다 CRUD 를 적용해준다.


    public class ProviderActivity extends AppCompatActivity {
        TextView textView;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            ...

            Button button = findViewById(R.id.button105);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    insertPerson();
                }
            });

            ...
        }

        public void insertPerson() {
            println("insertPerson 호출됨");

            String uriString = "content://com.example.secondmadang/person";
            Uri uri = new Uri.Builder().build().parse(uriString);

            Cursor cursor = getContentResolver().query(uri, null, null, null, null);
            String[] columns = cursor.getColumnNames();
            println("columns count -> " + columns.length);

            for (int i = 0; i < columns.length; i++) {
                println("#" + i + " : " + columns[i]);
            }

            ContentValues values = new ContentValues();
            values.put("name", "john");
            values.put("age", 20);
            values.put("mobile", "010-1000-1000");

            uri = getContentResolver().insert(uri, values);
            println("insert 결과 -> " + uri.toString());
        }

        public void println(String data) {
            textView.append(data + "\n");
        }
    }


첫 번째 버튼 누를 시 insertPerson() 이 호출되어 Uri 객체를 만들고 ContentResolver 객체의 query() 가 호출하면서
Uri 객체를 파라미터로 전달한다.


    content://com.example.secondmadang/person


문자열에서 Uri 객체를 만들 땐 new 연산자로 Uri.Builder 객체를 만든 후 build() 와 parse() 메소드를 호출하면서
문자열 파라미터를 전달한다.

이제 두 번째 버튼을 눌렀을 때 queryPerson 메소드를 호출하도록 코드를 입력한다.


    public class ProviderActivity extends AppCompatActivity {
        TextView textView;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            ...

            Button button2 = findViewById(R.id.button106);
            button2.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    queryPerson();
                }
            });
            ...
        }
        ...

        public void queryPerson() {
            try {
                String uriString = "content://com.example.secondmadang/person";
                Uri uri = new Uri.Builder().build().parse(uriString);

                String[] columns = new String[] { "name", "age", "mobile" };
                Cursor cursor = getContentResolver().query(uri, columns, null, null, "name ASC");
                println("query 결과 : " + cursor.getCount());

                int index = 0;
                while (cursor.moveToNext()) {
                    String name = cursor.getString(cursor.getColumnIndex(columns[0]));
                    int age = cursor.getInt(cursor.getColumnIndex(columns[1]));
                    String mobile = cursor.getString(cursor.getColumnIndex(columns[2]));

                    println("#" + index + " -> " + name + ", " + age + ", " + mobile);
                    index += 1;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        ...


첫 번째 버튼 누를 시와 비슷하다. 먼저 Uri 객체를 만들어 ContentResolver 객체의 query 메소드를 호출한다.

이제 세 번째와 네 번째로 updatePerson() 과 deletePerson() 메소드를 호출하는 코드를 작성한다.


    public class ProviderActivity extends AppCompatActivity {
        TextView textView;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            ...

            Button button3 = findViewById(R.id.button107);
            button3.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    updatePerson();
                }
            });

            Button button4 = findViewById(R.id.button108);
            button4.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    deletePerson();
                }
            });
        }

        ...

        public void updatePerson() {
            String uriString = "content://com.example.secondmadang/person";
            Uri uri = new Uri.Builder().build().parse(uriString);

            String selection = "mobile = ?";
            String[] selectionArgs = new String[] { "010-1000-1000" };
            ContentValues updateValue = new ContentValues();
            updateValue.put("mobile", "010-2000-2000");
            int count = getContentResolver().update(uri, updateValue, selection, selectionArgs);
            println("update 결과: " + count);
        }

        public void deletePerson() {
            String uriString = "content://com.example.secondmadang/person";
            Uri uri = new Uri.Builder().build().parse(uriString);

            String selection = "name = ?";
            String[] selectionArgs = new String[] { "john" };

            int count = getContentResolver().delete(uri, selection, selectionArgs);
            println("delete 결과: " + count);
        }
        ...


업데이트 메소드에는 'mobile = ?' 조건으로 '010-1000-1000' 을 넣었고
딜리트 메소드에는 'name = ?' 조건으로 'john' 을 넣었다.
네 개의 버튼을 눌렀을 때 실행 기능을 모두 추가하였으니 이제 매니페스트에 내용 제공자를 등록한다.


    <permission android:name="com.example.secondmadang.READ_DATABASE" android:protectionLevel="normal" />
    <permission android:name="com.example.secondmadang.WRITE_DATABASE" android:protectionLevel="normal" />

    <application
        ...

        <provider
            android:authorities="com.example.secondmadang"
            android:name=".PersonProvider"
            android:exported="true"
            android:readPermission="com.example.secondmadang.READ_DATABASE"
            android:writePermission="com.example.secondmadang.WRITE_DATABASE" />


<permission> 태그는 권한 새로 정의할 때 사용되는 태그로 여기선 두 개를 정의하였다.
com.example.secondmadang.READ_DATABASE, com.example.secondmadang.WRITE_DATABASE
를 설정하였으며 protectionLevel 속성 값은 normal 로 설정되었다. 그리고
<application> 태그에 <provider> 태그를 추가하고 authorities 와 name, readPermission, writePermission 등의 속성을 추가한다.


            11-6 앨범과 연락처 조회

실제 앱을 만들 때는 내용 제공자를 사용하지 않는 경우도 많다. 직접 만들기보다 사용하는 경우가 더 많을 것이다.
이번 단락엔 제공자를 이용해 앨범과 연락처 정보를 조회해본다.

먼저 앨범에 저장된 사진을 조회해보기 위해 sample_album 을 추가한다.
그리고 중앙에 이미지를 꽉 채우고 버튼을 추가한다. 그후 메인 액티비티를 다음과 같이 작성한다.


    public class AlbumActivity extends AppCompatActivity {
        ImageView imageView;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_album);

            imageView = findViewById(R.id.imageView12);

            Button button = findViewById(R.id.button109);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    openGallery();
                }
            });
        }

        public void openGallery() {
            Intent intent = new Intent();
            intent.setType("image/*");
            intent.setAction(Intent.ACTION_GET_CONTENT);

            startActivityForResult(intent, 101);
        }
    }


버튼 클릭시 openGallery() 를 실행하게 한다. openGallery() 에는 인텐트 객체를 만들고
Intent.ACTION_GET_CONTENT 라는 액션 정보를 설정한다. 인탠트 객체의 setAction() 메소드를 사용하면 액션을 지정할 수 있다.
그리고 setType() 메소드를 이용해 image/* 란 값을 지정한다.
이렇게 MIME 타입이 image 로 시작하는 데이터를 가져오라는 의미가 된다.
startActivityForResult() 메소드를 호출하면서 앨범 사진을 선택할 수 있는 화면을 띄워준다.

앨범 선택 후 onActivityResult() 메소드로 그 결과 값을 전달받을 수 있다.
openGallery() 메소드 아래에 onActivityResult() 메소드를 추가한다.


    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == 101) {
            if (resultCode == RESULT_OK) {
                Uri fileUri = data.getData();

                ContentResolver resolver = getContentResolver();

                try {
                    InputStream instream = resolver.openInputStream(fileUri);
                    Bitmap imgBitmap = BitmapFactory.decodeStream(instream);
                    imageView.setImageBitmap(imgBitmap);

                    instream.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }


onActivityResult() 메소드가 자동 호출되면 data 란 변수를 참조하여 인텐트 객체를 사용할 수 있다.
이 인텐트의 getData() 메소드를 호출하면 Uri 자료형의 값이 반환된다. 이 값은 ContentResolver 를 이용해
참조할 수 있는 이미지 파일을 가리킨다. 그래서 openInputStream() 메소드로 전달한다.
이후 반환된 InputStream 객체로 BitmapFactory.decodeStream() 메소드로 Bitmap 객체를 만들어 사진을 보이게 한다.

이미지 파일은 보통 SD 카드에 저장되어 매니페스트 파일에 READ_EXTERNAL_STORAGE 권한을 추가해야 한다.

다음은 sample_contacts.xml 파일을 만드어 연락처를 가져오는 실습을 시행한다.
그리고 메인 액티비티는 다음과 같이 작성한다.


    public class ContactsActivity extends AppCompatActivity {
        TextView textView;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_contacts);

            textView = findViewById(R.id.textView55);

            Button button = findViewById(R.id.button110);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    chooseContacts();
                }
            });
        }

        public void chooseContacts() {
            Intent contactsPickerIntent = new Intent(Intent.ACTION_PICK,
                    ContactsContract.Contacts.CONTENT_URI);
            startActivityForResult(contactsPickerIntent, 101);
        }

        @Override
        protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
            super.onActivityResult(requestCode, resultCode, data);

            if (resultCode == RESULT_OK) {
                if (requestCode == 101) {
                    try {
                        Uri contactsUri = data.getData();
                        String id = contactsUri.getLastPathSegment();

                        getContacts(id);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        public void println(String data) {
            textView.append(data + "\n");
        }
    }


버튼 클릭 시 chooseContacts() 메소드를 호출하여 인텐트 객체를 만들어 startActivityForResult() 메소드로 전달한다.

인텐트 객체의 첫 파라미터 Intent.ACTION_PICK 으로 액션 정보를 전달하고 두 번째 파라미터론 ContactsContract.Contacts.CONTENT_URI
를 전달한다. 이 값은 연락처 정보를 조회하는 데 사용되는 URI 값이다. startActivityForResult() 메소드가 호출되면
연락처를 선택할 수 있는 화면이 표시된다. onActivityResult() 메소드가 자동으로 호출되며
getData() 메소드로 연락처 정보들을 Uri 객체로 반환된다. 이 Uri 객체는 getLastPathSegment() 메소드로 id 값을 확인한다.
id 값을 확인하는 이유는 연락처 상세 정보가 다른 곳에 저장되어 있기 때문이다.
getContacts() 메소드를 추가해보자.


    public void getContacts(String id) {
        Cursor cursor = null;
        String name = "";

        try {
            cursor = getContentResolver().query(ContactsContract.Data.CONTENT_URI,
                    null,
                    ContactsContract.Data.CONTACT_ID + "=?",
                    new String[] { id },
                    null);

            if (cursor.moveToFirst()) {
                name = cursor.getString(cursor.getColumnIndex(ContactsContract.Data.DISPLAY_NAME));
                println("Name : " + name);

                String columns[] = cursor.getColumnNames();
                for (String column : columns) {
                    int index = cursor.getColumnIndex(column);
                    String columnOutput = ("#" + index + " -> [" + column + "] " + cursor.getString(index));
                    println(columnOutput);
                }
                cursor.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


getContacts() 메소드의 ContentResolver 객체의 query() 메소드로 연락처 정보들을 가져온다.
ContactsContract.Data.CONTENT_URI 는 연락처 정보들을 조회할 수 있는 Uri 이다.
세 번째 파라미터로 id 컬럼을 =? 으로 ContactsContract.Data.CONTACT_ID 상수를 확인하기 위해 사용한다.
그리고 연락처의 이름 컬럼들은 ContactsContract.Data.DISPLAY_NAME 상수로 확인할 수 있다.

연락처 조회 권한을 추가한다.


    <uses-permission android:name="android.permission.READ_CONTACTS" />
    <uses-permission android:name="android.permission.WRITE_CONTACTS" />


