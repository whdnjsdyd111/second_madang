안드로이드는 다음 대표적인 레이아웃이 있다.


    레이아웃 이름         설명

    제약 레이아웃         제약 조건 기반 모델. 제약 조건으로 화면을 구성하며 자동 설정되는 디폴트 레이아웃
    ConstraintLayout

    리니어 레이아웃       박스 모델. 한 쪽 방향으로 차례대로 뷰를 추가하며 구성. 뷰가 차지할 수 있는 사각형 영역 할당
    LinearLayout

    상대 레이아웃         규칙 기반 모델. 부모 컨테이너나 다른 뷰와 상대적 위치로 화면을 구성. 제약 레이아웃을 사용하게 되어 권장하지 않음
    RelativeLayout

    프레임 레이아웃       싱글 모델. 가장 상위에 있는 하나의 뷰 또는 뷰그룹만 보여주는 방법.
    FrameLayout          여러 뷰가 들어가면 중첩하여 쌓임. 가장 단순하며 여러 뷰를 중첩하여 뷰를 전환하며 보여주느 방식

    테이블 레이아웃       격자 모델. 격자 모양의 배열을 사용하여 화면을 구성하는 방법.
    TableLayout          HTML 에 많이 사용하는 정렬 방식과 유사하지만 많이 사용하진 않음


제약은 앞서 공부했고 디폴트 레이아웃이다.

리니어 레이아웃은 박스 모델이며 차근차큰 뷰를 쌓을 수 있어 쉽다.
단순하면서도 복잡한 화면도 만들 수 있다.
방향을 설정하면 설정한 방향으로 쌓을 수 있으며 뷰를 더불어 레이아웃도 쌓을 수 있다.

상대 레이아웃은 제약 레이아웃과 비슷하지만 현재 제약을 더 많이 사용하며 부모 컨테이너, 즉
부모 레이아웃과의 상대적 위치 또는 다른 뷰와의 상대적 위치를 이용하여 배치하는 레이아웃이다.

프레임 레이아웃은 가장 위의 레이아웃의 뷰만 보여주며 여러 뷰나 뷰그룹을 추가하면 아래에 중첩되어 쌓인다.
한 뷰만 보여주다가 그 아래에 중첩하여 숨긴 상태로 나중에 특정 뷰를 보이게하거나 보이지않게 전환할 수 있어
많이 사용된다.

테이블 레이아웃은 격자 형태로 만들어주는 레이아웃이다.
HTML 사용 방식과 유사하며 실용적이며 제약과 리니어 레이아웃만으로도 배치할 수 있어 많이 사용되진 않는다.

스크롤뷰(ScrollView)는 하나의 뷰나 뷰그룹을 넣을 수 있고 내용이 많으면 스크롤을 만들 수 있게 도와준다.
그래서 단순 뷰보다 뷰 그룹을 담는 역할을 한다고 볼 수 있다.


        뷰 영역 알아보기

공통 특성을 간단하게 알아보자면 레이아웃에 추가될 때 보이지 않는 뷰 테두리(Border)가 있는 것을 생각해야 한다.
흔히 뷰의 영역(Box)라고 하는데 뷰 테두리를 기준으로 바깥쪽과 안쪽 공간을 띄운다.

테두리 바깥과 안쪽으로 보이지 않는 공간도 있는데 바깥 공간을 마진(Margin), 안쪽 공간을 패딩(Padding)이라고 한다.


    layout_marin[Top, Bottom, Left, Right, ]
    padding[Top, Bottom, Left, Right, ]


위와 같이 속성을 지정할 수 있다.


        뷰 배경색

뷰는 기본적으로 배경을 먼저 그리고 정보들을 그리며 이 배경색을 지정할 수 있다.
여러 형태로 지정할 수 있는데 XML 에서는 # 기호를 앞에 붙이고 ARGB(Alpha, Red, Green, Blue) 순서로 기록한다.
16진수 값 지정 대는 여러 포맷을 사용할 수 있는데 색상 기록하는 방법은 다음과 같다.


    [Format]

    #RGB
    #ARGB
    #RRGGBB
    #AARRGGBB


#ff0000 값은 빨강, #00ff00 값은 녹색, #0000ff 는 파란색이다.
알파값까지 더하면 #00ff0000 은 보이지 않는 빨강, #88ff0000 은 반투명한 빨강색이 된다.


    조언

    배경을 이미지로 지정할 수 있으며 'res/drawable' 폴더에 이미지를 넣는 것이 일반적이다.
    이미지 확장자는 .PNG 처럼 대문자로 저장하면 오류를 발생하며 주의하자.

    android:background="@drawable/house" 와 같이 지정할 수 있다.


            02-2 리니어 레이아웃


        리니어 레이아웃 방향 설정

activity_linear.xml 파일을 만들고 최상위 레이아웃을 리니어로 변경한다.
리니어 레이아웃을 선택하고 속성 창에서 orientation 속성의 값을 vertical 로 선택한다.

세 개의 버튼을 추가해보자. 코드를 살펴보면 다음과 같다.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">

        <Button
            android:id="@+id/button12"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Button" />

        <Button
            android:id="@+id/button13"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Button" />

        <Button
            android:id="@+id/button14"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Button" />
    </LinearLayout>


가로방향으로 쌓고 싶다면 orientation 속성 값을 horizontal 로 수정하면 된다.


    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="horizontal">


수정하면 버튼이 하나만 보이는데 match_parent 때문에 한 버튼만 공간을 모두 차지하여 그렇다.
버튼의 layout_width 속성값을 wrap_content 으로 바꿔보자. 이후에는 세 버튼이 차례로 나타나는 것을 확인할 수 있다.


        자바 코드 화면 구성하기

지금까지는 XML 파일로 만든 레이아웃을 MainActivity.java 를 통하여 두 파일이 연결되어 화면을 만들게되었다.
즉, 레이아웃과 자바 코드를 분리하여 사용하였다.
하지만 레이아웃을 미리 만들 수 없거나 필요할 때마다 레이아웃을 만들어야 하는 경우는 자바 코드로 구성해야하는 상황도 있다.
예로 입력한 데이터나 네트워킹으로 받은 데이터 유형에 따라 화면 구성을 바꾸는 작업은 자바 코드로 하는 것이 효율적이다.

MainActivity.java 파일을 복사하여 LayoutCodeActivity.java 파일을 만들고 수정해보자.


    public class LayoutCodeActivity extends AppCompatActivity {

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);

            LinearLayout mainLayout = new LinearLayout(this);   // new 연산으로 새로운 리니어 레이아웃을 만들고
            mainLayout.setOrientation(LinearLayout.VERTICAL);           // 방향 설정

            LinearLayout.LayoutParams params =
                    new LinearLayout.LayoutParams(
                            LinearLayout.LayoutParams.MATCH_PARENT,     // new 연산자로 레이아웃 안에 추가될 뷰들에
                            LinearLayout.LayoutParams.WRAP_CONTENT      // 설정할 파라미터 생성
                    );

            Button button1 = new Button(this);  // 버튼 파라미터를 설정하고 레이아웃에 추가
            button1.setText("Button1");
            button1.setLayoutParams(params);
            mainLayout.addView(button1);

            setContentView(mainLayout); // 새로 만든 레이아웃을 화면에 설정
        }
    }


처음으로 보일 화면은 메인 액티비티로서, 프로젝트 생성 시 자동으로 메인 액티비티를 만들고 그 액티비티를 위한
자바 소스 파일인 MainActivity.java 가 된다. 그리고 AndroidManifest.xml 파일에 자동 등록된다.
이 메인 액티비티를 이제 LayoutCodeActivity.java 로 변경하면 앱을 실행 시 새로운 액티비티가 나타난다.
AndroidManifest.xml 파일의 내용을 수정한다.


        <activity android:name=".LayoutCodeActivity">   <-- 이부분
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>


이제 실행하면 버튼 하나가 들어간 화면을 볼 수 있는데 이때 버튼의 글자를 소문자로 입력했다면
자동으로 대문자로 바뀌어 표시된다.


        화면 생성 과정 분석하기

LayoutCodeActivity.java 에서 onCreate() 메소드 안에 setContentView() 를 호출하는 부분이 있는데,
MainActivity.java 의 파라미터 R.layout.activity_main 처럼 정의된 리소스가 아닌
자바 코드에서 만든 객체를 가리키고 있다. 이렇게 레이아웃 객체를 setContentView() 메소드에
파라미터로 전달하면 그 레이아웃 화면으로 표시된다.

XML 레이아웃에서 정의할 수 있는 대부분의 속성은 자바 소스 코드에서도 사용할 수 있도록 제공된다.
예로 리니어는 new LinearLayout() 으로 생성하고 setOrientation() 메소드로 방향 값을 LinearLayout.VERTICAL 로 전달하여
세로 방향으로 뷰를 추가할 수 있다.

this 키워드가 눈에 띄는데, context 객체가 전달된 것으로 new 연산자로 생성한 뷰 객체를 만들때 항상 Context 객체가
전달되어야 한다. 이것은 자바 표준이 아닌 안드로이드의 특징이다.
AppCompatActivity 클래스는 Context 를 상속하니 this 로 Context 를 전달할 수 있다.
만약 Context 를 상속받지 않은 클래스는 getApplicationContext 라는 메소드를 호출하여 앱에서 참조 가능한 Context 객체를 사용할 수도 있다.


    조언

    안드로이드에서 Context 객체는 UI 구성 요소인 뷰에 대한 정보를 쉽게 확인하고나 설정할 수 있도록
    뷰의 생성자에 Context 를 전달하도록 한다.


뷰를 만들어 뷰그룹에 추가할 때는 뷰 배치를 위한 속성을 설정하는 LayoutParams 객체를 사용한다.
LayoutParams 객체를 새로 만들 때는 반드시 가로 세로를 설정해야 하며, 이때 두 가지 상수인
LayoutParams.MATCH_PARENT 와 LayoutParams.WRAP_CONTENT 중 하나를 사용할 수 있다. 필요시엔 값을 직접 숫자로 설정할 수도 있다.

레이아웃에 뷰를 추가하려면 addView() 메소드를 사용하면 된다.
addView() 메소드로 버튼을 추가하고 레이아웃 설정을 위해 버튼 객체의 setLayoutParams() 메소드를 사용했다.


        뷰 정렬하기

리니어 레이아웃에서는 정렬 방향을 지정할 수 있는데 이때 사용하는 용어는 일반적인 정렬(align) 가 아닌
gravity 라는 속성 이름을 사용한다. 어느쪽에 무게 중심을 줄지로 이해할 수 있다.


    정렬 속성           설명

    layout_gravity      부모 컨테이너의 여유 공간이 있으면 여유 공간 안에 뷰를 정렬
    gravity             뷰 안에 표시할 내용을 정렬


        뷰 정렬 속성 layout_gravity

새 레이아웃 gravity.xml 을 생성하여 레이아웃을 LinearLayout 으로 만든다.
버튼을 세 개 만들어서 모든 속성을 wrap_content 으로 지정하고 각각의 layout_gravity 값을 left, center, right 로 지정한다.
그럼 각 버튼은 지정된 방향 쪽으로 중심이 가게된다.


        내용물 정렬 속성 gravity

이번엔 gravity 속성을 적용해보자. gravity 속성의 값은 layout_gravity 와 같으며,
필요할 경우 | 연산자로 여러 값을 설정할 수 있다. 주의할 점은 | 양쪽에 공백이 없어야한다.

다음엔 세 개의 텍스트뷰를 추가한다.


    <TextView
        android:id="@+id/textView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:gravity="left"
        android:textColor="#ffff0000"
        android:textSize="32sp"
        android:text="TextView" />

    <TextView
        android:id="@+id/textView2"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:gravity="right"
        android:textColor="#ffff0000"
        android:textSize="32sp"
        android:text="TextView" />

    <TextView
        android:id="@+id/textView3"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:gravity="center_horizontal|center_vertical"
        android:textColor="#ffff0000"
        android:textSize="32sp"
        android:text="TextView" />


각각의 텍스트 뷰는 gravity 를 준 방향쪽으로 텍스트가 이동되어 있는 것을 볼 수 있다.
세 번째 텍스트 뷰는 "center_horizontal|center_vertical" 값으로 두 가지 설정을 같이 준것을 확인할 수 있다.

gravity 속성은 다음과 같은 속성 값을 부여할 수 있다.


    정렬 속성 값                             설명

    top, bottom, left, right                네 방향으로 중 한 방향으로 배치
    center_vertical, center_horizontal      수직 또는 수평 방향으로 중앙에 배치
    fill_vertical, fill_horizontal          수직 또는 수평 방향으로 여유 공간만큼 배치
    center                                  수직, 수평의 중앙에 배치
    fill                                    수직, 수평 방향으로 여유 공간 만큼 배치
    clip_vertical, clip_horizontal          대상 상하 또는 좌우 길이가 여유공간보다 클 경우 남는 부분 자르기


텍스트가 옆의 텍스트뷰나 버튼 높이와 맞이 않는 경우가 종종 있는데 이때는 baselineAligned 속성을 사용할 수 있다.

baseline.xml 으로 새 레이아웃을 생성해보자.


<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="horizontal">

    <TextView
        android:id="@+id/textView4"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="큰 글씨"
        android:textColor="#ffff0000"
        android:textSize="40sp" />

    <TextView
        android:id="@+id/textView5"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="중간 글씨"
        android:textColor="#ff00ff00"
        android:textSize="20sp" />

    <Button
        android:id="@+id/button18"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="작은 글씨"
        android:textColor="#ff0000ff"
        android:textSize="14sp" />
</LinearLayout>


각 요소들을 추가할 때마다 layout_weight 의 값을 지우면서 생성하자.
위와 같이 생성하면 텍스트 아래 바닥면을 똑같이 맞추려고 하기 때문에 세 요소가 서로 맞지않다.
baselineAligned 값의 디폴트가 true 이기 때문인데 해당 값을 false 로 수정해보자.


    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="horizontal"
        android:baselineAligned="false">    <-- 이부분


이제 세 요소 모두 높이가 맞춰진 것을 볼 수 있다. 이는 속성 창에서도 체크박스로 지정할 수 있다.
baselineAligned 속성으로 정렬을 맞추면 텍스트 정렬이 우선이기 때문에 이상하게 배치될 수도 있으니 신중해야 한다.


        뷰의 마진과 패딩 설정

부모 컨테이너에 공간이 남으면 새 뷰를 추가하여 칸을 채우거나 정렬 속성으로 위치를 지정할 수 있다.
근데 모든 뷰가 꽉 채울경우 서로 붙어 이상할 수 있는데, 이런 여백을 마진 값으로 조절할 수 있다.

뷰 영역은 테두리선으로 표시되며 뷰 공간을 셀(Cell) 이라 한다.
버튼이나 텍스트뷰를 위젯이라 불러 이 공간을 위젯셀 이라고도 부른다.
테두기 기준으로 바깥 공간을 마진이라하며 layout_margin 으로 지정할 수 있고
뷰 안의 내용물의 공간은 패딩(Padding)이라 하며 이것은 padding 속성으로 지정할 수 있다.

마진이나 패딩은 상하좌우로 조절할 수 있으며 padding[Top, Bottom, Right, Left, ] 속성으로 지정할 수 있다.
마진은 layout_margin[Top, Bottom, Right, Left, ]을 사용한다.

'/res/layout' 에 padding.xml 파일을 만든다.


    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <TextView
            android:id="@+id/textView6"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="#ffffff00"
            android:padding="20dp"
            android:text="TextView"
            android:textSize="24sp" />

        <TextView
            android:id="@+id/textView7"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="10dp"
            android:background="#ff00ffff"
            android:text="TextView"
            android:textSize="24sp" />

        <TextView
            android:id="@+id/textView8"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="#ffff00ff"
            android:padding="20dp"
            android:text="TextView"
            android:textSize="24sp" />
    </LinearLayout>


첫 번째와 세 번째는 패딩값을 20dp, 두 번째는 마진값을 10dp 로 약간 떨어뜨렸다.
이번엔 마진값과 패딩값을 50dp 로 늘려보자. 그러면 수평 방향으로 여유공간이 없어서 세 번째 텍스트뷰는
밀리는 현상이 발생한다. 앞으로 남은 공간이 충분한지 고려해야할 것이다.


        여유 공간을 분할하는 layout_weight 속성

여유 공간은 layout_weight 속성으로 분할 할 수 있으며 숫자 값을 넣어서 분할 비율을 조절할 수 있다.
두 개의 뷰에 1과 2를 부여하면 하나는 1/3, 다른 하나는 2/3 으로 비율을 갖게 된다.

주의할 점은 layout_width 과 layout_height 은 wrap_content 나 숫자값으로 지정되어아 하는 점이다.
match_parent 로 지정하면 다른 결과가 나타날 것이다.

'/res/layout' 폴더에 weight.xml 파일을 만들어보자.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:orientation="vertical" android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="horizontal">

            <TextView
                android:id="@+id/textView9"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:background="#ffffff00"
                android:text="TextView"
                android:textColor="#ffff0000"
                android:textSize="24dp" />

            <TextView
                android:id="@+id/textView10"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:background="#ff00ffff"
                android:text="TextView"
                android:textColor="#ffff0000"
                android:textSize="24dp" />
        </LinearLayout>
    </LinearLayout>


최상위 레이아웃에 리니어를 추가하고 그 안에 두 개의 텍스트 뷰를 넣고 layout_weight 을 똑같이 1로 해주었다.
두 텍스트 뷰의 길이는 똑같아 졌으며 여유 공간을 더해도 똑같은 길이를 가진다.
레이아웃을 하나 더 추가하고 텍스트 뷰를 똑같이 추가한 다음 layout_weight 값을 1과 2로 지정해보자.


    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="horizontal">

        <TextView
            android:id="@+id/textView9"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:background="#ffffff00"
            android:text="TextView"
            android:textColor="#ffff0000"
            android:textSize="24dp" />

        <TextView
            android:id="@+id/textView10"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_weight="2"
            android:background="#ff00ffff"
            android:text="TextView"
            android:textColor="#ffff0000"
            android:textSize="24dp" />
    </LinearLayout>


이번에는 여유공간이 1/3, 2/3 으로 분할되어 할당되는 것을 볼 수 있다.
이번에도 똑같이 두 텍스트 뷰를 만들고 1:2 공간으로 나누어 layout_width 속성을 0dp 를 줘보자.


    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <TextView
            android:id="@+id/textView13"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:background="#ffffff00"
            android:text="TextView"
            android:textColor="#ffff0000"
            android:textSize="24dp" />

        <TextView
            android:id="@+id/textView14"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="2"
            android:background="#ff00ffff"
            android:text="TextView"
            android:textColor="#ffff0000"
            android:textSize="24dp" />
    </LinearLayout>


공간 분할 목적이라면 layout_width 이나 layout_height 값을 0dp 로 만드는 것이 좋다.


            02-3 상대 레이아웃 사용

상대 레이아웃은 권장하지 않으며 제약 레이아웃으 더 좋다.
상대적인 위치를 이용하여 뷰의 위치를 결정할 수 있다.
'res/layout' 폴더에 relative_main.xml 파일을 만들고 RelativeLayout 을 선택한다.

버튼을 두 개 추가하고 첫 버튼의 layout_width 와 layout_height 속성 모두 match_parent 로 설정하고
두 번째 버튼은 바닥과 붙인 후 layout_width 은 match_parent, layout_height 은 wrap_content 으로 설정한다.

이렇게 상대 레이아웃은 상하좌우 드래그로 지정할 수 있다.
그리고 layout_alignParent[Top, Bottom, Right, Left] 으로 부모 레이아웃에 붙을 벽면을 지정할 수 있다.
이제 버튼을 하나 더 추가하겠다.


    <Button
        android:id="@+id/button19"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_above="@id/button20"
        android:layout_below="@id/button21"
        android:background="#ff0088ff"
        android:text="Button" />

    <Button
        android:id="@+id/button20"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:text="Button" />

    <Button
        android:id="@+id/button21"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_marginTop="7dp"
        android:text="Button" />


layout_above 와 layout_below 를 살펴볼 수 있는데, 이는 상대적인 위치로 부모 컨테이너가 아닌
다른 뷰와의 상대적 위치로 배치할 수 있다. 속성들은 다음과 같다.


    layout_alignParent[Top, Bottom, Left, Right] - 부모 컨테이너에 지정된 방향으로 맞춤
    layout_centerHorizontal - 부모 컨테이너의 수평 방향 중앙에 배치
    layout_centerVertical - 부모 컨테이너의 수직 방향 중앙에 배치
    layout_centerParent - 부모 컨테이너 수평과 수직 방향 중앙에 배치
    layout_above - 지정한 뷰 위쪽에 배치
    layout_below - 지정한 뷰 아래쪽에 배치
    layout_to[Left, Right]Of - 지정한 뷰의 왼, 오른쪽에 배치
    layout_align[Top, Bottom, Left, Right, Baseline] - 지정한 뷰에 지정한 방향에 배치


            02.4 테이블 레이아웃

테이블 레이아웃 안에 TableRow 란 태그가 여럿 있는데 한 행을 뜻한다.
TableRow 안에 여러 뷰가 들어가고 이 뷰들은 각각 하나의 열이 된다.

'res/layout' 폴더에 tableLayout_main.xml 을 만들고 LinearLayout 으로 선택한다.
최상위 레이아웃을 LinearLayout 으로 하고 두 테이블 레이아웃을 둔다.
첫 번째 테이블 레이아웃의 두 table row 에 각각 버튼을 세 개씩 추가한다.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent">

            <TableRow
                android:layout_width="match_parent"
                android:layout_height="match_parent" >

                <Button
                    android:id="@+id/button24"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Button" />

                <Button
                    android:id="@+id/button23"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Button" />

                <Button
                    android:id="@+id/button22"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Button" />
            </TableRow>

            <TableRow
                android:layout_width="match_parent"
                android:layout_height="match_parent" >

                <Button
                    android:id="@+id/button27"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Button" />

                <Button
                    android:id="@+id/button26"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Button" />

                <Button
                    android:id="@+id/button25"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Button" />
            </TableRow>

            <TableRow
                android:layout_width="match_parent"
                android:layout_height="match_parent" />

            <TableRow
                android:layout_width="match_parent"
                android:layout_height="match_parent" />
        </TableLayout>

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent">

            <TableRow
                android:layout_width="match_parent"
                android:layout_height="match_parent" />

            <TableRow
                android:layout_width="match_parent"
                android:layout_height="match_parent" />

            <TableRow
                android:layout_width="match_parent"
                android:layout_height="match_parent" />

            <TableRow
                android:layout_width="match_parent"
                android:layout_height="match_parent" />
        </TableLayout>
    </LinearLayout>


위와 같은 코드가 생성되는데, 세 버튼 추가 후 오른쪽 공간이 없도록 하고 싶을 때는 <TableLayout> 태그에
stretchColumns 속성을 추가한다. 여유공간을 모두 채우고 싶다면 0 으로 지정하고,
이는 인덱스를 뜻하며 두 번째 컬럼이 여유 공간을 모두 차지하게 하고싶을 땐 "0, 1" 으로 지정한다.
이 속성에 "0, 1, 2" 로 설정한다. 그럼 세 버튼으로 여유 공간이 모두 채워질 것이다.

대표 속성으로 stretchColumns 외에 shrinkColumns 가 존재하는데 이 두 속성으로 자동으로 축소 하거나
확장할 수 있다. shrinkColumns 속성은 부모 컨테이너 폭에 맞춰 자동으로 강제 축소한다.

각 컬럼에 layout_column 이나 layout_span 을 지정할 수도 있다.
위 테이블 로우엔 0, 1, 2 컬럼 인덱스가 부여됐는데, layout_column 을 지정하면 그 순서로 설정할 수 있다.
layout_span 은 여러 컬럼을 차지하여 만들 수도 있다.

세번째 로우에 텍스트뷰와 버튼을 만들고 텍스트 뷰엔 layout_span 을 2로 지정한다.
이렇게 테이블 레이아웃은 많이 사용되진 않지만 격자 형태로 쓰기위해 이용된다.


            02-5 프레임 레이아웃과 뷰 전환

프레임은 중첩 기능으로 하나 이상의 뷰를 추가할 때마다 추가된 순서로 쌓인다.
가장 먼저 추가한 뷰는 아래로, 다음부터 위에 쌓인다. 뒤로 밀려난 뷰는 보이지 않는 가시성을 띈다.
이런 여러 뷰를 전환할 수도 있다.

자바 소스에선 addView 메소드로 추가할 수 있고 가시성 속성을 보이거나 안보이게 전환할 수 있다.
이 속성은 visibility 이며 visible, invisible 또는 gone 중 설정할 수 있다.
이는 자바 코드에선 setVisibility 메소드를 사용한다.

'res/layout' 폴더에 frame_layout_main 파일을 만든다.
버튼을 누르면 이미지가 전환되는 기능을 만들기 위해 리니어 레이아웃에 버튼을 넣고 밑에
프레임 레이아웃을 추가하고 이미지 두개를 중첩하여 넣는다
이미지는 'res/drawable' 에 아무 png 이미지를 두 개 넣는다.


<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:orientation="vertical" android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Button
        android:id="@+id/button29"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="center"
        android:onClick="onButton1Clicked"
        android:text="이미지 바꾸기" />

    <FrameLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <ImageView
            android:id="@+id/imageView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="invisible"
            app:srcCompat="@drawable/aa" />

        <ImageView
            android:id="@+id/imageView2"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="visible"
            app:srcCompat="@drawable/asdasd" />
    </FrameLayout>
</LinearLayout>


    조언

    프로젝트 폴더에 이미지는 'res/drawable' 에 추가하여야 하며 영문 대문자가 들어가면 오류가 발생 할 수
    있다는 점을 주의해야 한다.


버튼에는 onButton1Clicked 이란 클릭 속성을 두고
두 개의 이미지를 추가 한 후에는 각각 visibility 속성에 visible invisible 를 각각 설정한다.
이제 자바 코드에서 누를 때마다 두 이미지의 가시성을 전환해보자.


    public class FrameCodeActivity extends AppCompatActivity {
        ImageView imageView;
        ImageView imageView2;

        int imageIndex = 0;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.frame_layout_main);

            imageView = findViewById(R.id.imageView);
            imageView2 = findViewById(R.id.imageView2);
        }

        public void onButton1Clicked(View v) {
            changeImage();
        }

        private void changeImage() {
            if(imageIndex == 0) {
                imageView.setVisibility(View.VISIBLE);
                imageView2.setVisibility(View.INVISIBLE);

                imageIndex = 1;
            } else {
                imageView.setVisibility(View.INVISIBLE);
                imageView2.setVisibility(View.VISIBLE);

                imageIndex = 0;
            }
        }
    }


    조언

    XML 레이아웃엔 id 소스 코드를 참조할 수 있다. "@+id/아이디" 로 부여하면 해당 값을 R.id.아이디 로 참조할 수 있다.

    - XML -> @+id/아이디
    - 자바 -> R.id.아이디


    조언

    setContentView 란 메소드를 통해 파라미터로 XML 파일의 뷰들을 전달하는데
    findViewById 란 메소드로 ID 를 이용해 뷰를 찾을 수 있다.


위에선 changeImage() 메소드를 통해 두 이미지는 View.VISIBLE 또는 View.INVISIBLE 상수 값으로
보였다 안보이게 하는 것을 볼 수 있다.


    조언

    뷰 페이저를 이용하면 뷰 전환이 쉽다.
    View Pager 에 관한 설명은 뒷 부분에서 한다.


            02-6 스크롤 뷰 사용하기

한보이는 영역까지 스크롤로 볼 수 있는 뷰이다. 'res/drawable' 의 이미지를 사용하여 레이아웃에 넣어보자.
먼저 scroll_layout_main.xml 을 만들자.


    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        android:orientation="vertical" android:layout_width="match_parent"
        android:layout_height="match_parent">

        <Button
            android:id="@+id/button30"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:text="Button" />

        <HorizontalScrollView
            android:id="@+id/horScrollView"
            android:layout_width="match_parent"
            android:layout_height="match_parent">

            <ScrollView
                android:id="@+id/scrollView"
                android:layout_width="match_parent"
                android:layout_height="match_parent">

                <ImageView
                    android:id="@+id/imageView3"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    app:srcCompat="@drawable/asdasd" />
            </ScrollView>
        </HorizontalScrollView>
    </LinearLayout>


스크롤뷰는 수직 방향으로 스크롤을 지원하고 수평방향은 HorizontalScrollView 를 사용하면 된다.

이란 뷰들도 자바 코드로 만들 수 있으며 new TextView(this) 와 new Button(this) 와 같이 메모리에
뷰 객체를 만들어 레이아웃에 추가할 수 있고 이미지는 new ImageView(this) 로 만들 수 있다.

이미지가 클 경우, 수평 수직 스크롤이 모두 나타나게 HorizontalScrollView 안에
ScrollView 를 추가하여 그 안에 이미지를 추가하였다. 이때 이미지가 뷰를 벗어날 경우 스크롤이 나타난다.

이때 버튼을 누르면 다른 이미지로 바뀌는 메소드를 작성해 보자.


    public class ScrollCodeActivity extends AppCompatActivity {
        ScrollView scrollView;
        ImageView imageView;
        BitmapDrawable bitmap;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.scroll_layout_main);

            scrollView = findViewById(R.id.scrollView);
            imageView = findViewById(R.id.imageView3);
            scrollView.setHorizontalScrollBarEnabled(true); // 수평 스크롤바 사용 가능 설정

            Resources res = getResources();
            bitmap = (BitmapDrawable) res.getDrawable(R.drawable.asdasd);   // 리소스 이미지 참조
            int bitmapWidth = bitmap.getIntrinsicWidth();
            int bitmapHeight = bitmap.getIntrinsicHeight();

            imageView.setImageDrawable(bitmap); // 리소스 이미지 크기 설정
            imageView.getLayoutParams().width = bitmapWidth;
            imageView.getLayoutParams().height = bitmapHeight;
        }

        public void onButton1Clicked(View v) {
            changeImage();
        }

        private void changeImage() {        // 다른 이미지로 변경
            Resources res = getResources();
            bitmap = (BitmapDrawable) res.getDrawable(R.drawable.aa);
            int bitmapWidth = bitmap.getIntrinsicWidth();
            int bitmapHeight = bitmap.getIntrinsicHeight();

            imageView.setImageDrawable(bitmap);
            imageView.getLayoutParams().width = bitmapWidth;
            imageView.getLayoutParams().height = bitmapHeight;
        }
    }


drawable 폴더에 넣은 이미지들을 getDrawable() 메소드를 이용하여 코드에서 BitmapDrawable 객체로 만들어진다.
이 get 을 이용하면 Resources 객체를 참조할 수 있다.

이렇게 얻은 BitmapDrawable 객체를 getIntrinsicWidth() 와 getIntrinsicHeight() 메소드로
원본 이미지 객체를 얻어서 원본 가로 세로로 설정한다.

changeImage() 메소드는 버튼 클릭 시 다른 원본 이미지로 바꿔주는 역할을 한다.