            06-1 서비스

앱을 종료했다고 완전히 끝인건 아니다.
예로 카톡은 실행되지 않아도 메시지를 받는 것을 확인할 수 있다. 이것은 백그라운드에서 실행되는 서비스(Service)가 있기 때문이다.
화면 뒤의 공간을 뒷단 또는 백그라운드라고 한다.

서비스란 백그라운드에서 실행되는 앱 요소를 말하며 서비스도 시스템이 관리한다.
액티비티 만들 때 매니페스트에 등록한 것처럼 새로 만든 서비스도 등록 해야한다.


        서비스의 실행 원리와 역할

서비스는 메인 액티비티에서 startService() 메소드로 실행한다.
서비스 주 역할은 항상 실행되어 있는 상태로 다른 단말과 데이터를 주고받거나 필요한 기능을 백그라운드에서 실행하는 것이다.
그래서 실행된 상태를 계속 유지하여 서비스가 비정상적으로 종료되더라도 시스템이 자동으로 재실행한다.


        startService()      서비스
    시작 -------------->  onCreate 호출 <──────┐
                                               │
         onDestroy 호출됨      ↓   비정상 조료  │
                            시스템 ────────────┘


서비스 시작을 위해 startService() 를 호출할 때 인텐트 객체를 파라미터로 전달한다.
인텐트 객체엔 어떤 서비스를 실행할 것인지 정보를 담고 있다.

서비스가 실행 중이면 이후에 startService() 를 여러 번 호출해도 이미 메모리에 만들어진 상태로 유지된다.
그래서 startService() 는 서비스를 시작하는 목적 이외에 인텐트를 전달하는 목적으로도 자주 사용된다.
예로 서비스에 추가 데이터를 인텐트 객체에 부가 데이터(Extra data)를 넣어 startService() 호출로 전달하면 된다.

서비스 동작 이해를 위해 실습을 진행하자. sample_service.xml 파일을 만들어 버튼과 입력 상자 하나씩 추가하자.
New -> Service 메뉴로 새로운 서비스를 생성한다. 그럼 서비스 자바 파일 뿐아니라 매니페스트 파일에
<service> 태그가 추가된 것을 확인할 수 있다. 자바 파일엔 아직 onBind() 만 존재하는 것을 확인할 수 있다.

서비스의 수명주기 관리를 위해 onCreate(), onDestroy(), onStartCommand() 메소드를 재정의한다.
서비스에 데이터를 전달할 때는 startService() 메소드를 사용하여 인텐트 안에 부가 데이터를 추가하여 전달한다.
ServiceActivity.java 파일을 생성하여 다음과 같이 작성한다.


    public class ServiceActivity extends AppCompatActivity {
        EditText editText;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_service);

            editText = findViewById(R.id.editTextTextPersonName5);

            Button button = findViewById(R.id.button79);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    String name = editText.getText().toString();

                    Intent intent = new Intent(getApplicationContext(), MyService.class);
                    intent.putExtra("command", "show"); // 인텐트로 부가 데이터 넣기
                    intent.putExtra("name", name);

                    startService(intent);   // 서비스 시작
                }
            });
        }
    }


인텐트 안에 두 개의 부가 데이터를 넣는다. 하난 command 란 키, 다른 하나는 name 으로 키를 부여했다.
command 는 서비스쪽에 인텐트 객체가 어느 목적인지 구별하고 name 은 입력 상자의 데이터를 넣었다.

startService() 메소드에 담긴 인텐트 객체는 MyService 에서 onStartCommand() 메소드로 전달된다.
MyService.java 를 열어 다음과 같이 작성한다.


    public class MyService extends Service {
        private static final String TAG = "MyService";

        public MyService() {
        }

        @Override
        public void onCreate() {
            super.onCreate();
            Log.d(TAG, "onCreate() 호출됨.");
        }

        @Override
        public int onStartCommand(Intent intent, int flags, int startId) {
            Log.d(TAG, "onStartCommand() 호출됨.");

            if(intent == null) {
                return Service.START_STICKY;
            } else {
                processCommand(intent);
            }

            return super.onStartCommand(intent, flags, startId);
        }

        private void processCommand(Intent intent) {
            String command = intent.getStringExtra("command");
            String name = intent.getStringExtra("name");

            Log.d(TAG, "command : " + command + ", name : " + name);

            for (int i = 0; i < 5; i++) {
                try {
                    Thread.sleep(1000);
                } catch (Exception e) {};

                Log.d(TAG, "Waiting " + i + " seconds.");
            }
        }
    ...


Service 클래스를 상속하는 MyService 클래스에 onCreate(), onDestroy(), onStartCommand() 메소드가 있다.
이번엔 startService() 메소드에 전달한 인텐트 부가 데이터를 출력하기 위해 토스트 뿐만 아니라 Log.d()
메소드로 로그를 출력했다.


        로그 사용하여 인텐트의 부가 데이터를 출력하기

로그 출력을 위해 첫 번째 파라미터로 로그를 구분할 수 있는 문자열을 전달해야 한다.
이것을 보통 태그(Tag)라고 한다. 서비스에 추가한 세 메소드 중 onStartCommand() 메소드가 인텐트 객체를 받는다.
이때 아주 중요한 역할을 하는데 시스템에 의해 다시 시작될 수 있어 onStartCommand() 메소드로 전달되는 인텐트 객체가 null 일때
검사한다. null 이면 Service.START_STICKY 를 반환하는데 비정상 종료되었다는 의미로 재시작한다.

서비스가 서버 역할 하며 액티비티와 연결되는 것을 바인딩이라 하며 onBind() 메소드를 재정의해야 한다.
여기서는 바인딩 기능을 사용하지 않았다.

앱 실행 후 버튼을 클릭하여 서비스를 실행한다. 그리고 로그를 확인해보자.
액티비티에서 전달한 데이터가 서비스에서 그대로 출력된다.

서비스에서 액티비티를 전달하고 싶다면 서비스에서 startActivity() 메소드를 사용한다.
startActivity() 메소드를 호출하면서 인텐트 객체를 전달하면 액티비티에의 부가 데이터를 받을 수 있다.

이제 processCommand() 메소드의 마지막 부분에서 액티비티 쪽으로 인텐트를 전달해 보겠다.
메인 액티비티에선 이 인텐트를 전달받아 화면에 보여준다.


    private void processCommand(Intent intent) {
        ...

        Intent showIntent = new Intent(getApplicationContext(), ServiceActivity.class);

        showIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK |
                Intent.FLAG_ACTIVITY_SINGLE_TOP |
                Intent.FLAG_ACTIVITY_CLEAR_TOP);
        showIntent.putExtra("command", "show");
        showIntent.putExtra("name", name + " from service.");
        startActivity(showIntent);
    }


인텐트 객체를 new 연산자로 생성하여 getApplicationContext() 메소드로 Context 를 전달했고
두 번째로 ServiceActivity.class 를 전달했다.
이 인텐트 객체를 startActivity() 메소드로 호출하면서 전달하면 메인 액티비티로 인텐트 객체가 전달된다.
이 인텐트 객체에 새로운 태스크를 생성하도록 FLAG_ACTIVITY_NEW_TASK 플래그를 추가해야 한다.
서비스는 화면이 없으니 화면이 있는 액티비티를 띄우려면 새 태스크를 만들어야 한다.
그리고 메인 액티비티가 이미 메모리에 만들엊도 재사용하도록 FLAG_ACTIVITY_SINGLE_TOP 과
FLAG_ACTIVITY_CLEAR_TOP 플래그도 인텐트에 추가한다.

서비스에서 5초 후 메인 액티비티에 전달한 인텐트는 메인 액티비티에서 처리하게 한다.


    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        ...

        Intent passedIntent = getIntent();  // 액티비티 새로 만들어질 때 인텐트 처리
        processIntent(passedIntent);
    }

    @Override
    protected void onNewIntent(Intent intent) {
        processIntent(intent);      // 액티비티가 이미 만들어졌을 때 인텐트 처리

        super.onNewIntent(intent);
    }

    private void processIntent(Intent intent) {
        if (intent != null) {
            String command = intent.getStringExtra("command");
            String name = intent.getStringExtra("name");

            Toast.makeText(this, "command : " + command + ", name : " + name, Toast.LENGTH_SHORT).show();
        }
    }


메인 액티비티가 메모리에 만들어지지 않은 처음 성태라면 onCreate() 메소드 안에서 getIntent() 메소드를 호출하여
인텐트 객체를 참조한다. 하지만 액티비티가 이미 메모리에 있다면 onNewIntent() 메소드러 인텐트를 받는다.

Service 외에도 IntentService 클래스가 있다. 인텐트 서비스는 서비스와 달리 필요한 함수가 수행되고 나면 종료된다.
즉, 백그라운드 실행을 한번 실행되고 끝나는 작업을 수행한다.
인텐트 서비스엔 onHandleIntent 란 메소드가 있어 이 함수는 onStartCommand() 메소드로 전달된 인텐트를 전달받으면서
실행된다. 그리고 이 함수의 실행이 끝나면 서비스는 자동 종료된다.


            06-2 브로드캐스트 수신자 이해

안드로이드에선 브로드캐스팅(Broadcasting)이란 메시지를 여러 객체에 전달하는 것을 말한다.
쉽게 말해 카톡에서 여러 사람에게 메시지를 전달할 그룹 채팅방이다.

다른 사람에게 문자를 받으면 이 SNS 수신을 알려줘야하므로 브로드캐스팅으로 전달된다.
메시지 전달 방식은 단말 전체에 적용할 수 있다. 그래서 이런 방식을 '글로벌 이벤트' 라고 한다.
대표적으로 전화 또는 문자가 왔음을 알리는 알림을 들 수 있다.

브로드캐스팅 메시지를 받고 싶다면 브로드캐스트 수신자(Broadcasting Receiver)를 만들어 등록하면 된다.
기기 안에 동작하는 다른 앱 A 로부터 특정 메시지를 받기 위해 브로드캐스트 수신자를 등록하면
A 앱의 메시지가 앱으로 전달된다. 그래서 이도 매니페스트 파일에 등록해야 시스템도 알 수 있게 된다.
단, 브로드캐스트 수신자는 매니패새스트 등록 방식이 아닌 소스 코드에서 registerReceiver() 메소드를 사용해
시스템에 등록할 수 있다. 이 코드로 브로드캐스트 수신자를 등록하면 액티비티 안에서
브로드캐스트 메시지를 받아 다른 작업을 수행할 수 있는 장점이 있다.


        브로드캐스트 수신자 등록하고 사용

브로드캐스트 수신자엔 onReceive() 메소드를 정의해야 한다. 이 메소드는 원하는 브로드캐스트 메시지가
도착하면 자동 호출된다. 하지만 모든 메시지를 받을 순 없다.
원하는 메시지만 받으려면 모든 메시지를 인텐트 안에 넣어 원하는 메시지만 인텐트 필터로 시스템에 등록하면 된다.

실습으로 New -> Other -> BoardCast Receiver 메뉴를 선택하여 브로드캐스트 수신자를 만들자.
새로 만들어진 MyReceiver.java 파일과 매니페스트 파일에 새로 만들어진 수신자가 등록된 것을 확인할 수 있다.
매니페스트 파일을 다음과 같이 수정하자.


    <receiver
        android:name=".MyReceiver"
        android:enabled="true"
        android:exported="true">

        <intent-filter>
            <action android:name="android.provider.Telephony.SMS_RECEIVED" />    ---> 액션 정보 넣기
        </intent-filter>
    </receiver>


브로드캐스트 수신자는 <receiver> 태그에 <intent-filter> 태그르 넣어 어느 인텐트를 받을 지 지정한다.
여기에 <action> 태그를 넣어 name 속성으로 android.provider.Telephony.SMS_RECEIVED 를 넣었다.
이것은 SMS 메시지가 들어간 인텐트를 구분하기 위한 액션 정보이다.
즉, 단말에서 SMS 수신하면 이 action 정보가 들어간 인텐트를 전달하므로 이 값을 넣어주면 SMS 를 받아볼 수 있따.

이제 MyReceiver 파일을 다음과 같이 작성한다.


    public class MyReceiver extends BroadcastReceiver {
        public static final String TAG = "SmsReceiver";

        @Override
        public void onReceive(Context context, Intent intent) {
            Log.i(TAG, "onReceive() 메소드 호출됨.");

            Bundle bundle = intent.getExtras(); // 번들 객체 받아옴
            SmsMessage[] messages = parseSmsMessage(bundle);

            if(messages != null && messages.length > 0) {
                String sender = messages[0].getOriginatingAddress();
                Log.i(TAG, "SMS sender : " + sender);

                String contents = messages[0].getMessageBody();
                Log.i(TAG, "SMS contents : " + contents);

                Date receivedDate = new Date(messages[0].getTimestampMillis());
                Log.i(TAG, "SMS received date : " + receivedDate.toString());
            }
        }
    }


SMS 를 받으면 onReceive() 메소드가 자동 호출된다. 그리고 파라미터로 전달된 Intent 객체 안에 SMs 데이터가 있다.
먼저 onReceive() 메소드가 호출됐는지 알 수 있게 onReceive() 메소드 안에 로그 메시지를 출력하는 한 줄을 추가한다.
그리고 인텐츠 객체 안의 Bundle 객체를 getExtra() 메소드로 참조한다. 여기에 부가 데이터가 들어 있어
parseSmsMessage() 메소드를 호출하여 SMS 메시지 객체를 만들도록 한다.
parseSmsMessage() 메소드를 작성해보자.


    private SmsMessage[] parseSmsMessage(Bundle bundle) {
        Object[] objs = (Object[]) bundle.get("pdus");
        SmsMessage[] messages = new SmsMessage[objs.length];    // 번들 객체의 pdus 데이터 가져오기

        int smsCount = objs.length;
        for (int i = 0; i < smsCount; i++) {
            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    // 단말 OS 버전에 따른 메소드 호출
                String format = bundle.getString("format");
                messages[i] = SmsMessage.createFromPdu((byte[]) objs[i], format);
            } else {
                messages[i] = SmsMessage.createFromPdu((byte[]) objs[i]);
            }
        }

        return messages;
    }


parseSmsMessage() 메소드는 한번 입력해 놓으면 다른 앱에서도 사용 가능할 정도로 SMS 데이터 확인은
안드로이드 API 에서 정해둔 코드를 사용하여 수정될 일이 없다.
인텐트 객체가 안에 부가 데이터로 들은 SMS 데이터를 확인하려면 SmsMessage 클래스의 createFromPdu() 메소드를 사용하여
SmsMessage 객체로 변환하면 SMS 데이터를 확인할 수 있다. 이때 Build.VERSION.SDK_INT 는 단말 OS 버전을 확인할 때 사용한다.
OS 는 계속 업데이트되니 버전에 따라 약간씩 달라져야할 때가 있다.
다음과 같이 코드가 버전에 따라 다른 코드를 넣을 때 전형적으로 쓰는 코드이다.


    if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)  ...


Build.VERSION_CODES 에는 OS 가 버전별로 상수로 정의되어 있다. 마시멜로(M)와 같은 버전이 있다.

다시 onReceive() 메소드로 돌아와 SmsMessage 객체에서 SMS 데이터를 확인하는 메소드가 있다.
발신자 번호 확인은 getOriginatingAddress() 로 호출한다.
내용 확인은 getMessageBody().toString() 을 사용한다. 받은 시각도 알 수 있으며 이를 로그로 출력했다.

근데 이 앱에서 SMS 수신을 하려면 RECEIVE_SMS 란 권한이 필요하다.
매니페스트 파일에서 다음 권한을 추가하자.


    <?xml version="1.0" encoding="utf-8"?>
    <manifest xmlns:android="http://schemas.android.com/apk/res/android"
        package="com.example.secondmadang">

        <uses-permission android:name="android.permission.RECEIVE_SMS" />


<application> 태그 위에 <use-permission> 태그를 추가하고 RECEIVE_SMS 권한을 추가했다.
그런데 이 권한은 위험 권한이다. 위험 권한에 대해 다음 단락에 자세히 설명한다.
그리고 외부 라이브러리를 하나 추가하고 거기에도 위험 권한을 추가하는 코드를 넣는다.
그리고 외부 라이브러리를 그래들에 추가한다.


    allprojects {
        repositories {
            maven { url 'https://jitpack.io' }
        }
    }

    dependencies {
        ...
        implementation 'com.github.pedroSG94:AutoPermissions:1.0.3'
    }


메뉴에서 [Sync Project with Gradle Files] 아이콘을 클릭한다.

외부라이브러리들이 추가되었으면 메인 액티비티에 다음 코드를 추가한다.


    public class BroadcastingActivity extends AppCompatActivity implements AutoPermissionsListener {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_broadcasting);

            AutoPermissions.Companion.loadAllPermissions(this, 101);
        }

        @Override
        public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
            AutoPermissions.Companion.parsePermissions(this, requestCode, permissions, this);
        }

        @Override
        public void onDenied(int i, String[] permissions) {
            Toast.makeText(this, "permissions granted : " + permissions.length, Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onGranted(int i, String[] permissions) {
            Toast.makeText(this, "permissions granted : " + permissions.length, Toast.LENGTH_SHORT).show();
        }
    }


이 코드는 위험 권한을 자동으로 부여하는 코드이다. 간략히 onCreate() 메소드 안에서 자동으로 권한을 부여하도록 요청한다고
이해하면 된다.

이제 앱을 실행하면 메인 액티비티 화면에서 권한을 요청하는 대화상자가 나타난다. 승인을 한다면
SMS 를 받을 준비가 된다.

근데 SMS 는 이동통신사에 연결되어 있어야 다른 단말로부터 수신할 수 있다.
따라서 에뮬레이터는 실제 SMS 를 받을 수 없다. 이 때문에 에뮬레이터는 가상으로 SMS 를 전송할 수 있는 기능이 들어있다.
에뮬레이터를 실행하여 옆 아이콘 중에 가장 아래쪽의 [...] 아이콘을 클릭한다.
그러면 [Extended controls] 대화상자가 표시된다. 왼쪽의 메뉴에서 [Phone] 를 선택한다.
Hello! 를 입력하여 SEND 로 메시지를 보내보자.

에뮬레이터로 전달된 SMS 문자가 알림 메시지가 뜨면서 로그 창에서 확인해보자.


        SMS 내용 액티비티에 나타내기

근데 발신자와 SMS 내용 등을 나타내고 싶다면 브로드캐스트 수신자는 화면이 없어 보여줄 화면을 액티비티로
만들어 띄운 후 인텐트 객체를 만들고 startActivity() 메소드를 사용해 액티비티 쪽으로 인텐트 객체를 전달해야 한다.

수신한 SMS 문자 내용을 확인하려면 액티비티를 만들어야 하니 activity_sms 파일을 만들어
입력 상자 세개, 버튼 하나를 만든다. 각각 '발신번호, 내용, 수신 시각' 을 hint 값으로 설정한다.
그리고 SmsActivity 자바 파일을 만들어 다음과 같이 작성한다.


    public class SmsActivity extends AppCompatActivity {
        EditText editText;
        EditText editText2;
        EditText editText3;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_sms);

            editText = findViewById(R.id.editTextTextPersonName6);  // 내용
            editText2 = findViewById(R.id.editTextTextPersonName7); // 발신번호
            editText3 = findViewById(R.id.editTextTextPersonName8); // 수신시각

            Button button = findViewById(R.id.button80);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    finish();
                }
            });

            Intent passedIntent = getIntent();
            processIntent(passedIntent);
        }

        @Override
        protected void onNewIntent(Intent intent) {
            processIntent(intent);

            super.onNewIntent(intent);
        }

        private void processIntent(Intent intent) {
            if (intent != null) {
                String sender = intent.getStringExtra("sender");
                String contents = intent.getStringExtra("contents");
                String receivedDate = intent.getStringExtra("receivedDate");

                editText.setText(contents);
                editText2.setText(sender);
                editText3.setText(receivedDate);
            }
        }
    }


브로드캐스트 수신자로부터 인텐트를 전달받을 것이니 onCreate() 에서 getIntent() 메소드를 호출하여
processIntent() 메소드를 호출하게 한다. 그리고 onNewIntent() 메소드를 재정의하여
이 액티비티가 이미 만들어졌다면 이것으로 처리한다. processIntent() 메소드에서 부가 데이터를 꺼내 처리한다.
화면엔 [확인] 버튼을 누르면 finish() 로 닫아준다.

다시 SmsReceiver 에 다음 코드를 추가한다.


    public class MyReceiver extends BroadcastReceiver {
        public static final String TAG = "SmsReceiver";

        public SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        @Override
        public void onReceive(Context context, Intent intent) {
            Log.i(TAG, "onReceive() 메소드 호출됨.");

            Bundle bundle = intent.getExtras(); // 번들 객체 받아옴
            SmsMessage[] messages = parseSmsMessage(bundle);

            if(messages != null && messages.length > 0) {
                String sender = messages[0].getOriginatingAddress();
                Log.i(TAG, "SMS sender : " + sender);

                String contents = messages[0].getMessageBody();
                Log.i(TAG, "SMS contents : " + contents);

                Date receivedDate = new Date(messages[0].getTimestampMillis());
                Log.i(TAG, "SMS received date : " + receivedDate.toString());

                sendToActivity(context, sender, contents, receivedDate);    // 새 화면 띄우는 메소드 호출
            }
        }

        ...

        private void sendToActivity(Context context, String sender, String contents,
                                    Date receivedDate) {
            Intent myIntent = new Intent(context, SmsActivity.class);

            myIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK|
                    myIntent.FLAG_ACTIVITY_SINGLE_TOP |
                    myIntent.FLAG_ACTIVITY_CLEAR_TOP);    // 인텐트에 플래그 추가

            myIntent.putExtra("sender", sender);
            myIntent.putExtra("contents", contents);
            myIntent.putExtra("receivedDate", format.format(receivedDate));

            context.startActivity(myIntent);
        }
    }


sendToActivity() 메소드는 SmsActivity 로 인텐트를 보내려는 메소드다.
Intent 객체를 두 번째 파라미터로 SmsActivity 객체에 전달하였으니 startActivity() 메소드를 이용해
인텐트를 시스템에 전달하여 SmsActivity 에 전달한다.
브로드캐스트 수신자는 화면이 없으니 플래그로 FLAG_ACTIVITY_NEW_TASK 를 추가해야 한다는 점을 잊지 말자.
이미 메모리에 만든 SmsActivity 가 있을 수 있으니 FLAG_ACTIVITY_SINGLE_TOP 플래그도 추가한다.
이렇게 sendToActivity() 메소드는 onReceive() 안에서 호출한다.
수신 시각의 경우 사용자가 알아볼 수 있게 좋은 날짜 형태로 SimpleDateFormat 을 사용하였다.
에뮬레이터로 SMS 문자를 보내 확인해보자.

브로드캐스트 수신자는 매니페스트 안에 <receiver> 태그로 추가되어 있지만 매니페스트에 등록하지 앟고
자바 코드로 registerReceiver() 메소드로 등록할 수도 있다.


    조언

    다른 앱에 메시지를 보내고 싶다면 sendBroadcast() 메소드를 사용할 수 있다.
    물론 다른 앱에도 브로드캐스트 수신자를 정의했다면 보낼 수 있다.


        브로드캐스트 수신자 동작 방식 정리

다음은 브로드캐스트 수산자가 동작하는 방식이다.


    SmsActivity         수신자 #1  <───────┐
        ↑               수신자 #2  <───────┤   인텐트 전달
인턴트   │               수신자 #3          │
전달     └───────────────┐
            ┌────────── SmsReceiver <──────┤
            │                              │
            ↓                              │
    매니페스트에 등록       SMS 수신 이벤트  ┘
                            Telephone 모듈
                            안드로이드 OS


단말에선 SMS 문자 받으면 텔레포니(Telephony) 모듈로 처리한다. 인텐트에 정보가 담겨 브로드캐스트 방식으로 다른 앱에 전달된다.
인텐트를 받을 때 onReceive() 메소드가 자동호출된다.

브로드캐스트 수신자 이용 시 주의할 점은 A 가 실행되어 있지 않아도 앱 A 가 원하는 브로드캐스트 메시지가 도착하면
다른 앱 B 를 실행하는 도중 A 가 실행될 수 있는 점이다.
그래서 SMS 수신 앱을 여러 개 수정하면 설치 시 오류가 발생하면 어떤 오류인지 찾기 힘들 수 있다.
그렇기 때문에 구 버전의 패키지 이름을 수정하거나 신버전 개발 시 구 버전을 삭제하는 것도 좋다.

에뮬레이터 하단 가운데 부분 버튼 클릭하여 설정 메뉴를 띄워 앱 항목을 실행하여 삭제해보자.


            06-3 위험 권한 부여

앞서 RECEIVE_SMS 권한이 필요하였는데 매니페스트에 넣은 권한은 앱 설치 시 한꺼번에 부여되는데
마시멜로(API 23)로부터 중요한 권한들을 분류하여 설치 시점이 아닌 실행 시점에서 받는다.


        일반 권한과 위험 권한 차이점

마시멜로 버전부터 일반, 위험 권한으로 나뉜다. 이는 단말의 주요 기능을 마음대로 사용할 수 있는데
기본 방식 때는 설치 시점이었지만 앱 실행 시 권한을 부여받도록 된 것이다.


                        설치 시점
    앱 설치 파일(apk)        →       수락해야 설치
            ↓
    일반 권한(예:INTERNET)


                    앱 실행 시점
    위험 권한           →           수락하면 동작
    (예:RECEIVE_SMS)


위험 요소 권한은 대부분 개인 정보가 담긴 정보로 주요 장치에 접근할 때 부여된다.
위치, 카메라, 마이크, 연락처, 전화, 문자, 일정, 센서 등 위험 권한은 다음과 같다.


    위험 권한 그룹    세부 권한

    LOCATION        ACCESS_FINE_LOCATION
                    ACCESS_COARSE_LOCATION

    CAMERA          CAMERA

    MICROPHONE      RECORD_AUDIO

    CONTACTS        READ_CONTACTS
                    WRITE_CONTACTS
                    GET_ACCOUNTS

    PHONE           READ_PHONE_STATE
                    CALL_PHONE
                    READ_CALL_LOG
                    WRITE_CALL_LOG
                    ADD_VOICEMAIL
                    USE_SIP
                    PROCESS_OUTGOING_CALLS

    SMS             SEND_SMS
                    RECEIVE_SMS
                    READ_SMS
                    RECEIVE_WAP_PUSH
                    RECEIVE_MMS

    CALENDAR        READ_CALENDAR
                    WRITE_CALENDAR

    SENSORS         BODY_SENSORS

    STORAGE         READ_EXTERNAL_STORAGE
                    WRITE_EXTERNAL_STORAGE


권한 그룹은 동일한 기능 접근 시 몇가지 세부 기능들을 묶어주는 역할을 한다.
SD 접근 시 필요한 READ_EXTERNAL_STORAGE 와 WRITE_EXTERNAL_STORAGE 도 위험 권한인 것을 주목하자.


    조언

    targetSdkVersion 23 미만으로 지정 방법은 위험 권한도 자동 부여되었지만 이제 사용할 수 없다.


    위험 권한 부여하는 방법 알아보기

이번엔 기본 방법으로 위험 권한으로 부여하는 실습을 통해 위험 권한을 부여하는 동작 원리를 공부하자.
이제 매니페스트 파일에 다음 권한도 추가한다.


    <manifest xmlns:android="http://schemas.android.com/apk/res/android"
        package="com.example.secondmadang">

        <uses-permission android:name="android.permission.RECEIVE_SMS" />
        <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
        <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />


기본 권한을 부여할 때는 <use-permission> 태그를 사용한다.
이제 PermissionActivity.java 를 생성하여 다음과 같이 작성하자.


    public class PermissionActivity extends AppCompatActivity {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_permission);

            String[] permissions = {
                    Manifest.permission.READ_EXTERNAL_STORAGE,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE
            };

            checkPermissins(permissions);
        }

        public void checkPermissins(String[] permissions) {
            ArrayList<String> targetList = new ArrayList<>();

            for (int i = 0; i < permissions.length; i++) {
                String curPermission = permissions[i];
                int permissionCheck = ContextCompat.checkSelfPermission(this, curPermission);

                if (permissionCheck == PackageManager.PERMISSION_GRANTED) {
                    Toast.makeText(this, curPermission + "권한 있음.", Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(this, curPermission + "권한 없음.", Toast.LENGTH_SHORT).show();

                    if (ActivityCompat.shouldShowRequestPermissionRationale(this, curPermission)) {
                        Toast.makeText(this, curPermission + "권한 설명 필요함.", Toast.LENGTH_SHORT).show();
                    } else {
                        targetList.add(curPermission);
                    }
                }
            }

            String[] targets = new String[targetList.size()];
            targetList.toArray(targets);

            ActivityCompat.requestPermissions(this, targets, 101);
        }
    }


onCreate() 메소드 안에 checkPermissions() 메소드를 호출하도록 코드를 작성했다.
checkPermissions() 메소드는 정해준 권한이 부여된 지를 확인한다. 부여되지 않았다면 ArrayList 안에 넣었다가
부여되지 않은 권한들만 요청하게 된다. checkSelfPermission() 메소드로 이미 부여된건지도 확인하게 만들었다.
권한이 부여되지 않았다면 requestPermissions() 메소드로 호출하여 요청한다.

이렇게 권한 수락과 관리만 requestPermissions() 등으로 실행하며 대화 상자는 따로 만들 필요는 없다.

메인 액티비티에 다음과 같이 onRequestPermissionsResult() 메소드를 재정의한다.


    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode) {  // 요청 코드가 맞는지 확인
            case 101: {
                if(grantResults.length > 0 &&
                        grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    Toast.makeText(this, "첫 번째 권한을 사용자가 승인함.", Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(this, "첫 번째 권한 거부됨.", Toast.LENGTH_SHORT).show();
                }

                return;
            }
        }
    }


onRequestPermissionsResult() 메소드에는 요청 코드와 함께 사용자가 권한을 수락했는지 여부가 파라미터로 전달된다.
여러 권한이 한 번에 요청될 수 있어 grantResults 배열 변수 안에 수락 여부를 넣어 전달한다.

이번엔 외부 라이브러리를 이용한 위험 권한 자동 부여 방법에 대해 알아본다.
sample_permissions.xml 파일을 만들고 PermissionsActivity.java 을 다음과 같이 작성한다.


    public class PermissionsActivity extends AppCompatActivity implements AutoPermissionsListener {
        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.sample_permissions);

            AutoPermissions.Companion.loadAllPermissions(this, 101);    // 위험 권한 자동 부여
        }

        @Override
        public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                               @NonNull int[] grantResults) {   // 위험 권한 부여에 대한 응답 처리
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
            AutoPermissions.Companion.parsePermissions(this, requestCode, permissions, this);
        }

        @Override
        public void onDenied(int i, String[] permissions) {
            Toast.makeText(this, "permissions denied : " + permissions.length, Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onGranted(int i, String[] permissions) {
            Toast.makeText(this, "permissions granted : " + permissions.length, Toast.LENGTH_SHORT).show();
        }
    }


이 코드는 위험 권한 자동 부여 코드이다. 매니페스트 권한 중 위험 권한을 자동 체크하여
권한 부여를 요청하는 방식이다. onCreate() 메소드에 loadAllPermissions() 메소드를 호출하면서
자동으로 권한 부여하게 요청한다. 그럼 권한 부여 요청 결과가 넘어오게 되는데 그 결과는 onRequestPermissionsResult
메소드로 전달 받는다. 이 메소드 안에 parsePermissions() 메소드를 호출하는데 이 메소드를 호출하면
권한 부여 결과가 승안 또는 거부로 나뉘면서 onGranted() 또는 onDenied() 메소드가 호출된다.
권한이 여러 개인 경우에는 어떤 권한은 onGranted 또는 어떤 권한은 onDenied 로 나뉘어 호출한다.


            06-4 리소스와 매니페스트 이해하기

안드로이드 앱은 크게 '자바 코드' 와 '리소스' 로 구성된다. 자바 코드에선 앱의 흐름과 기능을 정의하고
리소스에는 레이아웃이나 이미지처럼 사용자에게 보여주기 위해 사용하는 파일이나 데이터를 관리한다.
지금까진 XML 레이아웃이나 이미지 등 res 폴더에 사용했다. 이번 단락은 다음 장 이해를 위해
리소스로 만들어 처리하눈 몇 가지 내용을 보자.


        매니페스트

매니페스트는 리소스가 아니지만 권한 부여 등 시스템에 알려주니 매우 중요하다.
모든 안드로이드 앱은 상위 폴더에 매니페스트 파일이 있어야 하며, 이 정보는 앱이 실행되기 전에
시스템이 알아야 할 내용들을 정의하고 있다. 다음은 매니페스트 파일의 태그 항목들이다.


    <action>                <instrumentation>       <provider>
    <activity>              <intent-filter>         <receiver>
    <activity-alias>        <manifest>              <service>
    <application>           <meta-data>             <uses-configuration>
    <category>              <permission>            <uses-library>
    <data>                  <permission-group>      <uses-permission>
    <grant-uri-permission>  <permission-tree>       <uses-sdk>


이 태그 중 <action>, <service>, <receiver>, <provider> 와 같은 태그들은 앱 구성 요소를 등록하기 위해
사용되며, <activity> 태그는 우리가 여러번 사용했는데, 이를 포함한 매니페스트 주요 역할들을 보면 다음과 같다.


    - 앱의 패키지 이름 지정                                - 다른 앱이 접근하기 위한 권한 정보 등록
    - 앱 구성 요소에 대한 정보 등록                         - 앱 개발 과정에 프로파일링 위한 instrumentation 클래스 등록
        (액티비티, 서비스, 브로드캐스트 수신자, 내용 제공자) - 앱에 필요한 안드로이드 API 레벨 정보 등록
    - 각 구성 요소를 구현하는 클래스 이름 지정              - 앱에 필요한 라이브러리 리스트
    - 앱이 가져야하는 권한에 대한 정보 등록


다음은 매니페스트 파일 기본 구조이다.


    <manifest ...>
        <application>
            ...
            <service android:name="org.techtown.service.MyService" ...>

            </service>
        </application>
    </manifest>


매니페스트 파일에 타이틀이나 아이콘 같은 앱 자체의 정보를 속성으로 지정 가능하고
이미지 리소스는 "@drawable/..." 과 같이 참조하여 지정할 수 있다.
애플리케이션을 의미하는 <application> 태그는 반드시 하나만 있어야 하며
나머지 <application> 태그 안의 구성 요소들은 같은 태그가 여러 번 추가되도 괜찮다.
그 중 메인 액티비티는 항상 다음과 같은 형태로 추가되어야 한다.
즉, 인텐트 필터에 들어가는 정보는 <action> 태그의 경우 MAIN 이 되어야 하고 <category> 탵그는
LAUNCHER 가 되어야 한다.


    <activity
        android:name=".MainActivity"
        android:label="@string/app_name">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />

            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
    </activity>


        리소스 사용

리소스를 자바 코드와 분리한 이유는 이해하기 쉽고 유지관리가 용이해서 이다.
'app/res' 외에 'app/assets' 폴더를 따로 만들 수 있는데 두 가지 모두 리소스라고 할 수 있고 대부분
res 폴더에 관리된다. 두 차이점은 다음과 같다.


    - 에셋(asset)은 동영상이나 웹 페이지같은 큰 데이터를 의미한다.
    - 리소스는 빌드되어 설치 파일에 추가되지만 에셋은 빌드되지 않는다.


리소스는 'app/res' 폴더 밑의 여러 폴더에 나누어 저장되며 리소스 유형별로 서로 다른 폴더에 저장한다.
처음 만들면 몇 개의 폴더만 있는데 실제 만들 수 있는 폴더는 훨씬 많아 만들어 사용해야 한다.
리소스 갱신 시 마다 정보가 R.java 파일에 자동 기록되어 그 정보는 내부적인 포인터 정보가 된다.

'app/res/value' 폴더는 문자열이나 기본 데이터 타입의 정보들이 저장된다.
예로, strings.xml 파일은 문자열을 저장한다. 다른 파일을 만들어 저장할 경우 그 안에 포맷에 맞는 데이터가 들어가야 한다.

'app/res/drawable' 폴더에 이미지를 저장한다. 이 폴더는 단말의 해상도에 따라 다른 이미지를 보여주도록
'app/res/drawable-[xhdpi, hdpi, mdpi]' 등으로 나뉘어 저장할 수 있다. 각 단말에 해상도에 맞는 폴더를 찾아
그 안에 들은 이미지를 참조하게 된다. 이렇게 리소스 정보들은 Resources 객체를 참조하게 되는데
Resources 객체는 Context.getResources() 메소드로 언제든지 참조 가능하다.


        스타일과 테마

스타일과 테마는 여러 속성을 한번에 모아 정의한 것으로 대화 상자를 예로 들 수 있다.
대화상자는 액티비티와 달리 타이틀 부분이나 모서리 부분의 형태가 약간 다른데
이런 속성들을 다이얼로그(Dialog) 테마로 정의하여 액티비티에 적용하면 대화상자 모양으로 보인다.
스타일을 직접 정의하고 싶다면 'app/res/values/styles.xml' 파일로 스ㅏ일을 정의한다.
요소별 UI 속성들은 android:style 속성으로 레이아웃에 바로 적용될 수 있다.


    <style name="Alert" parent="android:Theme.Dialog"
        <item name="android:windowBackground">@drawable/alertBackground</item>
    </style>


            06-5 그래들 이해하기

안드로이드 앱 실행하거나 앱 스토어에 올릴 때 소스 파일이나 리소스 파일을 빌드하거나 배포하는 작업이 필요하다.
이때 사용되는 것이 그래들(Gradle)이다. 다시말해 빌드 및 배포 도구이다.

한 앱의 빌드 설정은 build.gradle 파일에 관리하며 그래들 파일은 프로젝트 수준과 모듈 수준으로 나눠 관리하니
새 프로젝트 만든다면 두 개의 build.gradle 파일이 생긴다.


    buildscript {
        repositories {
            google()
            jcenter()
        }
        dependencies {
            classpath "com.android.tools.build:gradle:4.1.2"
        }
    }

    allprojects {
        repositories {
            google()
            jcenter()
        }
    }

    task clean(type: Delete) {
        delete rootProject.buildDir
    }


이 파일은 프로젝트 안의 모든 모듈에 적용될 설정을 담고 있다. 이 파일은 거의 수정하는 일이 없다.
가끔 외부 도구를 포함하기 위해 수정만 있을 수 있다.

다음은 모듈 수준의 그래들 설정 파일이다.


    plugins {
        id 'com.android.application'
    }

    android {
        compileSdkVersion 29

        defaultConfig {
            applicationId "com.example.secondmadang"
            minSdkVersion 16
            targetSdkVersion 29
            versionCode 1
            versionName "1.0"

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

    allprojects {
        repositories {
            maven { url 'https://jitpack.io' }
        }
    }

    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation 'androidx.appcompat:appcompat:1.2.0'
        implementation 'com.google.android.material:material:1.2.1'
        implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
        implementation 'com.github.pedroSG94:AutoPermissions:1.0.3'
        testImplementation 'junit:junit:4.+'
        androidTestImplementation 'androidx.test.ext:junit:1.1.2'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    }


각 모듈 설정을 담고 있다. app 모듈의 설정 정보이며 새 모듈을 추가하면 그에 대한 파일도 새로 추가된다.
applicationId 는 이 앱의 id 이며 세계에서 유일한 값으로 설정해야 한다.
compileSdkVersion 은 빌드 진행 시 어느 SDK 를 사용할 지 정하는 것이다.
minSdkVersion 은 이 앱이 어떤 하위 버전까지 지원하도록 할 지 지정한다.
targetSdkVersion 은 검증된 버전이 어느 버전인지 지정한다. 새로운 SDK 출시되었다면 해당 SDK 에서
검증되지 않은 앱은 이 버전을 이전 버전으로 지정할 수도 있다.
dependencies 엔 외부 라이브러리를 추가할 수 있다.
마지막으로 settings.gradle 파일엔 어떤 모듈을 포함할 지 정보가 들어 있다.


    include ':app'
    rootProject.name = "Second Madang"


이 내용은 안드로이드 스튜디오의 설정에 따라 자동으로 변한다.
