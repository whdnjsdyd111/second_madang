            01-1 제대로 익히기


        안드로이드 최신 버전 확인 후 프로젝트 생성


        안드로이드 스튜디오 창 구성과 기능 알아보기

Ctrl + Tab 을 누르면 윈도우의 alt + Tab 과 같은 기능을 하여 빠르게 파일을 선택할 수 있다.


        코드 편집기 살펴보기

메소드나 클래스를 선택한 다음 Ctrl + Q 를 누르면 정보를 확인할 수 있다.

파라미터를 선택하고 단축키 Ctrl + P 를 누르면 어떤 것들이 있는지 확인할 수 있다.

빈 줄에서 마우스 오른쪽 버튼을 누르면 메뉴에서 [Generate...] 를 선택하면 오버라이드할 수 있는
메소드 정보들이 나타난다.

프로젝트에서 어느 글자를 검색하고 싶을 시에는 [Edit - Find - Find in Path...] 를 선택한다.
이 대화상자는 Ctrl + Shift + F 를 눌러도 불러올 수 있다.


        디자이너 도구 살펴보기


            01-2 뷰와 뷰의 크기 속성 이해

        뷰 속성

뷰(View)는 일반적으로 컨트롤이나 위젯을 불리는 UI 구성 요소다. 이런 여러 뷰를 포함하는 것이 뷰그룹(ViewGroup)이며
뷰그룹 안에서 뷰의 위치를 지정할 수 있다. 뷰그룹은 여러 뷰를 담고있는 그릇과 같으며 뷰와는 다르다.
뷰그룹 안에 다른 뷰그룹을 넣을 수도 있으며 동일하게 다루게 만들 수도 있다. 이렇게 하면 여러 장점이 생길 수도 있다.

여러 뷰를 담은 뷰그룹 역시 또 하나의 뷰처럼 다룰 수도 있다.
이러한 뷰 관계는 컴포지트 패턴(Composite Pattern)이란 디자인 패턴을 사용한 것이다.


    ┌→  뷰   ←┐
    │         │
    │ 포함    │   상속
    │         │
    └─  뷰그룹 ┘


이외에 뷰는 다른 뷰의 속성을 상속하여 상속받은 뷰의 특성을 그대로 가질 수도 있다.
그래서 처음 프로젝트에서 기본으로 들어 있는 텍스트뷰는 XML 레이아웃 파일을 열어
<TextView> 태그 이름을 단순히 <Button> 으로 바꾸기만 해도 버튼으로 변경된다.
그 이유는 버튼이 텍스트 뷰를 상속하여 정의되어 그 속성을 그대로 사용할 수 있게 된다.
이런 특성으로 인해 복붙으로 손쉽게 텍스트뷰를 버튼으로 바꾸거나 새로 추가할 수 있다.


        위젯과 레이아웃 구별되는 뷰

뷰와 뷰그룹의 역할을 구분하기 위해 뷰 종류에 따른 이름으로 부르기도 하는데
일반적으로 컨트롤의 역할을 하는 것을 위젯(Widget)이라 하며 뷰그룹 중 내부에 뷰들을 포함하고 있어
그것들을 배치하는 역할을 하는 것을 레이아웃(Layout) 이라 부른다.

뷰로 정의된 클래스의 속성이나 메소드는 아주 많으니 기초 속성이나 메소드를 중심으로 활용하는 것이 좋다.
기초적인 클래스인 텍스트뷰(TextView)와 버튼(Button) 속성을 먼저 보는 것이 좋다.

뷰그룹도 배치에 필요한 대표 레이아웃들을 보면 쉽게 사용할 수 있다.


        Object
            ↑
        ┌→  View    ←┐
    TextView    ViewGroup
        ↑           ↑
    Button      LinearLayout


뷰를 배치하는 레이아웃도 뷰를 상속받은 것으로 뷰가 가진 속성은 레이아웃도 있다.
따라서 레이아웃 #1 안의 다른 레이아웃(#1-1, #1-2)이 들어갈 수 있다.


    레이아웃 #1
    ┌────────────────┐  #1-1
    │┌──────────────┐│
    ││  버튼 #1     ││
    │└──────────────┘│
    │┌─────────────┐ │
    │└─────────────┘ │  #1-2
    └────────────────┘


        부의 크기 속성

뷰는 화면의 일정 영역을 차지하여 모든 뷰는 반드시 크기 속성을 가지고 있어야 한다.
가로 세로 크기 속성이 없으면 안드로이드는 XML 레이아웃이 잘못됐다고 판단하고 오류를 출력한다.


    예시

    <TextView android:layout_width="" android:layout_height="" />

    <android.support.constraint.ConstraintLayout
        android:layout_width="" android:layout_height="">

    </android.support.constraint.ConstraintLayout>


텍스트뷰 태그는 속성을 넣고 바로 끝 태그로 닫을 수 있지만 Constraint 태그는 다른 뷰들을 담을
레이아웃이기 때문에 시작 태그와 끝 태그를 분리해야 한다.

android: 로 시작하는 단어는 안드로이드 기본 API 의 속성이란 의미이다.
외부 라이브러리를 사용했다면 그안에 android: 가 아닌 app: 속성을 붙일 수도 있다.
따라서 android: 는 접두어(prefix) 라고 생각하면 된다.
그리고 속성 중에 공통된 속성들이 보이는데

    android:layout_width="" android:layout_height=""


이 속성은 뷰가 가질 수 있는 내부 속성 중 필수 속성이다. 각각의 속성은 가로 크기와 세로 크기를 결정한다.
위 두 속성 중 하나라도 없다면 오류를 발생한다.

가로와 세로 크기의 값으로는 세 가지 중 하나가 들어갈 수 있다.


    wrap_content    뷰에 들어갈 내용물의 크기에 자동으로 맞춤
    match_parent    뷰를 담는 뷰그룹의 여유 공간을 꽉 채움
    숫자로 지정      숫자로 지정 dp, px 와 같은 단위가 들어가야함


wrap_content, match_parent 는 뷰 크기에 따라 달라지며 숫자 값은 고정된 값으로 넣을 때 사용한다.


        버튼의 크기 속성 바꾸기

버튼을 하나 추가하면 layout_width 와 layout_height 속성 값이 wrap_content 로 되어 있는데,
이 값으로 설정하면 버튼 내용에 맞게 크기가 자동으로 결정된다.
버튼의 text 속성에 '안녕하세요, 반갑습니다!' 로 입력하면 자동으로 가로 크기가 자동으로 늘어나느 것을 확인할 수 있다.

왼쪽 아레에 Component Tree 창을 보면 뷰의 계층 구조를 확인할 수 있는데,
버튼이 ConstraintLayout 안에 들어있는 것을 볼 수 있다.

이번에 layout_width 속성 값에 '240dp' 을 입력하여 바꿔보자. 버튼 크기가 입력한 값에 따라 변경된 것을 볼 수 있다.

layout_height 은 버튼을 담고 있는 레이아웃이 제약 레이아웃(ConstraintLayout)인데 리니어 레이아웃(LinearLayout),
상대 레이아웃(RelativeLayout)에 따라 wrap_content 와 wrap_parent 값 설정했을 때의 차이가 있다.

이번엔 레이아웃을 바꿔보자. 왼쪽 아래에 Component Tree 의 ConstraintLayout 을 선택 후 마우스 오른쪽 버튼으로
클릭하여 메뉴에서 [Convert view...] 를 선택한다. LinearLayout 을 선택하고 [Apply] 로 적용한다.

리니어 레이아웃이 차지하여 버튼이 왼쪽 상단에 위치하게 된다.
버튼의 속성에서 layout_height 과 layout_width 값을 모두 match_parent 로 바꾸면 화면이 버튼으로 꽉 채우게 된다.

동일한 속성이라도 레이아웃에 따라 적용되는 방식이 다르며 리니어는 orientation 속성이 필수지만
상대 레이아웃은 이를 해석하지 않는다.


            01-3 레이아웃 기초

기본 레이아웃은 제약 레이아웃(ConstraintLayout)으로 자동 설정된다.


    조언

    제약 레이아웃은 아이폰 앱의 엑스코드란 개발 도구와 비슷하며 제대로 만들어지지 않으면 오류를 발생시켜
    원하는 대로 만들어지지 않았다는 점을 알 수 있어 많이 사용된다.


        제약 조건 이해

제약 레이아웃의 가장 큰 특징은 뷰 크기와 위치를 결정할 때 제약 조건을 사용한다는 점이다.
제약 조건이란 뷰가 다른 요소와 어떤 연결이 되는지 알려주는 것으로 뷰의 연결점(Anchor Point)와 대상(Target)을 연결한다.
버튼을 하나 놓으면 자신을 감싸는 레이아웃을 부모 레이아웃(Parent Layout)이라 부른다.
그리고 버튼 사방면에 연결점으로 동그라미가 표시된다.

핸들(Side Constraint Handle)이라고도 부르는 연결점은 커서로 조절할 수 있다.
'버튼을 왼쪽 레이아웃과 연결' 하라는 조건을 하고 싶을 시엔 커서를 연결점을 클릭하여 타깃(Target)에 연결점을 잇는다.
그러면 타깃과 연결되는 연결선이 만들어지고 파랗게 표시된다.

연결선을 만들 때 뷰의 연결점과 타깃이 필요한데 다음 것들이 타깃이 될 수 있다.


    - 같은 부모 레이아웃 안의 다른 뷰 연결점
    - 부모 레이아웃 연결점
    - 가이드라인


그리고 대상 뷰와 타깃의 연결점으로 다음 것이 될 수 있다.


    - 사방면
    - 가로, 세로 축 가운데
    - 베이스라인 -> 텍스트를 보여주는 뷰인 경우만 적용


베이스라인은 가운데 넓적한 표시인데, 텍스트가 있을 경우 다른 뷰의 텍스트 높이를 맞춰주는 역할이다.

이제 레이아웃에 버튼을하나 추가하고 가운데 글자는 없애자. 버튼은 왼쪽과 위에서 약간 떨어뜨려 놓는다.
버튼의 왼쪽 연결점을 부모 레이아웃 왼쪽 벽면에 갖다 놓으면 새로운 제약 조건이 생성되며 연결선이 표시된다.
오른쪽 창에도 제약 조건을 표시하는 그림에 연결선이 표시된다.

속성 창에 제약 조건 표시에서 연결선에 0 이 표시되는데 위치에 따라 달라진다.
이 숫자를 보통 마진(Margin)이라 부르며 연결점과 타깃과의 거리를 표시한다.
즉, 왼쪽 벽면에서 얼마나 떨어졌는지 나타내는 값으로 80으로 수정하고 Enter 를 누르면 그만큼 떨어진다.

버튼을 하나 더 추가하여 기존 버튼 오른쪽에 놓는다. 기존 버튼의 세로 위치를 맞추도록 표시되어 손쉽게 배치할 수 있다.
새 버튼은 왼쪽 마진을 40으로, 위쪽 마진은 80으로 지정한다. 이렇게 제약 조건으로 적절한 위치에 쉽게 배치할 수 있다.


        화면 가운데에 뷰 배치하기

일반적으론 위쪽부터 차례대로 추가하는 것이고, 때론 중앙부터 배치할 때도 있다.
버튼을 화면 가운데 끌어다 놓으면 자동으로 연결점이 사방면에 배치된다. 만약 상단의 자석 모양 아이콘이
활성화가 되지 않지 않으면 직접 모두 배치해야 한다.

이렇게 배치된 요소를 정 가운데가 아닌 한쪽으로 약간 치우치게 하기 위해서는 세로 방향 바이어(Vertical Bias)
그리고 가로 방향 바이어스(Horizontal Bias) 를 이용한다. 얼마나 치우쳤는지 나타내는 값으로 기본은 50이다.
35로 값을 올리면 해당 방향으로 35% 지점에 위치하게 된다. 결국 비율로 위치를 결정한다.
바이어스 값은 0 ~ 1 로 35 지점은 0.35 로 지정할 수 있다.

뷰 크기를 지정하는 것은 끝 모서리 작은 점을 끌어서 조절할 수 있다.
제약 조건 표시 창에 꺽은선(>>) 이나 직선(ㅣㅣ) 으로 바꿀 수도 있는데 layout_width, layout_height 값을
쉽게 바꿀 수도 있다.

연결선은 여유 공간으로 구불구불하게 나타난다. 이로 부모 레이아웃의 여유 공간을
match_constraint 나 0dp 로 여유 공간을 꽉 채울 수 있다.


        가이드 라인 사용

가이드라인은 여러 뷰의 일정 기준 선에 정렬할 때 사용한다.
여러 뷰나 요소를 약간 떨어진 상태로 정렬하고 싶으면 이 가이드라인을 이용하여 배치하면 된다.
이는 실제 화면의 구성 요소는 아니다.

새 XML 파일을 추가하여 가이드라인을 사용한다.
'res/layout' 폴더에서 activity_menu.xml 을 생성한다.

I 모양 아이콘(Guidelines) 에서 세로 가이드라인 가로 가이드 라인 등을 선택하여 추가할 수 있다.
점선을 끌어서 위치를 지정할 수 있다. 세로 가이드린을 추가하여 이에 세 개의 버튼을 추가하여 맞춰보자.
세 개의 버튼의 연결점을 가이드라인을 타깃으로 연결하는 것을 시도해보자.


        XML 원본에 추가된 속성 확인

    <?xml version="1.0" encoding="utf-8"?>
    <androidx.constraintlayout.widget.ConstraintLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent">


가장 위쪽은 XML 파일의 일반적인 정보이다.


    <?xml version="1.0" encoding="utf-8"?>


그 다음엔 Component Tree 계층을 보여주며 최상위 레이아웃으로 ConstraintLayout 이 있다.
android: 속성은 안드로이드 기본 API 이고, xmlns: 로 시작하는 속성은 XML 레이아웃 파일의 속성이다.
그 중 xmlns:android 속성은 지정된 정보를 참조하라는 의미이다.


    xmlns:android       안드로이드 기본 SDK 속성을 사용
    xmlns:app           외부 라이브러리에 포함된 속성 사용
    xmlns:tools         디자이너 도구 등의 화면애 보여줄 때 사용 앱 실행에는 적용되지 않고 스튜디오에만 적용


ConstraintLayout 태그의 android:id 속성은 뷰를 구분하는 구분자 역할이다. 크게 두 가지로 나눌 수 있다.


    - XML 레이아웃 파일 안의 뷰 구분
    - XML 레이아웃 파일에 정의한 뷰를 자바 소스 파일에서 찾을 때


XML 레이아웃 파일에 여러 뷰를 추가할 수 있고 구분하기 위해 id 속성값을 사용한다.

제약 레이아웃에서 하나의 뷰를 다른 뷰와 연결 시 다음 규칙을 갖는다.


    layout_constraint[소스 뷰의 연결점]_[타깃 뷰의 연결점]="[타깃 뷰의 id]"


예로 두 버튼 button1 이 위에, button2 가 아래에 있고 서로 연결점으로 연결되어 있고
위 버튼이 타깃 뷰, 아래 버튼이 소스 뷰라면 layout_constraint 뒤에 Top 과 _ 기호, toButtomOf 라는
속성 이름이 사용된다. 속성 값으로는 첫 번째 뷰의 id 값이 사용된다.


    @+id/아이디값


다지이너 도구 화면엔 id 값이 단순히 button 이 있는데, 실제 원본 XML 에는 위 형식을 지정되어 있다.
다음과 같은 여러 속성들을 사용할 수 있다.


    layout_constraint[Top, Right(End), Left(Start), Button]_to[Top, Right(End), Left(Start), Button]Of


Left 는 Start, Right 는 End 로 대체할 수 있다.


    <androidx.constraintlayout.widget.Guideline
        android:id="@+id/guideline"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="80dp"
        android:layout_marginLeft="80dp"
        android:orientation="vertical"
        app:layout_constraintGuide_begin="80dp"
        app:layout_constraintStart_toStartOf="parent" />


가이드라인 클래스는 외부 라이브러리라서 androidx.constraintlayout.widget.Guideline 로 사용한다.
그리고 android:orientation 속성은 가로 세로 방향 중 어느 방향인지 지정하는 것으로 필수 속성이다.


    Guideline 의 필수 속성 -> android:orientation


아래엔 layout_constraintGuide_begin 속성이 보이는데 부모 레이아웃 벽면에서 얼마나 떨어져 배치할 지 지정하는 속성이다.
세가지 속성 중 하나를 사용할 수 있다.


    layout_constraintGuide_begin        세로 방향일 때 왼쪽부터, 가로일땐 위쪽부터 거리 지정
    layout_constraintGuide_end          세로 방향일 때 오른쪽부터, 가로일땐 아래쪽부터 거리 지정
    layout_constraintGuide_percent      layout_constraintGuide_begin 속성 대신 % 단위로 지정


외부라이브러리이기 때문에 모두 app: 접두어를 붙여 사용한다.


        크기를 표시하는 단위와 마진

크기 지정에 dp 를 자주 사용하지만 sp, px 등 여러 가지가 있다.
폭과 높이는 일반적으로 match_parent 와 wrap_content 값을 지정하는 방식으로 전체화면 기준으로 배치하는데
크기를 픽셀 값으로 지정하면 해상도에 따라 크기가 다르게 보이지만 위 속성 값은 여러 단말 해상도에 지원할 수 있다.

px 은 고정값이지만 ds 나 sp 는 단말기 해상도에 따라 가변적인 값을 가진다.


    단위          표현              설명
    px          픽셀              화면 픽셀 수
    dp, dip     밀도 독립 픽셀    160dip 기준으로 한 픽셀
    sp, sip     축척 독립적 픽셀  텍스트 크기를 기준으로 한 픽셀
    in          인치              1인치로 된 물리적 길이
    mm          밀리미터          1밀리미터로 된 물리적 길이
    em          텍스트 크기       글꼴과 상관없이 동일한 텍스트 크기 표시


dp 는 해상도에 비례하는 크기이다. 160dpi 화면에서 20픽셀이면 320dpi 에선 40 픽셀이다.
sp 는 글꼴을 기준으로 텍스트 크기를 나타내므로 뷰 크기에는 사용되지 않는다.


    조언

    뷰에는 dp, 글자 크기에는 sp 단위를 사용하는 것이 좋음.


XML 코드의 나머지 부분을 살펴본다.


    <Button
        android:id="@+id/button4"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Button"
        app:layout_constraintStart_toStartOf="@+id/guideline"
        app:layout_constraintTop_toTopOf="parent" />

    <Button
        android:id="@+id/button5"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:text="Button"
        app:layout_constraintStart_toStartOf="@+id/guideline"
        app:layout_constraintTop_toBottomOf="@+id/button4" />

    <Button
        android:id="@+id/button6"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:text="Button"
        app:layout_constraintStart_toStartOf="@+id/guideline"
        app:layout_constraintTop_toBottomOf="@+id/button5" />


위 버튼들은 id 값만 중복되지 않으면 마음대로 바꿀 수 있다.
또한 다른 뷰에 설정한 id도 함께 중복되면 안된다.

id 속성 외에 text 속성은 버튼에 글자를 넣을 때 사용하며
app:layout_constraintLeft_toLeftOf 속성은 다음과 같다.


    app:layout_constraintLeft_toLeftOf 속성
        -> 이 버튼 왼쪽 연결점과 타깃 뷰 위쪽 연결점을 연결하여 제약 조건을 만듦


또한 타깃 뷰의 id 가 설정되어 있는데 @+id/guideline 으로 설정된 것을 볼 수 있다.
다른 속성으로는 layout_marginTop 이 보인다. 이는 위쪽에서 얼마나 띄울지 정하는 것이다.


    layout_margin[Top, Bottom, Left, Right, ]
    -> 위, 아래, 왼, 오른쪽으로 얼마나 띄울지 정하며 방향 지정이 없으면 사방으로 얼마나띄울지 정함


